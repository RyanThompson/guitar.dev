/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@laravel-streams/core/resources/public/js/index.esm.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@laravel-streams/core/resources/public/js/index.esm.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Application": () => (/* binding */ i),
/* harmony export */   "Collection": () => (/* binding */ a),
/* harmony export */   "CoreServiceProvider": () => (/* binding */ c),
/* harmony export */   "Criteria": () => (/* binding */ u),
/* harmony export */   "Dispatcher": () => (/* binding */ l),
/* harmony export */   "Entry": () => (/* binding */ p),
/* harmony export */   "EntryCollection": () => (/* binding */ d),
/* harmony export */   "Field": () => (/* binding */ h),
/* harmony export */   "FieldCollection": () => (/* binding */ y),
/* harmony export */   "Http": () => (/* binding */ v),
/* harmony export */   "HttpServiceProvider": () => (/* binding */ g),
/* harmony export */   "LocalStorageAdapter": () => (/* binding */ _),
/* harmony export */   "PaginatedEntryCollection": () => (/* binding */ m),
/* harmony export */   "Repository": () => (/* binding */ b),
/* harmony export */   "ServiceProvider": () => (/* binding */ w),
/* harmony export */   "SessionStorageAdapter": () => (/* binding */ S),
/* harmony export */   "StorageAdapter": () => (/* binding */ C),
/* harmony export */   "StorageServiceProvider": () => (/* binding */ O),
/* harmony export */   "Stream": () => (/* binding */ T),
/* harmony export */   "Streams": () => (/* binding */ E),
/* harmony export */   "StreamsServiceProvider": () => (/* binding */ P),
/* harmony export */   "Transformer": () => (/* binding */ A),
/* harmony export */   "app": () => (/* binding */ x),
/* harmony export */   "comparisonOperators": () => (/* binding */ I),
/* harmony export */   "inject": () => (/* binding */ k),
/* harmony export */   "logicalOperators": () => (/* binding */ N),
/* harmony export */   "operators": () => (/* binding */ R)
/* harmony export */ });
/*! For license information please see index.esm.js.LICENSE.txt */
var t={7757:(t,r,o)=>{t.exports=o(5666)},9669:(t,r,o)=>{t.exports=o(1609)},5448:(t,r,o)=>{var i=o(4867),a=o(6026),c=o(4372),u=o(5327),l=o(4097),p=o(4109),d=o(7985),h=o(5061);t.exports=function xhrAdapter(t){return new Promise((function dispatchXhrRequest(r,o){var y=t.data,v=t.headers,g=t.responseType;i.isFormData(y)&&delete v["Content-Type"];var _=new XMLHttpRequest;if(t.auth){var m=t.auth.username||"",b=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";v.Authorization="Basic "+btoa(m+":"+b)}var w=l(t.baseURL,t.url);function onloadend(){if(_){var i="getAllResponseHeaders"in _?p(_.getAllResponseHeaders()):null,c={data:g&&"text"!==g&&"json"!==g?_.response:_.responseText,status:_.status,statusText:_.statusText,headers:i,config:t,request:_};a(r,o,c),_=null}}if(_.open(t.method.toUpperCase(),u(w,t.params,t.paramsSerializer),!0),_.timeout=t.timeout,"onloadend"in _?_.onloadend=onloadend:_.onreadystatechange=function handleLoad(){_&&4===_.readyState&&(0!==_.status||_.responseURL&&0===_.responseURL.indexOf("file:"))&&setTimeout(onloadend)},_.onabort=function handleAbort(){_&&(o(h("Request aborted",t,"ECONNABORTED",_)),_=null)},_.onerror=function handleError(){o(h("Network Error",t,null,_)),_=null},_.ontimeout=function handleTimeout(){var r="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(r=t.timeoutErrorMessage),o(h(r,t,t.transitional&&t.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",_)),_=null},i.isStandardBrowserEnv()){var S=(t.withCredentials||d(w))&&t.xsrfCookieName?c.read(t.xsrfCookieName):void 0;S&&(v[t.xsrfHeaderName]=S)}"setRequestHeader"in _&&i.forEach(v,(function setRequestHeader(t,r){void 0===y&&"content-type"===r.toLowerCase()?delete v[r]:_.setRequestHeader(r,t)})),i.isUndefined(t.withCredentials)||(_.withCredentials=!!t.withCredentials),g&&"json"!==g&&(_.responseType=t.responseType),"function"==typeof t.onDownloadProgress&&_.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&_.upload&&_.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function onCanceled(t){_&&(_.abort(),o(t),_=null)})),y||(y=null),_.send(y)}))}},1609:(t,r,o)=>{var i=o(4867),a=o(1849),c=o(321),u=o(7185);function createInstance(t){var r=new c(t),o=a(c.prototype.request,r);return i.extend(o,c.prototype,r),i.extend(o,r),o}var l=createInstance(o(5655));l.Axios=c,l.create=function create(t){return createInstance(u(l.defaults,t))},l.Cancel=o(5263),l.CancelToken=o(4972),l.isCancel=o(6502),l.all=function all(t){return Promise.all(t)},l.spread=o(8713),l.isAxiosError=o(6268),t.exports=l,t.exports.default=l},5263:t=>{function Cancel(t){this.message=t}Cancel.prototype.toString=function toString(){return"Cancel"+(this.message?": "+this.message:"")},Cancel.prototype.__CANCEL__=!0,t.exports=Cancel},4972:(t,r,o)=>{var i=o(5263);function CancelToken(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var r;this.promise=new Promise((function promiseExecutor(t){r=t}));var o=this;t((function cancel(t){o.reason||(o.reason=new i(t),r(o.reason))}))}CancelToken.prototype.throwIfRequested=function throwIfRequested(){if(this.reason)throw this.reason},CancelToken.source=function source(){var t;return{token:new CancelToken((function executor(r){t=r})),cancel:t}},t.exports=CancelToken},6502:t=>{t.exports=function isCancel(t){return!(!t||!t.__CANCEL__)}},321:(t,r,o)=>{var i=o(4867),a=o(5327),c=o(782),u=o(3572),l=o(7185),p=o(4875),d=p.validators;function Axios(t){this.defaults=t,this.interceptors={request:new c,response:new c}}Axios.prototype.request=function request(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=l(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var r=t.transitional;void 0!==r&&p.assertOptions(r,{silentJSONParsing:d.transitional(d.boolean,"1.0.0"),forcedJSONParsing:d.transitional(d.boolean,"1.0.0"),clarifyTimeoutError:d.transitional(d.boolean,"1.0.0")},!1);var o=[],i=!0;this.interceptors.request.forEach((function unshiftRequestInterceptors(r){"function"==typeof r.runWhen&&!1===r.runWhen(t)||(i=i&&r.synchronous,o.unshift(r.fulfilled,r.rejected))}));var a,c=[];if(this.interceptors.response.forEach((function pushResponseInterceptors(t){c.push(t.fulfilled,t.rejected)})),!i){var h=[u,void 0];for(Array.prototype.unshift.apply(h,o),h=h.concat(c),a=Promise.resolve(t);h.length;)a=a.then(h.shift(),h.shift());return a}for(var y=t;o.length;){var v=o.shift(),g=o.shift();try{y=v(y)}catch(t){g(t);break}}try{a=u(y)}catch(t){return Promise.reject(t)}for(;c.length;)a=a.then(c.shift(),c.shift());return a},Axios.prototype.getUri=function getUri(t){return t=l(this.defaults,t),a(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},i.forEach(["delete","get","head","options"],(function forEachMethodNoData(t){Axios.prototype[t]=function(r,o){return this.request(l(o||{},{method:t,url:r,data:(o||{}).data}))}})),i.forEach(["post","put","patch"],(function forEachMethodWithData(t){Axios.prototype[t]=function(r,o,i){return this.request(l(i||{},{method:t,url:r,data:o}))}})),t.exports=Axios},782:(t,r,o)=>{var i=o(4867);function InterceptorManager(){this.handlers=[]}InterceptorManager.prototype.use=function use(t,r,o){return this.handlers.push({fulfilled:t,rejected:r,synchronous:!!o&&o.synchronous,runWhen:o?o.runWhen:null}),this.handlers.length-1},InterceptorManager.prototype.eject=function eject(t){this.handlers[t]&&(this.handlers[t]=null)},InterceptorManager.prototype.forEach=function forEach(t){i.forEach(this.handlers,(function forEachHandler(r){null!==r&&t(r)}))},t.exports=InterceptorManager},4097:(t,r,o)=>{var i=o(1793),a=o(7303);t.exports=function buildFullPath(t,r){return t&&!i(r)?a(t,r):r}},5061:(t,r,o)=>{var i=o(481);t.exports=function createError(t,r,o,a,c){var u=new Error(t);return i(u,r,o,a,c)}},3572:(t,r,o)=>{var i=o(4867),a=o(8527),c=o(6502),u=o(5655);function throwIfCancellationRequested(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function dispatchRequest(t){return throwIfCancellationRequested(t),t.headers=t.headers||{},t.data=a.call(t,t.data,t.headers,t.transformRequest),t.headers=i.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),i.forEach(["delete","get","head","post","put","patch","common"],(function cleanHeaderConfig(r){delete t.headers[r]})),(t.adapter||u.adapter)(t).then((function onAdapterResolution(r){return throwIfCancellationRequested(t),r.data=a.call(t,r.data,r.headers,t.transformResponse),r}),(function onAdapterRejection(r){return c(r)||(throwIfCancellationRequested(t),r&&r.response&&(r.response.data=a.call(t,r.response.data,r.response.headers,t.transformResponse))),Promise.reject(r)}))}},481:t=>{t.exports=function enhanceError(t,r,o,i,a){return t.config=r,o&&(t.code=o),t.request=i,t.response=a,t.isAxiosError=!0,t.toJSON=function toJSON(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},7185:(t,r,o)=>{var i=o(4867);t.exports=function mergeConfig(t,r){r=r||{};var o={},a=["url","method","data"],c=["headers","auth","proxy","params"],u=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],l=["validateStatus"];function getMergedValue(t,r){return i.isPlainObject(t)&&i.isPlainObject(r)?i.merge(t,r):i.isPlainObject(r)?i.merge({},r):i.isArray(r)?r.slice():r}function mergeDeepProperties(a){i.isUndefined(r[a])?i.isUndefined(t[a])||(o[a]=getMergedValue(void 0,t[a])):o[a]=getMergedValue(t[a],r[a])}i.forEach(a,(function valueFromConfig2(t){i.isUndefined(r[t])||(o[t]=getMergedValue(void 0,r[t]))})),i.forEach(c,mergeDeepProperties),i.forEach(u,(function defaultToConfig2(a){i.isUndefined(r[a])?i.isUndefined(t[a])||(o[a]=getMergedValue(void 0,t[a])):o[a]=getMergedValue(void 0,r[a])})),i.forEach(l,(function merge(i){i in r?o[i]=getMergedValue(t[i],r[i]):i in t&&(o[i]=getMergedValue(void 0,t[i]))}));var p=a.concat(c).concat(u).concat(l),d=Object.keys(t).concat(Object.keys(r)).filter((function filterAxiosKeys(t){return-1===p.indexOf(t)}));return i.forEach(d,mergeDeepProperties),o}},6026:(t,r,o)=>{var i=o(5061);t.exports=function settle(t,r,o){var a=o.config.validateStatus;o.status&&a&&!a(o.status)?r(i("Request failed with status code "+o.status,o.config,null,o.request,o)):t(o)}},8527:(t,r,o)=>{var i=o(4867),a=o(5655);t.exports=function transformData(t,r,o){var c=this||a;return i.forEach(o,(function transform(o){t=o.call(c,t,r)})),t}},5655:(t,r,o)=>{var i=o(4155),a=o(4867),c=o(6016),u=o(481),l={"Content-Type":"application/x-www-form-urlencoded"};function setContentTypeIfUnset(t,r){!a.isUndefined(t)&&a.isUndefined(t["Content-Type"])&&(t["Content-Type"]=r)}var p={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:function getDefaultAdapter(){var t;return("undefined"!=typeof XMLHttpRequest||void 0!==i&&"[object process]"===Object.prototype.toString.call(i))&&(t=o(5448)),t}(),transformRequest:[function transformRequest(t,r){return c(r,"Accept"),c(r,"Content-Type"),a.isFormData(t)||a.isArrayBuffer(t)||a.isBuffer(t)||a.isStream(t)||a.isFile(t)||a.isBlob(t)?t:a.isArrayBufferView(t)?t.buffer:a.isURLSearchParams(t)?(setContentTypeIfUnset(r,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):a.isObject(t)||r&&"application/json"===r["Content-Type"]?(setContentTypeIfUnset(r,"application/json"),function stringifySafely(t,r,o){if(a.isString(t))try{return(r||JSON.parse)(t),a.trim(t)}catch(t){if("SyntaxError"!==t.name)throw t}return(o||JSON.stringify)(t)}(t)):t}],transformResponse:[function transformResponse(t){var r=this.transitional,o=r&&r.silentJSONParsing,i=r&&r.forcedJSONParsing,c=!o&&"json"===this.responseType;if(c||i&&a.isString(t)&&t.length)try{return JSON.parse(t)}catch(t){if(c){if("SyntaxError"===t.name)throw u(t,this,"E_JSON_PARSE");throw t}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function validateStatus(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};a.forEach(["delete","get","head"],(function forEachMethodNoData(t){p.headers[t]={}})),a.forEach(["post","put","patch"],(function forEachMethodWithData(t){p.headers[t]=a.merge(l)})),t.exports=p},1849:t=>{t.exports=function bind(t,r){return function wrap(){for(var o=new Array(arguments.length),i=0;i<o.length;i++)o[i]=arguments[i];return t.apply(r,o)}}},5327:(t,r,o)=>{var i=o(4867);function encode(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function buildURL(t,r,o){if(!r)return t;var a;if(o)a=o(r);else if(i.isURLSearchParams(r))a=r.toString();else{var c=[];i.forEach(r,(function serialize(t,r){null!=t&&(i.isArray(t)?r+="[]":t=[t],i.forEach(t,(function parseValue(t){i.isDate(t)?t=t.toISOString():i.isObject(t)&&(t=JSON.stringify(t)),c.push(encode(r)+"="+encode(t))})))})),a=c.join("&")}if(a){var u=t.indexOf("#");-1!==u&&(t=t.slice(0,u)),t+=(-1===t.indexOf("?")?"?":"&")+a}return t}},7303:t=>{t.exports=function combineURLs(t,r){return r?t.replace(/\/+$/,"")+"/"+r.replace(/^\/+/,""):t}},4372:(t,r,o)=>{var i=o(4867);t.exports=i.isStandardBrowserEnv()?function standardBrowserEnv(){return{write:function write(t,r,o,a,c,u){var l=[];l.push(t+"="+encodeURIComponent(r)),i.isNumber(o)&&l.push("expires="+new Date(o).toGMTString()),i.isString(a)&&l.push("path="+a),i.isString(c)&&l.push("domain="+c),!0===u&&l.push("secure"),document.cookie=l.join("; ")},read:function read(t){var r=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return r?decodeURIComponent(r[3]):null},remove:function remove(t){this.write(t,"",Date.now()-864e5)}}}():{write:function write(){},read:function read(){return null},remove:function remove(){}}},1793:t=>{t.exports=function isAbsoluteURL(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},6268:t=>{t.exports=function isAxiosError(t){return"object"==typeof t&&!0===t.isAxiosError}},7985:(t,r,o)=>{var i=o(4867);t.exports=i.isStandardBrowserEnv()?function standardBrowserEnv(){var t,r=/(msie|trident)/i.test(navigator.userAgent),o=document.createElement("a");function resolveURL(t){var i=t;return r&&(o.setAttribute("href",i),i=o.href),o.setAttribute("href",i),{href:o.href,protocol:o.protocol?o.protocol.replace(/:$/,""):"",host:o.host,search:o.search?o.search.replace(/^\?/,""):"",hash:o.hash?o.hash.replace(/^#/,""):"",hostname:o.hostname,port:o.port,pathname:"/"===o.pathname.charAt(0)?o.pathname:"/"+o.pathname}}return t=resolveURL(window.location.href),function isURLSameOrigin(r){var o=i.isString(r)?resolveURL(r):r;return o.protocol===t.protocol&&o.host===t.host}}():function isURLSameOrigin(){return!0}},6016:(t,r,o)=>{var i=o(4867);t.exports=function normalizeHeaderName(t,r){i.forEach(t,(function processHeader(o,i){i!==r&&i.toUpperCase()===r.toUpperCase()&&(t[r]=o,delete t[i])}))}},4109:(t,r,o)=>{var i=o(4867),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function parseHeaders(t){var r,o,c,u={};return t?(i.forEach(t.split("\n"),(function parser(t){if(c=t.indexOf(":"),r=i.trim(t.substr(0,c)).toLowerCase(),o=i.trim(t.substr(c+1)),r){if(u[r]&&a.indexOf(r)>=0)return;u[r]="set-cookie"===r?(u[r]?u[r]:[]).concat([o]):u[r]?u[r]+", "+o:o}})),u):u}},8713:t=>{t.exports=function spread(t){return function wrap(r){return t.apply(null,r)}}},4875:(t,r,o)=>{var i=o(8593),a={};["object","boolean","number","function","string","symbol"].forEach((function(t,r){a[t]=function validator(o){return typeof o===t||"a"+(r<1?"n ":" ")+t}}));var c={},u=i.version.split(".");function isOlderVersion(t,r){for(var o=r?r.split("."):u,i=t.split("."),a=0;a<3;a++){if(o[a]>i[a])return!0;if(o[a]<i[a])return!1}return!1}a.transitional=function transitional(t,r,o){var a=r&&isOlderVersion(r);function formatMessage(t,r){return"[Axios v"+i.version+"] Transitional option '"+t+"'"+r+(o?". "+o:"")}return function(o,i,u){if(!1===t)throw new Error(formatMessage(i," has been removed in "+r));return a&&!c[i]&&(c[i]=!0,console.warn(formatMessage(i," has been deprecated since v"+r+" and will be removed in the near future"))),!t||t(o,i,u)}},t.exports={isOlderVersion,assertOptions:function assertOptions(t,r,o){if("object"!=typeof t)throw new TypeError("options must be an object");for(var i=Object.keys(t),a=i.length;a-- >0;){var c=i[a],u=r[c];if(u){var l=t[c],p=void 0===l||u(l,c,t);if(!0!==p)throw new TypeError("option "+c+" must be "+p)}else if(!0!==o)throw Error("Unknown option "+c)}},validators:a}},4867:(t,r,o)=>{var i=o(1849),a=Object.prototype.toString;function isArray(t){return"[object Array]"===a.call(t)}function isUndefined(t){return void 0===t}function isObject(t){return null!==t&&"object"==typeof t}function isPlainObject(t){if("[object Object]"!==a.call(t))return!1;var r=Object.getPrototypeOf(t);return null===r||r===Object.prototype}function isFunction(t){return"[object Function]"===a.call(t)}function forEach(t,r){if(null!=t)if("object"!=typeof t&&(t=[t]),isArray(t))for(var o=0,i=t.length;o<i;o++)r.call(null,t[o],o,t);else for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&r.call(null,t[a],a,t)}t.exports={isArray,isArrayBuffer:function isArrayBuffer(t){return"[object ArrayBuffer]"===a.call(t)},isBuffer:function isBuffer(t){return null!==t&&!isUndefined(t)&&null!==t.constructor&&!isUndefined(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function isFormData(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function isArrayBufferView(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function isString(t){return"string"==typeof t},isNumber:function isNumber(t){return"number"==typeof t},isObject,isPlainObject,isUndefined,isDate:function isDate(t){return"[object Date]"===a.call(t)},isFile:function isFile(t){return"[object File]"===a.call(t)},isBlob:function isBlob(t){return"[object Blob]"===a.call(t)},isFunction,isStream:function isStream(t){return isObject(t)&&isFunction(t.pipe)},isURLSearchParams:function isURLSearchParams(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function isStandardBrowserEnv(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach,merge:function merge(){var t={};function assignValue(r,o){isPlainObject(t[o])&&isPlainObject(r)?t[o]=merge(t[o],r):isPlainObject(r)?t[o]=merge({},r):isArray(r)?t[o]=r.slice():t[o]=r}for(var r=0,o=arguments.length;r<o;r++)forEach(arguments[r],assignValue);return t},extend:function extend(t,r,o){return forEach(r,(function assignValue(r,a){t[a]=o&&"function"==typeof r?i(r,o):r})),t},trim:function trim(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")},stripBOM:function stripBOM(t){return 65279===t.charCodeAt(0)&&(t=t.slice(1)),t}}},1227:(t,r,o)=>{var i=o(4155);r.formatArgs=function formatArgs(r){if(r[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+r[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const o="color: "+this.color;r.splice(1,0,o,"color: inherit");let i=0,a=0;r[0].replace(/%[a-zA-Z%]/g,(t=>{"%%"!==t&&(i++,"%c"===t&&(a=i))})),r.splice(a,0,o)},r.save=function save(t){try{t?r.storage.setItem("debug",t):r.storage.removeItem("debug")}catch(t){}},r.load=function load(){let t;try{t=r.storage.getItem("debug")}catch(t){}!t&&void 0!==i&&"env"in i&&(t=i.env.DEBUG);return t},r.useColors=function useColors(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},r.storage=function localstorage(){try{return localStorage}catch(t){}}(),r.destroy=(()=>{let t=!1;return()=>{t||(t=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),r.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],r.log=console.debug||console.log||(()=>{}),t.exports=o(2447)(r);const{formatters:a}=t.exports;a.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},2447:(t,r,o)=>{t.exports=function setup(t){function createDebug(t){let r,o,i,a=null;function debug(...t){if(!debug.enabled)return;const o=debug,i=Number(new Date),a=i-(r||i);o.diff=a,o.prev=r,o.curr=i,r=i,t[0]=createDebug.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let c=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,((r,i)=>{if("%%"===r)return"%";c++;const a=createDebug.formatters[i];if("function"==typeof a){const i=t[c];r=a.call(o,i),t.splice(c,1),c--}return r})),createDebug.formatArgs.call(o,t);(o.log||createDebug.log).apply(o,t)}return debug.namespace=t,debug.useColors=createDebug.useColors(),debug.color=createDebug.selectColor(t),debug.extend=extend,debug.destroy=createDebug.destroy,Object.defineProperty(debug,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==a?a:(o!==createDebug.namespaces&&(o=createDebug.namespaces,i=createDebug.enabled(t)),i),set:t=>{a=t}}),"function"==typeof createDebug.init&&createDebug.init(debug),debug}function extend(t,r){const o=createDebug(this.namespace+(void 0===r?":":r)+t);return o.log=this.log,o}function toNamespace(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return createDebug.debug=createDebug,createDebug.default=createDebug,createDebug.coerce=function coerce(t){if(t instanceof Error)return t.stack||t.message;return t},createDebug.disable=function disable(){const t=[...createDebug.names.map(toNamespace),...createDebug.skips.map(toNamespace).map((t=>"-"+t))].join(",");return createDebug.enable(""),t},createDebug.enable=function enable(t){let r;createDebug.save(t),createDebug.namespaces=t,createDebug.names=[],createDebug.skips=[];const o=("string"==typeof t?t:"").split(/[\s,]+/),i=o.length;for(r=0;r<i;r++)o[r]&&("-"===(t=o[r].replace(/\*/g,".*?"))[0]?createDebug.skips.push(new RegExp("^"+t.substr(1)+"$")):createDebug.names.push(new RegExp("^"+t+"$")))},createDebug.enabled=function enabled(t){if("*"===t[t.length-1])return!0;let r,o;for(r=0,o=createDebug.skips.length;r<o;r++)if(createDebug.skips[r].test(t))return!1;for(r=0,o=createDebug.names.length;r<o;r++)if(createDebug.names[r].test(t))return!0;return!1},createDebug.humanize=o(7824),createDebug.destroy=function destroy(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(t).forEach((r=>{createDebug[r]=t[r]})),createDebug.names=[],createDebug.skips=[],createDebug.formatters={},createDebug.selectColor=function selectColor(t){let r=0;for(let o=0;o<t.length;o++)r=(r<<5)-r+t.charCodeAt(o),r|=0;return createDebug.colors[Math.abs(r)%createDebug.colors.length]},createDebug.enable(createDebug.load()),createDebug}},6387:(t,r,o)=>{var i,a=o(4155);!function(c){var u=Object.hasOwnProperty,l=Array.isArray?Array.isArray:function _isArray(t){return"[object Array]"===Object.prototype.toString.call(t)},p="object"==typeof a&&"function"==typeof a.nextTick,d="function"==typeof Symbol,h="object"==typeof Reflect,y="function"==typeof setImmediate?setImmediate:setTimeout,v=d?h&&"function"==typeof Reflect.ownKeys?Reflect.ownKeys:function(t){var r=Object.getOwnPropertyNames(t);return r.push.apply(r,Object.getOwnPropertySymbols(t)),r}:Object.keys;function init(){this._events={},this._conf&&configure.call(this,this._conf)}function configure(t){t&&(this._conf=t,t.delimiter&&(this.delimiter=t.delimiter),t.maxListeners!==c&&(this._maxListeners=t.maxListeners),t.wildcard&&(this.wildcard=t.wildcard),t.newListener&&(this._newListener=t.newListener),t.removeListener&&(this._removeListener=t.removeListener),t.verboseMemoryLeak&&(this.verboseMemoryLeak=t.verboseMemoryLeak),t.ignoreErrors&&(this.ignoreErrors=t.ignoreErrors),this.wildcard&&(this.listenerTree={}))}function logPossibleMemoryLeak(t,r){var o="(node) warning: possible EventEmitter memory leak detected. "+t+" listeners added. Use emitter.setMaxListeners() to increase limit.";if(this.verboseMemoryLeak&&(o+=" Event name: "+r+"."),void 0!==a&&a.emitWarning){var i=new Error(o);i.name="MaxListenersExceededWarning",i.emitter=this,i.count=t,a.emitWarning(i)}else console.error(o),console.trace&&console.trace()}var toArray=function(t,r,o){var i=arguments.length;switch(i){case 0:return[];case 1:return[t];case 2:return[t,r];case 3:return[t,r,o];default:for(var a=new Array(i);i--;)a[i]=arguments[i];return a}};function toObject(t,r){for(var o={},i=t.length,a=r?value.length:0,u=0;u<i;u++)o[t[u]]=u<a?r[u]:c;return o}function TargetObserver(t,r,o){var i,a;if(this._emitter=t,this._target=r,this._listeners={},this._listenersCount=0,(o.on||o.off)&&(i=o.on,a=o.off),r.addEventListener?(i=r.addEventListener,a=r.removeEventListener):r.addListener?(i=r.addListener,a=r.removeListener):r.on&&(i=r.on,a=r.off),!i&&!a)throw Error("target does not implement any known event API");if("function"!=typeof i)throw TypeError("on method must be a function");if("function"!=typeof a)throw TypeError("off method must be a function");this._on=i,this._off=a;var c=t._observers;c?c.push(this):t._observers=[this]}function resolveOptions(t,r,o,i){var a=Object.assign({},r);if(!t)return a;if("object"!=typeof t)throw TypeError("options must be an object");var l,p,d,h=Object.keys(t),y=h.length;function reject(t){throw Error('Invalid "'+l+'" option value'+(t?". Reason: "+t:""))}for(var v=0;v<y;v++){if(l=h[v],!i&&!u.call(r,l))throw Error('Unknown "'+l+'" option');(p=t[l])!==c&&(d=o[l],a[l]=d?d(p,reject):p)}return a}function constructorReducer(t,r){return"function"==typeof t&&t.hasOwnProperty("prototype")||r("value must be a constructor"),t}function makeTypeReducer(t){var r="value must be type of "+t.join("|"),o=t.length,i=t[0],a=t[1];return 1===o?function(t,o){if(typeof t===i)return t;o(r)}:2===o?function(t,o){var c=typeof t;if(c===i||c===a)return t;o(r)}:function(i,a){for(var c=typeof i,u=o;u-- >0;)if(c===t[u])return i;a(r)}}Object.assign(TargetObserver.prototype,{subscribe:function(t,r,o){var i=this,a=this._target,c=this._emitter,u=this._listeners,handler=function(){var i=toArray.apply(null,arguments),u={data:i,name:r,original:t};if(o){var l=o.call(a,u);!1!==l&&c.emit.apply(c,[u.name].concat(i))}else c.emit.apply(c,[r].concat(i))};if(u[t])throw Error("Event '"+t+"' is already listening");this._listenersCount++,c._newListener&&c._removeListener&&!i._onNewListener?(this._onNewListener=function(o){o===r&&null===u[t]&&(u[t]=handler,i._on.call(a,t,handler))},c.on("newListener",this._onNewListener),this._onRemoveListener=function(o){o===r&&!c.hasListeners(o)&&u[t]&&(u[t]=null,i._off.call(a,t,handler))},u[t]=null,c.on("removeListener",this._onRemoveListener)):(u[t]=handler,i._on.call(a,t,handler))},unsubscribe:function(t){var r,o,i,a=this,c=this._listeners,u=this._emitter,l=this._off,p=this._target;if(t&&"string"!=typeof t)throw TypeError("event must be a string");function clearRefs(){a._onNewListener&&(u.off("newListener",a._onNewListener),u.off("removeListener",a._onRemoveListener),a._onNewListener=null,a._onRemoveListener=null);var t=findTargetIndex.call(u,a);u._observers.splice(t,1)}if(t){if(!(r=c[t]))return;l.call(p,t,r),delete c[t],--this._listenersCount||clearRefs()}else{for(i=(o=v(c)).length;i-- >0;)t=o[i],l.call(p,t,c[t]);this._listeners={},this._listenersCount=0,clearRefs()}}});var g=makeTypeReducer(["function"]),_=makeTypeReducer(["object","function"]);function makeCancelablePromise(t,r,o){var i,a,c,u=0,l=new t((function(p,d,h){function cleanup(){a&&(a=null),u&&(clearTimeout(u),u=0)}o=resolveOptions(o,{timeout:0,overload:!1},{timeout:function(t,r){return("number"!=typeof(t*=1)||t<0||!Number.isFinite(t))&&r("timeout must be a positive number"),t}}),i=!o.overload&&"function"==typeof t.prototype.cancel&&"function"==typeof h;var _resolve=function(t){cleanup(),p(t)},_reject=function(t){cleanup(),d(t)};i?r(_resolve,_reject,h):(a=[function(t){_reject(t||Error("canceled"))}],r(_resolve,_reject,(function(t){if(c)throw Error("Unable to subscribe on cancel event asynchronously");if("function"!=typeof t)throw TypeError("onCancel callback must be a function");a.push(t)})),c=!0),o.timeout>0&&(u=setTimeout((function(){var t=Error("timeout");t.code="ETIMEDOUT",u=0,l.cancel(t),d(t)}),o.timeout))}));return i||(l.cancel=function(t){if(a){for(var r=a.length,o=1;o<r;o++)a[o](t);a[0](t),a=null}}),l}function findTargetIndex(t){var r=this._observers;if(!r)return-1;for(var o=r.length,i=0;i<o;i++)if(r[i]._target===t)return i;return-1}function searchListenerTree(t,r,o,i,a){if(!o)return null;if(0===i){var c=typeof r;if("string"===c){var u,l,p=0,d=0,h=this.delimiter,y=h.length;if(-1!==(l=r.indexOf(h))){u=new Array(5);do{u[p++]=r.slice(d,l),d=l+y}while(-1!==(l=r.indexOf(h,d)));u[p++]=r.slice(d),r=u,a=p}else r=[r],a=1}else"object"===c?a=r.length:(r=[r],a=1)}var g,_,m,b,w,S,C,O=null,T=r[i],E=r[i+1];if(i===a&&o._listeners)return"function"==typeof o._listeners?(t&&t.push(o._listeners),[o]):(t&&t.push.apply(t,o._listeners),[o]);if("*"===T){for(l=(S=v(o)).length;l-- >0;)"_listeners"!==(g=S[l])&&(C=searchListenerTree(t,r,o[g],i+1,a))&&(O?O.push.apply(O,C):O=C);return O}if("**"===T){for((w=i+1===a||i+2===a&&"*"===E)&&o._listeners&&(O=searchListenerTree(t,r,o,a,a)),l=(S=v(o)).length;l-- >0;)"_listeners"!==(g=S[l])&&("*"===g||"**"===g?(o[g]._listeners&&!w&&(C=searchListenerTree(t,r,o[g],a,a))&&(O?O.push.apply(O,C):O=C),C=searchListenerTree(t,r,o[g],i,a)):C=searchListenerTree(t,r,o[g],g===E?i+2:i,a),C&&(O?O.push.apply(O,C):O=C));return O}if(o[T]&&(O=searchListenerTree(t,r,o[T],i+1,a)),(_=o["*"])&&searchListenerTree(t,r,_,i+1,a),m=o["**"])if(i<a)for(m._listeners&&searchListenerTree(t,r,m,a,a),l=(S=v(m)).length;l-- >0;)"_listeners"!==(g=S[l])&&(g===E?searchListenerTree(t,r,m[g],i+2,a):g===T?searchListenerTree(t,r,m[g],i+1,a):((b={})[g]=m[g],searchListenerTree(t,r,{"**":b},i+1,a)));else m._listeners?searchListenerTree(t,r,m,a,a):m["*"]&&m["*"]._listeners&&searchListenerTree(t,r,m["*"],a,a);return O}function growListenerTree(t,r,o){var i,a,c=0,u=0,l=this.delimiter,p=l.length;if("string"==typeof t)if(-1!==(i=t.indexOf(l))){a=new Array(5);do{a[c++]=t.slice(u,i),u=i+p}while(-1!==(i=t.indexOf(l,u)));a[c++]=t.slice(u)}else a=[t],c=1;else a=t,c=t.length;if(c>1)for(i=0;i+1<c;i++)if("**"===a[i]&&"**"===a[i+1])return;var d,h=this.listenerTree;for(i=0;i<c;i++)if(h=h[d=a[i]]||(h[d]={}),i===c-1)return h._listeners?("function"==typeof h._listeners&&(h._listeners=[h._listeners]),o?h._listeners.unshift(r):h._listeners.push(r),!h._listeners.warned&&this._maxListeners>0&&h._listeners.length>this._maxListeners&&(h._listeners.warned=!0,logPossibleMemoryLeak.call(this,h._listeners.length,d))):h._listeners=r,!0;return!0}function collectTreeEvents(t,r,o,i){for(var a,c,u,l,p=v(t),d=p.length,h=t._listeners;d-- >0;)a=t[c=p[d]],u="_listeners"===c?o:o?o.concat(c):[c],l=i||"symbol"==typeof c,h&&r.push(l?u:u.join(this.delimiter)),"object"==typeof a&&collectTreeEvents.call(this,a,r,u,l);return r}function recursivelyGarbageCollect(t){for(var r,o,i,a=v(t),c=a.length;c-- >0;)(r=t[o=a[c]])&&(i=!0,"_listeners"===o||recursivelyGarbageCollect(r)||delete t[o]);return i}function Listener(t,r,o){this.emitter=t,this.event=r,this.listener=o}function setupListener(t,r,o){if(!0===o)u=!0;else if(!1===o)i=!0;else{if(!o||"object"!=typeof o)throw TypeError("options should be an object or true");var i=o.async,u=o.promisify,l=o.nextTick,d=o.objectify}if(i||l||u){var h=r,v=r._origin||r;if(l&&!p)throw Error("process.nextTick is not supported");u===c&&(u="AsyncFunction"===r.constructor.name),r=function(){var t=arguments,r=this,o=this.event;return u?l?Promise.resolve():new Promise((function(t){y(t)})).then((function(){return r.event=o,h.apply(r,t)})):(l?a.nextTick:y)((function(){r.event=o,h.apply(r,t)}))},r._async=!0,r._origin=v}return[r,d?new Listener(this,t,r):this]}function EventEmitter(t){this._events={},this._newListener=!1,this._removeListener=!1,this.verboseMemoryLeak=!1,configure.call(this,t)}Listener.prototype.off=function(){return this.emitter.off(this.event,this.listener),this},EventEmitter.EventEmitter2=EventEmitter,EventEmitter.prototype.listenTo=function(t,r,o){if("object"!=typeof t)throw TypeError("target musts be an object");var i=this;function listen(r){if("object"!=typeof r)throw TypeError("events must be an object");var a,c=o.reducers,u=findTargetIndex.call(i,t);a=-1===u?new TargetObserver(i,t,o):i._observers[u];for(var l,p=v(r),d=p.length,h="function"==typeof c,y=0;y<d;y++)l=p[y],a.subscribe(l,r[l]||l,h?c:c&&c[l])}return o=resolveOptions(o,{on:c,off:c,reducers:c},{on:g,off:g,reducers:_}),l(r)?listen(toObject(r)):listen("string"==typeof r?toObject(r.split(/\s+/)):r),this},EventEmitter.prototype.stopListeningTo=function(t,r){var o=this._observers;if(!o)return!1;var i,a=o.length,c=!1;if(t&&"object"!=typeof t)throw TypeError("target should be an object");for(;a-- >0;)i=o[a],t&&i._target!==t||(i.unsubscribe(r),c=!0);return c},EventEmitter.prototype.delimiter=".",EventEmitter.prototype.setMaxListeners=function(t){t!==c&&(this._maxListeners=t,this._conf||(this._conf={}),this._conf.maxListeners=t)},EventEmitter.prototype.getMaxListeners=function(){return this._maxListeners},EventEmitter.prototype.event="",EventEmitter.prototype.once=function(t,r,o){return this._once(t,r,!1,o)},EventEmitter.prototype.prependOnceListener=function(t,r,o){return this._once(t,r,!0,o)},EventEmitter.prototype._once=function(t,r,o,i){return this._many(t,1,r,o,i)},EventEmitter.prototype.many=function(t,r,o,i){return this._many(t,r,o,!1,i)},EventEmitter.prototype.prependMany=function(t,r,o,i){return this._many(t,r,o,!0,i)},EventEmitter.prototype._many=function(t,r,o,i,a){var c=this;if("function"!=typeof o)throw new Error("many only accepts instances of Function");function listener(){return 0==--r&&c.off(t,listener),o.apply(this,arguments)}return listener._origin=o,this._on(t,listener,i,a)},EventEmitter.prototype.emit=function(){if(!this._events&&!this._all)return!1;this._events||init.call(this);var t,r,o,i,a,c,u=arguments[0],l=this.wildcard;if("newListener"===u&&!this._newListener&&!this._events.newListener)return!1;if(l&&(t=u,"newListener"!==u&&"removeListener"!==u&&"object"==typeof u)){if(o=u.length,d)for(i=0;i<o;i++)if("symbol"==typeof u[i]){c=!0;break}c||(u=u.join(this.delimiter))}var p,h=arguments.length;if(this._all&&this._all.length)for(i=0,o=(p=this._all.slice()).length;i<o;i++)switch(this.event=u,h){case 1:p[i].call(this,u);break;case 2:p[i].call(this,u,arguments[1]);break;case 3:p[i].call(this,u,arguments[1],arguments[2]);break;default:p[i].apply(this,arguments)}if(l)p=[],searchListenerTree.call(this,p,t,this.listenerTree,0,o);else{if("function"==typeof(p=this._events[u])){switch(this.event=u,h){case 1:p.call(this);break;case 2:p.call(this,arguments[1]);break;case 3:p.call(this,arguments[1],arguments[2]);break;default:for(r=new Array(h-1),a=1;a<h;a++)r[a-1]=arguments[a];p.apply(this,r)}return!0}p&&(p=p.slice())}if(p&&p.length){if(h>3)for(r=new Array(h-1),a=1;a<h;a++)r[a-1]=arguments[a];for(i=0,o=p.length;i<o;i++)switch(this.event=u,h){case 1:p[i].call(this);break;case 2:p[i].call(this,arguments[1]);break;case 3:p[i].call(this,arguments[1],arguments[2]);break;default:p[i].apply(this,r)}return!0}if(!this.ignoreErrors&&!this._all&&"error"===u)throw arguments[1]instanceof Error?arguments[1]:new Error("Uncaught, unspecified 'error' event.");return!!this._all},EventEmitter.prototype.emitAsync=function(){if(!this._events&&!this._all)return!1;this._events||init.call(this);var t,r,o,i,a,c,u=arguments[0],l=this.wildcard;if("newListener"===u&&!this._newListener&&!this._events.newListener)return Promise.resolve([!1]);if(l&&(t=u,"newListener"!==u&&"removeListener"!==u&&"object"==typeof u)){if(i=u.length,d)for(a=0;a<i;a++)if("symbol"==typeof u[a]){r=!0;break}r||(u=u.join(this.delimiter))}var p,h=[],y=arguments.length;if(this._all)for(a=0,i=this._all.length;a<i;a++)switch(this.event=u,y){case 1:h.push(this._all[a].call(this,u));break;case 2:h.push(this._all[a].call(this,u,arguments[1]));break;case 3:h.push(this._all[a].call(this,u,arguments[1],arguments[2]));break;default:h.push(this._all[a].apply(this,arguments))}if(l?(p=[],searchListenerTree.call(this,p,t,this.listenerTree,0)):p=this._events[u],"function"==typeof p)switch(this.event=u,y){case 1:h.push(p.call(this));break;case 2:h.push(p.call(this,arguments[1]));break;case 3:h.push(p.call(this,arguments[1],arguments[2]));break;default:for(o=new Array(y-1),c=1;c<y;c++)o[c-1]=arguments[c];h.push(p.apply(this,o))}else if(p&&p.length){if(p=p.slice(),y>3)for(o=new Array(y-1),c=1;c<y;c++)o[c-1]=arguments[c];for(a=0,i=p.length;a<i;a++)switch(this.event=u,y){case 1:h.push(p[a].call(this));break;case 2:h.push(p[a].call(this,arguments[1]));break;case 3:h.push(p[a].call(this,arguments[1],arguments[2]));break;default:h.push(p[a].apply(this,o))}}else if(!this.ignoreErrors&&!this._all&&"error"===u)return arguments[1]instanceof Error?Promise.reject(arguments[1]):Promise.reject("Uncaught, unspecified 'error' event.");return Promise.all(h)},EventEmitter.prototype.on=function(t,r,o){return this._on(t,r,!1,o)},EventEmitter.prototype.prependListener=function(t,r,o){return this._on(t,r,!0,o)},EventEmitter.prototype.onAny=function(t){return this._onAny(t,!1)},EventEmitter.prototype.prependAny=function(t){return this._onAny(t,!0)},EventEmitter.prototype.addListener=EventEmitter.prototype.on,EventEmitter.prototype._onAny=function(t,r){if("function"!=typeof t)throw new Error("onAny only accepts instances of Function");return this._all||(this._all=[]),r?this._all.unshift(t):this._all.push(t),this},EventEmitter.prototype._on=function(t,r,o,i){if("function"==typeof t)return this._onAny(t,r),this;if("function"!=typeof r)throw new Error("on only accepts instances of Function");this._events||init.call(this);var a,u=this;return i!==c&&(r=(a=setupListener.call(this,t,r,i))[0],u=a[1]),this._newListener&&this.emit("newListener",t,r),this.wildcard?(growListenerTree.call(this,t,r,o),u):(this._events[t]?("function"==typeof this._events[t]&&(this._events[t]=[this._events[t]]),o?this._events[t].unshift(r):this._events[t].push(r),!this._events[t].warned&&this._maxListeners>0&&this._events[t].length>this._maxListeners&&(this._events[t].warned=!0,logPossibleMemoryLeak.call(this,this._events[t].length,t))):this._events[t]=r,u)},EventEmitter.prototype.off=function(t,r){if("function"!=typeof r)throw new Error("removeListener only takes instances of Function");var o,i=[];if(this.wildcard){var a="string"==typeof t?t.split(this.delimiter):t.slice();if(!(i=searchListenerTree.call(this,null,a,this.listenerTree,0)))return this}else{if(!this._events[t])return this;o=this._events[t],i.push({_listeners:o})}for(var c=0;c<i.length;c++){var u=i[c];if(o=u._listeners,l(o)){for(var p=-1,d=0,h=o.length;d<h;d++)if(o[d]===r||o[d].listener&&o[d].listener===r||o[d]._origin&&o[d]._origin===r){p=d;break}if(p<0)continue;return this.wildcard?u._listeners.splice(p,1):this._events[t].splice(p,1),0===o.length&&(this.wildcard?delete u._listeners:delete this._events[t]),this._removeListener&&this.emit("removeListener",t,r),this}(o===r||o.listener&&o.listener===r||o._origin&&o._origin===r)&&(this.wildcard?delete u._listeners:delete this._events[t],this._removeListener&&this.emit("removeListener",t,r))}return this.listenerTree&&recursivelyGarbageCollect(this.listenerTree),this},EventEmitter.prototype.offAny=function(t){var r,o=0,i=0;if(t&&this._all&&this._all.length>0){for(o=0,i=(r=this._all).length;o<i;o++)if(t===r[o])return r.splice(o,1),this._removeListener&&this.emit("removeListenerAny",t),this}else{if(r=this._all,this._removeListener)for(o=0,i=r.length;o<i;o++)this.emit("removeListenerAny",r[o]);this._all=[]}return this},EventEmitter.prototype.removeListener=EventEmitter.prototype.off,EventEmitter.prototype.removeAllListeners=function(t){if(t===c)return!this._events||init.call(this),this;if(this.wildcard){var r,o=searchListenerTree.call(this,null,t,this.listenerTree,0);if(!o)return this;for(r=0;r<o.length;r++)o[r]._listeners=null;this.listenerTree&&recursivelyGarbageCollect(this.listenerTree)}else this._events&&(this._events[t]=null);return this},EventEmitter.prototype.listeners=function(t){var r,o,i,a,u,l=this._events;if(t===c){if(this.wildcard)throw Error("event name required for wildcard emitter");if(!l)return[];for(a=(r=v(l)).length,i=[];a-- >0;)"function"==typeof(o=l[r[a]])?i.push(o):i.push.apply(i,o);return i}if(this.wildcard){if(!(u=this.listenerTree))return[];var p=[],d="string"==typeof t?t.split(this.delimiter):t.slice();return searchListenerTree.call(this,p,d,u,0),p}return l&&(o=l[t])?"function"==typeof o?[o]:o:[]},EventEmitter.prototype.eventNames=function(t){var r=this._events;return this.wildcard?collectTreeEvents.call(this,this.listenerTree,[],null,t):r?v(r):[]},EventEmitter.prototype.listenerCount=function(t){return this.listeners(t).length},EventEmitter.prototype.hasListeners=function(t){if(this.wildcard){var r=[],o="string"==typeof t?t.split(this.delimiter):t.slice();return searchListenerTree.call(this,r,o,this.listenerTree,0),r.length>0}var i=this._events,a=this._all;return!!(a&&a.length||i&&(t===c?v(i).length:i[t]))},EventEmitter.prototype.listenersAny=function(){return this._all?this._all:[]},EventEmitter.prototype.waitFor=function(t,r){var o=this,i=typeof r;return"number"===i?r={timeout:r}:"function"===i&&(r={filter:r}),makeCancelablePromise((r=resolveOptions(r,{timeout:0,filter:c,handleError:!1,Promise,overload:!1},{filter:g,Promise:constructorReducer})).Promise,(function(i,a,c){function listener(){var c=r.filter;if(!c||c.apply(o,arguments))if(o.off(t,listener),r.handleError){var u=arguments[0];u?a(u):i(toArray.apply(null,arguments).slice(1))}else i(toArray.apply(null,arguments))}c((function(){o.off(t,listener)})),o._on(t,listener,!1)}),{timeout:r.timeout,overload:r.overload})};var m=EventEmitter.prototype;Object.defineProperties(EventEmitter,{defaultMaxListeners:{get:function(){return m._maxListeners},set:function(t){if("number"!=typeof t||t<0||Number.isNaN(t))throw TypeError("n must be a non-negative number");m._maxListeners=t},enumerable:!0},once:{value:function once(t,r,o){return makeCancelablePromise((o=resolveOptions(o,{Promise,timeout:0,overload:!1},{Promise:constructorReducer})).Promise,(function(o,i,a){var c;if("function"==typeof t.addEventListener)return c=function(){o(toArray.apply(null,arguments))},a((function(){t.removeEventListener(r,c)})),void t.addEventListener(r,c,{once:!0});var u,eventListener=function(){u&&t.removeListener("error",u),o(toArray.apply(null,arguments))};"error"!==r&&(u=function(o){t.removeListener(r,eventListener),i(o)},t.once("error",u)),a((function(){u&&t.removeListener("error",u),t.removeListener(r,eventListener)})),t.once(r,eventListener)}),{timeout:o.timeout,overload:o.overload})},writable:!0,configurable:!0}}),Object.defineProperties(m,{_maxListeners:{value:10,writable:!0,configurable:!0},_observers:{value:null,writable:!0,configurable:!0}}),(i=function(){return EventEmitter}.call(r,o,r,t))===c||(t.exports=i)}()},7375:(t,r)=>{Object.defineProperty(r,"__esModule",{value:!0});var o=Symbol.for("INJECTION");function _proxyGetter(t,r,i,a){Object.defineProperty(t,r,{configurable:!0,enumerable:!0,get:function getter(){return a&&!Reflect.hasMetadata(o,this,r)&&Reflect.defineMetadata(o,i(),this,r),Reflect.hasMetadata(o,this,r)?Reflect.getMetadata(o,this,r):i()},set:function setter(t){Reflect.defineMetadata(o,t,this,r)}})}r.makePropertyInjectDecorator=function makePropertyInjectDecorator(t,r){return function(o){return function(i,a){_proxyGetter(i,a,(function(){return t.get(o)}),r)}}},r.makePropertyInjectNamedDecorator=function makePropertyInjectNamedDecorator(t,r){return function(o,i){return function(a,c){_proxyGetter(a,c,(function(){return t.getNamed(o,i)}),r)}}},r.makePropertyInjectTaggedDecorator=function makePropertyInjectTaggedDecorator(t,r){return function(o,i,a){return function(c,u){_proxyGetter(c,u,(function(){return t.getTagged(o,i,a)}),r)}}},r.makePropertyMultiInjectDecorator=function makePropertyMultiInjectDecorator(t,r){return function(o){return function(i,a){_proxyGetter(i,a,(function(){return t.getAll(o)}),r)}}}},4879:(t,r,o)=>{var i=o(7375);r.Z=function getDecorators(t,r){return void 0===r&&(r=!0),{lazyInject:i.makePropertyInjectDecorator(t,r),lazyInjectNamed:i.makePropertyInjectNamedDecorator(t,r),lazyInjectTagged:i.makePropertyInjectTaggedDecorator(t,r),lazyMultiInject:i.makePropertyMultiInjectDecorator(t,r)}}},9934:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.tagProperty=r.tagParameter=r.decorate=void 0;var i=o(6674),a=o(6867);function _tagParameterOrProperty(t,r,o,a,c){var u={},l="number"==typeof c,p=void 0!==c&&l?c.toString():o;if(l&&void 0!==o)throw new Error(i.INVALID_DECORATOR_OPERATION);Reflect.hasOwnMetadata(t,r)&&(u=Reflect.getMetadata(t,r));var d=u[p];if(Array.isArray(d))for(var h=0,y=d;h<y.length;h++){var v=y[h];if(v.key===a.key)throw new Error(i.DUPLICATED_METADATA+" "+v.key.toString())}else d=[];d.push(a),u[p]=d,Reflect.defineMetadata(t,u,r)}function _decorate(t,r){Reflect.decorate(t,r)}function _param(t,r){return function(o,i){r(o,i,t)}}r.tagParameter=function tagParameter(t,r,o,i){_tagParameterOrProperty(a.TAGGED,t,r,i,o)},r.tagProperty=function tagProperty(t,r,o){_tagParameterOrProperty(a.TAGGED_PROP,t.constructor,r,o)},r.decorate=function decorate(t,r,o){"number"==typeof o?_decorate([_param(o,t)],r):"string"==typeof o?Reflect.decorate([t],r,o):_decorate([t],r)}},5744:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.inject=r.LazyServiceIdentifer=void 0;var i=o(6674),a=o(6867),c=o(7738),u=o(9934),l=function(){function LazyServiceIdentifer(t){this._cb=t}return LazyServiceIdentifer.prototype.unwrap=function(){return this._cb()},LazyServiceIdentifer}();r.LazyServiceIdentifer=l,r.inject=function inject(t){return function(r,o,l){if(void 0===t)throw new Error(i.UNDEFINED_INJECT_ANNOTATION(r.name));var p=new c.Metadata(a.INJECT_TAG,t);"number"==typeof l?u.tagParameter(r,o,l,p):u.tagProperty(r,o,p)}}},4315:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.injectable=void 0;var i=o(6674),a=o(6867);r.injectable=function injectable(){return function(t){if(Reflect.hasOwnMetadata(a.PARAM_TYPES,t))throw new Error(i.DUPLICATED_INJECTABLE_DECORATOR);var r=Reflect.getMetadata(a.DESIGN_PARAM_TYPES,t)||[];return Reflect.defineMetadata(a.PARAM_TYPES,r,t),t}}},1693:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.multiInject=void 0;var i=o(6867),a=o(7738),c=o(9934);r.multiInject=function multiInject(t){return function(r,o,u){var l=new a.Metadata(i.MULTI_INJECT_TAG,t);"number"==typeof u?c.tagParameter(r,o,u,l):c.tagProperty(r,o,l)}}},8085:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.named=void 0;var i=o(6867),a=o(7738),c=o(9934);r.named=function named(t){return function(r,o,u){var l=new a.Metadata(i.NAMED_TAG,t);"number"==typeof u?c.tagParameter(r,o,u,l):c.tagProperty(r,o,l)}}},6515:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.optional=void 0;var i=o(6867),a=o(7738),c=o(9934);r.optional=function optional(){return function(t,r,o){var u=new a.Metadata(i.OPTIONAL_TAG,!0);"number"==typeof o?c.tagParameter(t,r,o,u):c.tagProperty(t,r,u)}}},7014:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.postConstruct=void 0;var i=o(6674),a=o(6867),c=o(7738);r.postConstruct=function postConstruct(){return function(t,r,o){var u=new c.Metadata(a.POST_CONSTRUCT,r);if(Reflect.hasOwnMetadata(a.POST_CONSTRUCT,t.constructor))throw new Error(i.MULTIPLE_POST_CONSTRUCT_METHODS);Reflect.defineMetadata(a.POST_CONSTRUCT,u,t.constructor)}}},2052:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.tagged=void 0;var i=o(7738),a=o(9934);r.tagged=function tagged(t,r){return function(o,c,u){var l=new i.Metadata(t,r);"number"==typeof u?a.tagParameter(o,c,u,l):a.tagProperty(o,c,l)}}},5638:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.targetName=void 0;var i=o(6867),a=o(7738),c=o(9934);r.targetName=function targetName(t){return function(r,o,u){var l=new a.Metadata(i.NAME_TAG,t);c.tagParameter(r,o,u,l)}}},6757:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.unmanaged=void 0;var i=o(6867),a=o(7738),c=o(9934);r.unmanaged=function unmanaged(){return function(t,r,o){var u=new a.Metadata(i.UNMANAGED_TAG,!0);c.tagParameter(t,r,o,u)}}},4290:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Binding=void 0;var i=o(8421),a=o(7791),c=function(){function Binding(t,r){this.id=a.id(),this.activated=!1,this.serviceIdentifier=t,this.scope=r,this.type=i.BindingTypeEnum.Invalid,this.constraint=function(t){return!0},this.implementationType=null,this.cache=null,this.factory=null,this.provider=null,this.onActivation=null,this.dynamicValue=null}return Binding.prototype.clone=function(){var t=new Binding(this.serviceIdentifier,this.scope);return t.activated=t.scope===i.BindingScopeEnum.Singleton&&this.activated,t.implementationType=this.implementationType,t.dynamicValue=this.dynamicValue,t.scope=this.scope,t.type=this.type,t.factory=this.factory,t.provider=this.provider,t.constraint=this.constraint,t.onActivation=this.onActivation,t.cache=this.cache,t},Binding}();r.Binding=c},3184:(t,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.BindingCount=void 0;r.BindingCount={MultipleBindingsAvailable:2,NoBindingsAvailable:0,OnlyOneBindingAvailable:1}},6674:(t,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.STACK_OVERFLOW=r.CIRCULAR_DEPENDENCY_IN_FACTORY=r.POST_CONSTRUCT_ERROR=r.MULTIPLE_POST_CONSTRUCT_METHODS=r.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK=r.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE=r.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE=r.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT=r.ARGUMENTS_LENGTH_MISMATCH=r.INVALID_DECORATOR_OPERATION=r.INVALID_TO_SELF_VALUE=r.INVALID_FUNCTION_BINDING=r.INVALID_MIDDLEWARE_RETURN=r.NO_MORE_SNAPSHOTS_AVAILABLE=r.INVALID_BINDING_TYPE=r.NOT_IMPLEMENTED=r.CIRCULAR_DEPENDENCY=r.UNDEFINED_INJECT_ANNOTATION=r.MISSING_INJECT_ANNOTATION=r.MISSING_INJECTABLE_ANNOTATION=r.NOT_REGISTERED=r.CANNOT_UNBIND=r.AMBIGUOUS_MATCH=r.KEY_NOT_FOUND=r.NULL_ARGUMENT=r.DUPLICATED_METADATA=r.DUPLICATED_INJECTABLE_DECORATOR=void 0,r.DUPLICATED_INJECTABLE_DECORATOR="Cannot apply @injectable decorator multiple times.",r.DUPLICATED_METADATA="Metadata key was used more than once in a parameter:",r.NULL_ARGUMENT="NULL argument",r.KEY_NOT_FOUND="Key Not Found",r.AMBIGUOUS_MATCH="Ambiguous match found for serviceIdentifier:",r.CANNOT_UNBIND="Could not unbind serviceIdentifier:",r.NOT_REGISTERED="No matching bindings found for serviceIdentifier:",r.MISSING_INJECTABLE_ANNOTATION="Missing required @injectable annotation in:",r.MISSING_INJECT_ANNOTATION="Missing required @inject or @multiInject annotation in:";r.UNDEFINED_INJECT_ANNOTATION=function(t){return"@inject called with undefined this could mean that the class "+t+" has a circular dependency problem. You can use a LazyServiceIdentifer to  overcome this limitation."},r.CIRCULAR_DEPENDENCY="Circular dependency found:",r.NOT_IMPLEMENTED="Sorry, this feature is not fully implemented yet.",r.INVALID_BINDING_TYPE="Invalid binding type:",r.NO_MORE_SNAPSHOTS_AVAILABLE="No snapshot available to restore.",r.INVALID_MIDDLEWARE_RETURN="Invalid return type in middleware. Middleware must return!",r.INVALID_FUNCTION_BINDING="Value provided to function binding must be a function!",r.INVALID_TO_SELF_VALUE="The toSelf function can only be applied when a constructor is used as service identifier",r.INVALID_DECORATOR_OPERATION="The @inject @multiInject @tagged and @named decorators must be applied to the parameters of a class constructor or a class property.";r.ARGUMENTS_LENGTH_MISMATCH=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return"The number of constructor arguments in the derived class "+t[0]+" must be >= than the number of constructor arguments of its base class."},r.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT="Invalid Container constructor argument. Container options must be an object.",r.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE="Invalid Container option. Default scope must be a string ('singleton' or 'transient').",r.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE="Invalid Container option. Auto bind injectable must be a boolean",r.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK="Invalid Container option. Skip base check must be a boolean",r.MULTIPLE_POST_CONSTRUCT_METHODS="Cannot apply @postConstruct decorator multiple times in the same class";r.POST_CONSTRUCT_ERROR=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return"@postConstruct error in class "+t[0]+": "+t[1]};r.CIRCULAR_DEPENDENCY_IN_FACTORY=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return"It looks like there is a circular dependency in one of the '"+t[0]+"' bindings. Please investigate bindings withservice identifier '"+t[1]+"'."},r.STACK_OVERFLOW="Maximum call stack size exceeded"},8421:(t,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.TargetTypeEnum=r.BindingTypeEnum=r.BindingScopeEnum=void 0;r.BindingScopeEnum={Request:"Request",Singleton:"Singleton",Transient:"Transient"};r.BindingTypeEnum={ConstantValue:"ConstantValue",Constructor:"Constructor",DynamicValue:"DynamicValue",Factory:"Factory",Function:"Function",Instance:"Instance",Invalid:"Invalid",Provider:"Provider"};r.TargetTypeEnum={ClassProperty:"ClassProperty",ConstructorArgument:"ConstructorArgument",Variable:"Variable"}},6867:(t,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.NON_CUSTOM_TAG_KEYS=r.POST_CONSTRUCT=r.DESIGN_PARAM_TYPES=r.PARAM_TYPES=r.TAGGED_PROP=r.TAGGED=r.MULTI_INJECT_TAG=r.INJECT_TAG=r.OPTIONAL_TAG=r.UNMANAGED_TAG=r.NAME_TAG=r.NAMED_TAG=void 0,r.NAMED_TAG="named",r.NAME_TAG="name",r.UNMANAGED_TAG="unmanaged",r.OPTIONAL_TAG="optional",r.INJECT_TAG="inject",r.MULTI_INJECT_TAG="multi_inject",r.TAGGED="inversify:tagged",r.TAGGED_PROP="inversify:tagged_props",r.PARAM_TYPES="inversify:paramtypes",r.DESIGN_PARAM_TYPES="design:paramtypes",r.POST_CONSTRUCT="post_construct",r.NON_CUSTOM_TAG_KEYS=function getNonCustomTagKeys(){return[r.INJECT_TAG,r.MULTI_INJECT_TAG,r.NAME_TAG,r.UNMANAGED_TAG,r.NAMED_TAG,r.OPTIONAL_TAG]}()},1389:function(t,r,o){var i=this&&this.__awaiter||function(t,r,o,i){return new(o||(o=Promise))((function(a,c){function fulfilled(t){try{step(i.next(t))}catch(t){c(t)}}function rejected(t){try{step(i.throw(t))}catch(t){c(t)}}function step(t){t.done?a(t.value):function adopt(t){return t instanceof o?t:new o((function(r){r(t)}))}(t.value).then(fulfilled,rejected)}step((i=i.apply(t,r||[])).next())}))},a=this&&this.__generator||function(t,r){var o,i,a,c,u={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return c={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(c[Symbol.iterator]=function(){return this}),c;function verb(c){return function(l){return function step(c){if(o)throw new TypeError("Generator is already executing.");for(;u;)try{if(o=1,i&&(a=2&c[0]?i.return:c[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,c[1])).done)return a;switch(i=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,i=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!(a=u.trys,(a=a.length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){u.label=c[1];break}if(6===c[0]&&u.label<a[1]){u.label=a[1],a=c;break}if(a&&u.label<a[2]){u.label=a[2],u.ops.push(c);break}a[2]&&u.ops.pop(),u.trys.pop();continue}c=r.call(t,u)}catch(t){c=[6,t],i=0}finally{o=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,l])}}},c=this&&this.__spreadArray||function(t,r){for(var o=0,i=r.length,a=t.length;o<i;o++,a++)t[a]=r[o];return t};Object.defineProperty(r,"__esModule",{value:!0}),r.Container=void 0;var u=o(4290),l=o(6674),p=o(8421),d=o(6867),h=o(1377),y=o(6311),v=o(1927),g=o(1860),_=o(7791),m=o(5800),b=o(5700),w=o(175),S=function(){function Container(t){this._appliedMiddleware=[];var r=t||{};if("object"!=typeof r)throw new Error(""+l.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);if(void 0===r.defaultScope)r.defaultScope=p.BindingScopeEnum.Transient;else if(r.defaultScope!==p.BindingScopeEnum.Singleton&&r.defaultScope!==p.BindingScopeEnum.Transient&&r.defaultScope!==p.BindingScopeEnum.Request)throw new Error(""+l.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);if(void 0===r.autoBindInjectable)r.autoBindInjectable=!1;else if("boolean"!=typeof r.autoBindInjectable)throw new Error(""+l.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE);if(void 0===r.skipBaseClassChecks)r.skipBaseClassChecks=!1;else if("boolean"!=typeof r.skipBaseClassChecks)throw new Error(""+l.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK);this.options={autoBindInjectable:r.autoBindInjectable,defaultScope:r.defaultScope,skipBaseClassChecks:r.skipBaseClassChecks},this.id=_.id(),this._bindingDictionary=new w.Lookup,this._snapshots=[],this._middleware=null,this.parent=null,this._metadataReader=new h.MetadataReader}return Container.merge=function(t,r){for(var o=[],i=2;i<arguments.length;i++)o[i-2]=arguments[i];var a=new Container,u=c([t,r],o).map((function(t){return y.getBindingDictionary(t)})),l=y.getBindingDictionary(a);function copyDictionary(t,r){t.traverse((function(t,o){o.forEach((function(t){r.add(t.serviceIdentifier,t.clone())}))}))}return u.forEach((function(t){copyDictionary(t,l)})),a},Container.prototype.load=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var o=this._getContainerModuleHelpersFactory(),i=0,a=t;i<a.length;i++){var c=a[i],u=o(c.id);c.registry(u.bindFunction,u.unbindFunction,u.isboundFunction,u.rebindFunction)}},Container.prototype.loadAsync=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return i(this,void 0,void 0,(function(){var r,o,i,c,u;return a(this,(function(a){switch(a.label){case 0:r=this._getContainerModuleHelpersFactory(),o=0,i=t,a.label=1;case 1:return o<i.length?(c=i[o],u=r(c.id),[4,c.registry(u.bindFunction,u.unbindFunction,u.isboundFunction,u.rebindFunction)]):[3,4];case 2:a.sent(),a.label=3;case 3:return o++,[3,1];case 4:return[2]}}))}))},Container.prototype.unload=function(){for(var t=this,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];var conditionFactory=function(t){return function(r){return r.moduleId===t}};r.forEach((function(r){var o=conditionFactory(r.id);t._bindingDictionary.removeByCondition(o)}))},Container.prototype.bind=function(t){var r=this.options.defaultScope||p.BindingScopeEnum.Transient,o=new u.Binding(t,r);return this._bindingDictionary.add(t,o),new g.BindingToSyntax(o)},Container.prototype.rebind=function(t){return this.unbind(t),this.bind(t)},Container.prototype.unbind=function(t){try{this._bindingDictionary.remove(t)}catch(r){throw new Error(l.CANNOT_UNBIND+" "+m.getServiceIdentifierAsString(t))}},Container.prototype.unbindAll=function(){this._bindingDictionary=new w.Lookup},Container.prototype.isBound=function(t){var r=this._bindingDictionary.hasKey(t);return!r&&this.parent&&(r=this.parent.isBound(t)),r},Container.prototype.isBoundNamed=function(t,r){return this.isBoundTagged(t,d.NAMED_TAG,r)},Container.prototype.isBoundTagged=function(t,r,o){var i=!1;if(this._bindingDictionary.hasKey(t)){var a=this._bindingDictionary.get(t),c=y.createMockRequest(this,t,r,o);i=a.some((function(t){return t.constraint(c)}))}return!i&&this.parent&&(i=this.parent.isBoundTagged(t,r,o)),i},Container.prototype.snapshot=function(){this._snapshots.push(b.ContainerSnapshot.of(this._bindingDictionary.clone(),this._middleware))},Container.prototype.restore=function(){var t=this._snapshots.pop();if(void 0===t)throw new Error(l.NO_MORE_SNAPSHOTS_AVAILABLE);this._bindingDictionary=t.bindings,this._middleware=t.middleware},Container.prototype.createChild=function(t){var r=new Container(t||this.options);return r.parent=this,r},Container.prototype.applyMiddleware=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];this._appliedMiddleware=this._appliedMiddleware.concat(t);var o=this._middleware?this._middleware:this._planAndResolve();this._middleware=t.reduce((function(t,r){return r(t)}),o)},Container.prototype.applyCustomMetadataReader=function(t){this._metadataReader=t},Container.prototype.get=function(t){return this._get(!1,!1,p.TargetTypeEnum.Variable,t)},Container.prototype.getTagged=function(t,r,o){return this._get(!1,!1,p.TargetTypeEnum.Variable,t,r,o)},Container.prototype.getNamed=function(t,r){return this.getTagged(t,d.NAMED_TAG,r)},Container.prototype.getAll=function(t){return this._get(!0,!0,p.TargetTypeEnum.Variable,t)},Container.prototype.getAllTagged=function(t,r,o){return this._get(!1,!0,p.TargetTypeEnum.Variable,t,r,o)},Container.prototype.getAllNamed=function(t,r){return this.getAllTagged(t,d.NAMED_TAG,r)},Container.prototype.resolve=function(t){var r=this.createChild();return r.bind(t).toSelf(),this._appliedMiddleware.forEach((function(t){r.applyMiddleware(t)})),r.get(t)},Container.prototype._getContainerModuleHelpersFactory=function(){var t=this,setModuleId=function(t,r){t._binding.moduleId=r},getRebindFunction=function(r){return function(o){var i=t.rebind.bind(t)(o);return setModuleId(i,r),i}};return function(r){return{bindFunction:(o=r,function(r){var i=t.bind.bind(t)(r);return setModuleId(i,o),i}),isboundFunction:function(r){return t.isBound.bind(t)(r)},rebindFunction:getRebindFunction(r),unbindFunction:function(r){t.unbind.bind(t)(r)}};var o}},Container.prototype._get=function(t,r,o,i,a,c){var u=null,p={avoidConstraints:t,contextInterceptor:function(t){return t},isMultiInject:r,key:a,serviceIdentifier:i,targetType:o,value:c};if(this._middleware){if(null==(u=this._middleware(p)))throw new Error(l.INVALID_MIDDLEWARE_RETURN)}else u=this._planAndResolve()(p);return u},Container.prototype._planAndResolve=function(){var t=this;return function(r){var o=y.plan(t._metadataReader,t,r.isMultiInject,r.targetType,r.serviceIdentifier,r.key,r.value,r.avoidConstraints);return o=r.contextInterceptor(o),v.resolve(o)}},Container}();r.Container=S},3244:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.AsyncContainerModule=r.ContainerModule=void 0;var i=o(7791),a=function a(t){this.id=i.id(),this.registry=t};r.ContainerModule=a;var c=function c(t){this.id=i.id(),this.registry=t};r.AsyncContainerModule=c},5700:(t,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.ContainerSnapshot=void 0;var o=function(){function ContainerSnapshot(){}return ContainerSnapshot.of=function(t,r){var o=new ContainerSnapshot;return o.bindings=t,o.middleware=r,o},ContainerSnapshot}();r.ContainerSnapshot=o},175:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Lookup=void 0;var i=o(6674),a=function(){function Lookup(){this._map=new Map}return Lookup.prototype.getMap=function(){return this._map},Lookup.prototype.add=function(t,r){if(null==t)throw new Error(i.NULL_ARGUMENT);if(null==r)throw new Error(i.NULL_ARGUMENT);var o=this._map.get(t);void 0!==o?(o.push(r),this._map.set(t,o)):this._map.set(t,[r])},Lookup.prototype.get=function(t){if(null==t)throw new Error(i.NULL_ARGUMENT);var r=this._map.get(t);if(void 0!==r)return r;throw new Error(i.KEY_NOT_FOUND)},Lookup.prototype.remove=function(t){if(null==t)throw new Error(i.NULL_ARGUMENT);if(!this._map.delete(t))throw new Error(i.KEY_NOT_FOUND)},Lookup.prototype.removeByCondition=function(t){var r=this;this._map.forEach((function(o,i){var a=o.filter((function(r){return!t(r)}));a.length>0?r._map.set(i,a):r._map.delete(i)}))},Lookup.prototype.hasKey=function(t){if(null==t)throw new Error(i.NULL_ARGUMENT);return this._map.has(t)},Lookup.prototype.clone=function(){var t=new Lookup;return this._map.forEach((function(r,o){r.forEach((function(r){return t.add(o,r.clone())}))})),t},Lookup.prototype.traverse=function(t){this._map.forEach((function(r,o){t(o,r)}))},Lookup}();r.Lookup=a},6700:(t,r,o)=>{r.GW=r.zY=r.NT=r.b2=r.Ls=r.W2=void 0,o(6867);var i=o(1389);Object.defineProperty(r,"W2",{enumerable:!0,get:function(){return i.Container}});var a=o(8421);var c=o(3244);Object.defineProperty(r,"Ls",{enumerable:!0,get:function(){return c.AsyncContainerModule}});var u=o(4315);Object.defineProperty(r,"b2",{enumerable:!0,get:function(){return u.injectable}});var l=o(2052);var p=o(8085);var d=o(5744);var h=o(6515);var y=o(6757);Object.defineProperty(r,"NT",{enumerable:!0,get:function(){return y.unmanaged}});var v=o(1693);var g=o(5638);var _=o(7014);Object.defineProperty(r,"zY",{enumerable:!0,get:function(){return _.postConstruct}});var m=o(1377);var b=o(7791);var w=o(9934);Object.defineProperty(r,"GW",{enumerable:!0,get:function(){return w.decorate}});var S=o(758);var C=o(5800);var O=o(600)},5228:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Context=void 0;var i=o(7791),a=function(){function Context(t){this.id=i.id(),this.container=t}return Context.prototype.addPlan=function(t){this.plan=t},Context.prototype.setCurrentRequest=function(t){this.currentRequest=t},Context}();r.Context=a},7738:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Metadata=void 0;var i=o(6867),a=function(){function Metadata(t,r){this.key=t,this.value=r}return Metadata.prototype.toString=function(){return this.key===i.NAMED_TAG?"named: "+this.value.toString()+" ":"tagged: { key:"+this.key.toString()+", value: "+this.value+" }"},Metadata}();r.Metadata=a},1377:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.MetadataReader=void 0;var i=o(6867),a=function(){function MetadataReader(){}return MetadataReader.prototype.getConstructorMetadata=function(t){return{compilerGeneratedMetadata:Reflect.getMetadata(i.PARAM_TYPES,t),userGeneratedMetadata:Reflect.getMetadata(i.TAGGED,t)||{}}},MetadataReader.prototype.getPropertiesMetadata=function(t){return Reflect.getMetadata(i.TAGGED_PROP,t)||[]},MetadataReader}();r.MetadataReader=a},5314:(t,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Plan=void 0;var o=function o(t,r){this.parentContext=t,this.rootRequest=r};r.Plan=o},6311:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.getBindingDictionary=r.createMockRequest=r.plan=void 0;var i=o(3184),a=o(6674),c=o(8421),u=o(6867),l=o(5265),p=o(5800),d=o(5228),h=o(7738),y=o(5314),v=o(6e3),g=o(6748),_=o(8924);function getBindingDictionary(t){return t._bindingDictionary}function _getActiveBindings(t,r,o,c,u){var l=getBindings(o.container,u.serviceIdentifier),d=[];return l.length===i.BindingCount.NoBindingsAvailable&&o.container.options.autoBindInjectable&&"function"==typeof u.serviceIdentifier&&t.getConstructorMetadata(u.serviceIdentifier).compilerGeneratedMetadata&&(o.container.bind(u.serviceIdentifier).toSelf(),l=getBindings(o.container,u.serviceIdentifier)),d=r?l:l.filter((function(t){var r=new g.Request(t.serviceIdentifier,o,c,t,u);return t.constraint(r)})),function _validateActiveBindingCount(t,r,o,c){switch(r.length){case i.BindingCount.NoBindingsAvailable:if(o.isOptional())return r;var u=p.getServiceIdentifierAsString(t),l=a.NOT_REGISTERED;throw l+=p.listMetadataForTarget(u,o),l+=p.listRegisteredBindingsForServiceIdentifier(c,u,getBindings),new Error(l);case i.BindingCount.OnlyOneBindingAvailable:if(!o.isArray())return r;case i.BindingCount.MultipleBindingsAvailable:default:if(o.isArray())return r;u=p.getServiceIdentifierAsString(t),l=a.AMBIGUOUS_MATCH+" "+u;throw l+=p.listRegisteredBindingsForServiceIdentifier(c,u,getBindings),new Error(l)}}(u.serviceIdentifier,d,u,o.container),d}function _createSubRequests(t,r,o,i,u,l){var p,d;if(null===u){p=_getActiveBindings(t,r,i,null,l),d=new g.Request(o,i,null,p,l);var h=new y.Plan(i,d);i.addPlan(h)}else p=_getActiveBindings(t,r,i,u,l),d=u.addChildRequest(l.serviceIdentifier,p,l);p.forEach((function(r){var o=null;if(l.isArray())o=d.addChildRequest(r.serviceIdentifier,r,l);else{if(r.cache)return;o=d}if(r.type===c.BindingTypeEnum.Instance&&null!==r.implementationType){var u=v.getDependencies(t,r.implementationType);if(!i.container.options.skipBaseClassChecks){var p=v.getBaseClassDependencyCount(t,r.implementationType);if(u.length<p){var h=a.ARGUMENTS_LENGTH_MISMATCH(v.getFunctionName(r.implementationType));throw new Error(h)}}u.forEach((function(r){_createSubRequests(t,!1,r.serviceIdentifier,i,o,r)}))}}))}function getBindings(t,r){var o=[],i=getBindingDictionary(t);return i.hasKey(r)?o=i.get(r):null!==t.parent&&(o=getBindings(t.parent,r)),o}r.getBindingDictionary=getBindingDictionary,r.plan=function plan(t,r,o,i,a,c,y,v){void 0===v&&(v=!1);var g=new d.Context(r),m=function _createTarget(t,r,o,i,a,c){var l=t?u.MULTI_INJECT_TAG:u.INJECT_TAG,p=new h.Metadata(l,o),d=new _.Target(r,i,o,p);if(void 0!==a){var y=new h.Metadata(a,c);d.metadata.push(y)}return d}(o,i,a,"",c,y);try{return _createSubRequests(t,v,a,g,null,m),g}catch(t){throw l.isStackOverflowExeption(t)&&g.plan&&p.circularDependencyToException(g.plan.rootRequest),t}},r.createMockRequest=function createMockRequest(t,r,o,i){var a=new _.Target(c.TargetTypeEnum.Variable,"",r,new h.Metadata(o,i)),u=new d.Context(t);return new g.Request(r,u,null,[],a)}},8460:(t,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.QueryableString=void 0;var o=function(){function QueryableString(t){this.str=t}return QueryableString.prototype.startsWith=function(t){return 0===this.str.indexOf(t)},QueryableString.prototype.endsWith=function(t){var r,o=t.split("").reverse().join("");return r=this.str.split("").reverse().join(""),this.startsWith.call({str:r},o)},QueryableString.prototype.contains=function(t){return-1!==this.str.indexOf(t)},QueryableString.prototype.equals=function(t){return this.str===t},QueryableString.prototype.value=function(){return this.str},QueryableString}();r.QueryableString=o},6e3:function(t,r,o){var i=this&&this.__spreadArray||function(t,r){for(var o=0,i=r.length,a=t.length;o<i;o++,a++)t[a]=r[o];return t};Object.defineProperty(r,"__esModule",{value:!0}),r.getFunctionName=r.getBaseClassDependencyCount=r.getDependencies=void 0;var a=o(5744),c=o(6674),u=o(8421),l=o(6867),p=o(5800);Object.defineProperty(r,"getFunctionName",{enumerable:!0,get:function(){return p.getFunctionName}});var d=o(8924);function getTargets(t,r,o,a){var u=t.getConstructorMetadata(o),l=u.compilerGeneratedMetadata;if(void 0===l){var p=c.MISSING_INJECTABLE_ANNOTATION+" "+r+".";throw new Error(p)}var d=u.userGeneratedMetadata,h=Object.keys(d),y=0===o.length&&h.length>0,v=h.length>o.length,g=function getConstructorArgsAsTargets(t,r,o,i,a){for(var c=[],u=0;u<a;u++){var l=getConstructorArgsAsTarget(u,t,r,o,i);null!==l&&c.push(l)}return c}(a,r,l,d,y||v?h.length:o.length),_=getClassPropsAsTargets(t,o);return i(i([],g),_)}function getConstructorArgsAsTarget(t,r,o,i,l){var p=l[t.toString()]||[],h=formatTargetMetadata(p),y=!0!==h.unmanaged,v=i[t],g=h.inject||h.multiInject;if((v=g||v)instanceof a.LazyServiceIdentifer&&(v=v.unwrap()),y){if(!r&&(v===Object||v===Function||void 0===v)){var _=c.MISSING_INJECT_ANNOTATION+" argument "+t+" in class "+o+".";throw new Error(_)}var m=new d.Target(u.TargetTypeEnum.ConstructorArgument,h.targetName,v);return m.metadata=p,m}return null}function getClassPropsAsTargets(t,r){for(var o=t.getPropertiesMetadata(r),a=[],c=0,l=Object.keys(o);c<l.length;c++){var p=l[c],h=o[p],y=formatTargetMetadata(o[p]),v=y.targetName||p,g=y.inject||y.multiInject,_=new d.Target(u.TargetTypeEnum.ClassProperty,v,g);_.metadata=h,a.push(_)}var m=Object.getPrototypeOf(r.prototype).constructor;if(m!==Object){var b=getClassPropsAsTargets(t,m);a=i(i([],a),b)}return a}function formatTargetMetadata(t){var r={};return t.forEach((function(t){r[t.key.toString()]=t.value})),{inject:r[l.INJECT_TAG],multiInject:r[l.MULTI_INJECT_TAG],targetName:r[l.NAME_TAG],unmanaged:r[l.UNMANAGED_TAG]}}r.getDependencies=function getDependencies(t,r){return getTargets(t,p.getFunctionName(r),r,!1)},r.getBaseClassDependencyCount=function getBaseClassDependencyCount(t,r){var o=Object.getPrototypeOf(r.prototype).constructor;if(o!==Object){var i=getTargets(t,p.getFunctionName(o),o,!0),a=i.map((function(t){return t.metadata.filter((function(t){return t.key===l.UNMANAGED_TAG}))})),c=[].concat.apply([],a).length,u=i.length-c;return u>0?u:getBaseClassDependencyCount(t,o)}return 0}},6748:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Request=void 0;var i=o(7791),a=function(){function Request(t,r,o,a,c){this.id=i.id(),this.serviceIdentifier=t,this.parentContext=r,this.parentRequest=o,this.target=c,this.childRequests=[],this.bindings=Array.isArray(a)?a:[a],this.requestScope=null===o?new Map:null}return Request.prototype.addChildRequest=function(t,r,o){var i=new Request(t,this.parentContext,this,r,o);return this.childRequests.push(i),i},Request}();r.Request=a},8924:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Target=void 0;var i=o(6867),a=o(7791),c=o(7738),u=o(8460),l=function(){function Target(t,r,o,l){this.id=a.id(),this.type=t,this.serviceIdentifier=o,this.name=new u.QueryableString(r||""),this.metadata=new Array;var p=null;"string"==typeof l?p=new c.Metadata(i.NAMED_TAG,l):l instanceof c.Metadata&&(p=l),null!==p&&this.metadata.push(p)}return Target.prototype.hasTag=function(t){for(var r=0,o=this.metadata;r<o.length;r++){if(o[r].key===t)return!0}return!1},Target.prototype.isArray=function(){return this.hasTag(i.MULTI_INJECT_TAG)},Target.prototype.matchesArray=function(t){return this.matchesTag(i.MULTI_INJECT_TAG)(t)},Target.prototype.isNamed=function(){return this.hasTag(i.NAMED_TAG)},Target.prototype.isTagged=function(){return this.metadata.some((function(t){return i.NON_CUSTOM_TAG_KEYS.every((function(r){return t.key!==r}))}))},Target.prototype.isOptional=function(){return this.matchesTag(i.OPTIONAL_TAG)(!0)},Target.prototype.getNamedTag=function(){return this.isNamed()?this.metadata.filter((function(t){return t.key===i.NAMED_TAG}))[0]:null},Target.prototype.getCustomTags=function(){return this.isTagged()?this.metadata.filter((function(t){return i.NON_CUSTOM_TAG_KEYS.every((function(r){return t.key!==r}))})):null},Target.prototype.matchesNamedTag=function(t){return this.matchesTag(i.NAMED_TAG)(t)},Target.prototype.matchesTag=function(t){var r=this;return function(o){for(var i=0,a=r.metadata;i<a.length;i++){var c=a[i];if(c.key===t&&c.value===o)return!0}return!1}},Target}();r.Target=l},2279:function(t,r,o){var i=this&&this.__spreadArray||function(t,r){for(var o=0,i=r.length,a=t.length;o<i;o++,a++)t[a]=r[o];return t};Object.defineProperty(r,"__esModule",{value:!0}),r.resolveInstance=void 0;var a=o(6674),c=o(8421),u=o(6867);r.resolveInstance=function resolveInstance(t,r,o){var l=null;return l=r.length>0?function _injectProperties(t,r,o){var i=r.filter((function(t){return null!==t.target&&t.target.type===c.TargetTypeEnum.ClassProperty})),a=i.map(o);return i.forEach((function(r,o){var i;i=r.target.name.value();var c=a[o];t[i]=c})),t}(l=function _createInstance(t,r){return new(t.bind.apply(t,i([void 0],r)))}(t,r.filter((function(t){return null!==t.target&&t.target.type===c.TargetTypeEnum.ConstructorArgument})).map(o)),r,o):new t,function _postConstruct(t,r){if(Reflect.hasMetadata(u.POST_CONSTRUCT,t)){var o=Reflect.getMetadata(u.POST_CONSTRUCT,t);try{r[o.value]()}catch(r){throw new Error(a.POST_CONSTRUCT_ERROR(t.name,r.message))}}}(t,l),l}},1927:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.resolve=void 0;var i=o(6674),a=o(8421),c=o(5265),u=o(5800),l=o(2279),invokeFactory=function(t,r,o){try{return o()}catch(o){throw c.isStackOverflowExeption(o)?new Error(i.CIRCULAR_DEPENDENCY_IN_FACTORY(t,r.toString())):o}},_resolveRequest=function(t){return function(r){r.parentContext.setCurrentRequest(r);var o=r.bindings,c=r.childRequests,p=r.target&&r.target.isArray(),d=!(r.parentRequest&&r.parentRequest.target&&r.target&&r.parentRequest.target.matchesArray(r.target.serviceIdentifier));if(p&&d)return c.map((function(r){return _resolveRequest(t)(r)}));var h=null;if(!r.target.isOptional()||0!==o.length){var y=o[0],v=y.scope===a.BindingScopeEnum.Singleton,g=y.scope===a.BindingScopeEnum.Request;if(v&&y.activated)return y.cache;if(g&&null!==t&&t.has(y.id))return t.get(y.id);if(y.type===a.BindingTypeEnum.ConstantValue)h=y.cache,y.activated=!0;else if(y.type===a.BindingTypeEnum.Function)h=y.cache,y.activated=!0;else if(y.type===a.BindingTypeEnum.Constructor)h=y.implementationType;else if(y.type===a.BindingTypeEnum.DynamicValue&&null!==y.dynamicValue)h=invokeFactory("toDynamicValue",y.serviceIdentifier,(function(){return y.dynamicValue(r.parentContext)}));else if(y.type===a.BindingTypeEnum.Factory&&null!==y.factory)h=invokeFactory("toFactory",y.serviceIdentifier,(function(){return y.factory(r.parentContext)}));else if(y.type===a.BindingTypeEnum.Provider&&null!==y.provider)h=invokeFactory("toProvider",y.serviceIdentifier,(function(){return y.provider(r.parentContext)}));else{if(y.type!==a.BindingTypeEnum.Instance||null===y.implementationType){var _=u.getServiceIdentifierAsString(r.serviceIdentifier);throw new Error(i.INVALID_BINDING_TYPE+" "+_)}h=l.resolveInstance(y.implementationType,c,_resolveRequest(t))}return"function"==typeof y.onActivation&&(h=y.onActivation(r.parentContext,h)),v&&(y.cache=h,y.activated=!0),g&&null!==t&&!t.has(y.id)&&t.set(y.id,h),h}}};r.resolve=function resolve(t){return _resolveRequest(t.plan.rootRequest.requestScope)(t.plan.rootRequest)}},3366:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.BindingInSyntax=void 0;var i=o(8421),a=o(1325),c=function(){function BindingInSyntax(t){this._binding=t}return BindingInSyntax.prototype.inRequestScope=function(){return this._binding.scope=i.BindingScopeEnum.Request,new a.BindingWhenOnSyntax(this._binding)},BindingInSyntax.prototype.inSingletonScope=function(){return this._binding.scope=i.BindingScopeEnum.Singleton,new a.BindingWhenOnSyntax(this._binding)},BindingInSyntax.prototype.inTransientScope=function(){return this._binding.scope=i.BindingScopeEnum.Transient,new a.BindingWhenOnSyntax(this._binding)},BindingInSyntax}();r.BindingInSyntax=c},9812:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.BindingInWhenOnSyntax=void 0;var i=o(3366),a=o(1811),c=o(8370),u=function(){function BindingInWhenOnSyntax(t){this._binding=t,this._bindingWhenSyntax=new c.BindingWhenSyntax(this._binding),this._bindingOnSyntax=new a.BindingOnSyntax(this._binding),this._bindingInSyntax=new i.BindingInSyntax(t)}return BindingInWhenOnSyntax.prototype.inRequestScope=function(){return this._bindingInSyntax.inRequestScope()},BindingInWhenOnSyntax.prototype.inSingletonScope=function(){return this._bindingInSyntax.inSingletonScope()},BindingInWhenOnSyntax.prototype.inTransientScope=function(){return this._bindingInSyntax.inTransientScope()},BindingInWhenOnSyntax.prototype.when=function(t){return this._bindingWhenSyntax.when(t)},BindingInWhenOnSyntax.prototype.whenTargetNamed=function(t){return this._bindingWhenSyntax.whenTargetNamed(t)},BindingInWhenOnSyntax.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},BindingInWhenOnSyntax.prototype.whenTargetTagged=function(t,r){return this._bindingWhenSyntax.whenTargetTagged(t,r)},BindingInWhenOnSyntax.prototype.whenInjectedInto=function(t){return this._bindingWhenSyntax.whenInjectedInto(t)},BindingInWhenOnSyntax.prototype.whenParentNamed=function(t){return this._bindingWhenSyntax.whenParentNamed(t)},BindingInWhenOnSyntax.prototype.whenParentTagged=function(t,r){return this._bindingWhenSyntax.whenParentTagged(t,r)},BindingInWhenOnSyntax.prototype.whenAnyAncestorIs=function(t){return this._bindingWhenSyntax.whenAnyAncestorIs(t)},BindingInWhenOnSyntax.prototype.whenNoAncestorIs=function(t){return this._bindingWhenSyntax.whenNoAncestorIs(t)},BindingInWhenOnSyntax.prototype.whenAnyAncestorNamed=function(t){return this._bindingWhenSyntax.whenAnyAncestorNamed(t)},BindingInWhenOnSyntax.prototype.whenAnyAncestorTagged=function(t,r){return this._bindingWhenSyntax.whenAnyAncestorTagged(t,r)},BindingInWhenOnSyntax.prototype.whenNoAncestorNamed=function(t){return this._bindingWhenSyntax.whenNoAncestorNamed(t)},BindingInWhenOnSyntax.prototype.whenNoAncestorTagged=function(t,r){return this._bindingWhenSyntax.whenNoAncestorTagged(t,r)},BindingInWhenOnSyntax.prototype.whenAnyAncestorMatches=function(t){return this._bindingWhenSyntax.whenAnyAncestorMatches(t)},BindingInWhenOnSyntax.prototype.whenNoAncestorMatches=function(t){return this._bindingWhenSyntax.whenNoAncestorMatches(t)},BindingInWhenOnSyntax.prototype.onActivation=function(t){return this._bindingOnSyntax.onActivation(t)},BindingInWhenOnSyntax}();r.BindingInWhenOnSyntax=u},1811:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.BindingOnSyntax=void 0;var i=o(8370),a=function(){function BindingOnSyntax(t){this._binding=t}return BindingOnSyntax.prototype.onActivation=function(t){return this._binding.onActivation=t,new i.BindingWhenSyntax(this._binding)},BindingOnSyntax}();r.BindingOnSyntax=a},1860:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.BindingToSyntax=void 0;var i=o(6674),a=o(8421),c=o(9812),u=o(1325),l=function(){function BindingToSyntax(t){this._binding=t}return BindingToSyntax.prototype.to=function(t){return this._binding.type=a.BindingTypeEnum.Instance,this._binding.implementationType=t,new c.BindingInWhenOnSyntax(this._binding)},BindingToSyntax.prototype.toSelf=function(){if("function"!=typeof this._binding.serviceIdentifier)throw new Error(""+i.INVALID_TO_SELF_VALUE);var t=this._binding.serviceIdentifier;return this.to(t)},BindingToSyntax.prototype.toConstantValue=function(t){return this._binding.type=a.BindingTypeEnum.ConstantValue,this._binding.cache=t,this._binding.dynamicValue=null,this._binding.implementationType=null,this._binding.scope=a.BindingScopeEnum.Singleton,new u.BindingWhenOnSyntax(this._binding)},BindingToSyntax.prototype.toDynamicValue=function(t){return this._binding.type=a.BindingTypeEnum.DynamicValue,this._binding.cache=null,this._binding.dynamicValue=t,this._binding.implementationType=null,new c.BindingInWhenOnSyntax(this._binding)},BindingToSyntax.prototype.toConstructor=function(t){return this._binding.type=a.BindingTypeEnum.Constructor,this._binding.implementationType=t,this._binding.scope=a.BindingScopeEnum.Singleton,new u.BindingWhenOnSyntax(this._binding)},BindingToSyntax.prototype.toFactory=function(t){return this._binding.type=a.BindingTypeEnum.Factory,this._binding.factory=t,this._binding.scope=a.BindingScopeEnum.Singleton,new u.BindingWhenOnSyntax(this._binding)},BindingToSyntax.prototype.toFunction=function(t){if("function"!=typeof t)throw new Error(i.INVALID_FUNCTION_BINDING);var r=this.toConstantValue(t);return this._binding.type=a.BindingTypeEnum.Function,this._binding.scope=a.BindingScopeEnum.Singleton,r},BindingToSyntax.prototype.toAutoFactory=function(t){return this._binding.type=a.BindingTypeEnum.Factory,this._binding.factory=function(r){return function(){return r.container.get(t)}},this._binding.scope=a.BindingScopeEnum.Singleton,new u.BindingWhenOnSyntax(this._binding)},BindingToSyntax.prototype.toProvider=function(t){return this._binding.type=a.BindingTypeEnum.Provider,this._binding.provider=t,this._binding.scope=a.BindingScopeEnum.Singleton,new u.BindingWhenOnSyntax(this._binding)},BindingToSyntax.prototype.toService=function(t){this.toDynamicValue((function(r){return r.container.get(t)}))},BindingToSyntax}();r.BindingToSyntax=l},1325:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.BindingWhenOnSyntax=void 0;var i=o(1811),a=o(8370),c=function(){function BindingWhenOnSyntax(t){this._binding=t,this._bindingWhenSyntax=new a.BindingWhenSyntax(this._binding),this._bindingOnSyntax=new i.BindingOnSyntax(this._binding)}return BindingWhenOnSyntax.prototype.when=function(t){return this._bindingWhenSyntax.when(t)},BindingWhenOnSyntax.prototype.whenTargetNamed=function(t){return this._bindingWhenSyntax.whenTargetNamed(t)},BindingWhenOnSyntax.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},BindingWhenOnSyntax.prototype.whenTargetTagged=function(t,r){return this._bindingWhenSyntax.whenTargetTagged(t,r)},BindingWhenOnSyntax.prototype.whenInjectedInto=function(t){return this._bindingWhenSyntax.whenInjectedInto(t)},BindingWhenOnSyntax.prototype.whenParentNamed=function(t){return this._bindingWhenSyntax.whenParentNamed(t)},BindingWhenOnSyntax.prototype.whenParentTagged=function(t,r){return this._bindingWhenSyntax.whenParentTagged(t,r)},BindingWhenOnSyntax.prototype.whenAnyAncestorIs=function(t){return this._bindingWhenSyntax.whenAnyAncestorIs(t)},BindingWhenOnSyntax.prototype.whenNoAncestorIs=function(t){return this._bindingWhenSyntax.whenNoAncestorIs(t)},BindingWhenOnSyntax.prototype.whenAnyAncestorNamed=function(t){return this._bindingWhenSyntax.whenAnyAncestorNamed(t)},BindingWhenOnSyntax.prototype.whenAnyAncestorTagged=function(t,r){return this._bindingWhenSyntax.whenAnyAncestorTagged(t,r)},BindingWhenOnSyntax.prototype.whenNoAncestorNamed=function(t){return this._bindingWhenSyntax.whenNoAncestorNamed(t)},BindingWhenOnSyntax.prototype.whenNoAncestorTagged=function(t,r){return this._bindingWhenSyntax.whenNoAncestorTagged(t,r)},BindingWhenOnSyntax.prototype.whenAnyAncestorMatches=function(t){return this._bindingWhenSyntax.whenAnyAncestorMatches(t)},BindingWhenOnSyntax.prototype.whenNoAncestorMatches=function(t){return this._bindingWhenSyntax.whenNoAncestorMatches(t)},BindingWhenOnSyntax.prototype.onActivation=function(t){return this._bindingOnSyntax.onActivation(t)},BindingWhenOnSyntax}();r.BindingWhenOnSyntax=c},8370:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.BindingWhenSyntax=void 0;var i=o(1811),a=o(758),c=function(){function BindingWhenSyntax(t){this._binding=t}return BindingWhenSyntax.prototype.when=function(t){return this._binding.constraint=t,new i.BindingOnSyntax(this._binding)},BindingWhenSyntax.prototype.whenTargetNamed=function(t){return this._binding.constraint=a.namedConstraint(t),new i.BindingOnSyntax(this._binding)},BindingWhenSyntax.prototype.whenTargetIsDefault=function(){return this._binding.constraint=function(t){return null!==t.target&&!t.target.isNamed()&&!t.target.isTagged()},new i.BindingOnSyntax(this._binding)},BindingWhenSyntax.prototype.whenTargetTagged=function(t,r){return this._binding.constraint=a.taggedConstraint(t)(r),new i.BindingOnSyntax(this._binding)},BindingWhenSyntax.prototype.whenInjectedInto=function(t){return this._binding.constraint=function(r){return a.typeConstraint(t)(r.parentRequest)},new i.BindingOnSyntax(this._binding)},BindingWhenSyntax.prototype.whenParentNamed=function(t){return this._binding.constraint=function(r){return a.namedConstraint(t)(r.parentRequest)},new i.BindingOnSyntax(this._binding)},BindingWhenSyntax.prototype.whenParentTagged=function(t,r){return this._binding.constraint=function(o){return a.taggedConstraint(t)(r)(o.parentRequest)},new i.BindingOnSyntax(this._binding)},BindingWhenSyntax.prototype.whenAnyAncestorIs=function(t){return this._binding.constraint=function(r){return a.traverseAncerstors(r,a.typeConstraint(t))},new i.BindingOnSyntax(this._binding)},BindingWhenSyntax.prototype.whenNoAncestorIs=function(t){return this._binding.constraint=function(r){return!a.traverseAncerstors(r,a.typeConstraint(t))},new i.BindingOnSyntax(this._binding)},BindingWhenSyntax.prototype.whenAnyAncestorNamed=function(t){return this._binding.constraint=function(r){return a.traverseAncerstors(r,a.namedConstraint(t))},new i.BindingOnSyntax(this._binding)},BindingWhenSyntax.prototype.whenNoAncestorNamed=function(t){return this._binding.constraint=function(r){return!a.traverseAncerstors(r,a.namedConstraint(t))},new i.BindingOnSyntax(this._binding)},BindingWhenSyntax.prototype.whenAnyAncestorTagged=function(t,r){return this._binding.constraint=function(o){return a.traverseAncerstors(o,a.taggedConstraint(t)(r))},new i.BindingOnSyntax(this._binding)},BindingWhenSyntax.prototype.whenNoAncestorTagged=function(t,r){return this._binding.constraint=function(o){return!a.traverseAncerstors(o,a.taggedConstraint(t)(r))},new i.BindingOnSyntax(this._binding)},BindingWhenSyntax.prototype.whenAnyAncestorMatches=function(t){return this._binding.constraint=function(r){return a.traverseAncerstors(r,t)},new i.BindingOnSyntax(this._binding)},BindingWhenSyntax.prototype.whenNoAncestorMatches=function(t){return this._binding.constraint=function(r){return!a.traverseAncerstors(r,t)},new i.BindingOnSyntax(this._binding)},BindingWhenSyntax}();r.BindingWhenSyntax=c},758:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.typeConstraint=r.namedConstraint=r.taggedConstraint=r.traverseAncerstors=void 0;var i=o(6867),a=o(7738),traverseAncerstors=function(t,r){var o=t.parentRequest;return null!==o&&(!!r(o)||traverseAncerstors(o,r))};r.traverseAncerstors=traverseAncerstors;var taggedConstraint=function(t){return function(r){var constraint=function(o){return null!==o&&null!==o.target&&o.target.matchesTag(t)(r)};return constraint.metaData=new a.Metadata(t,r),constraint}};r.taggedConstraint=taggedConstraint;var c=taggedConstraint(i.NAMED_TAG);r.namedConstraint=c;r.typeConstraint=function(t){return function(r){var o=null;if(null!==r){if(o=r.bindings[0],"string"==typeof t)return o.serviceIdentifier===t;var i=r.bindings[0].implementationType;return t===i}return!1}}},600:(t,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.multiBindToService=void 0;r.multiBindToService=function(t){return function(r){return function(){for(var o=[],i=0;i<arguments.length;i++)o[i]=arguments[i];return o.forEach((function(o){return t.bind(o).toService(r)}))}}}},5265:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isStackOverflowExeption=void 0;var i=o(6674);r.isStackOverflowExeption=function isStackOverflowExeption(t){return t instanceof RangeError||t.message===i.STACK_OVERFLOW}},7791:(t,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.id=void 0;var o=0;r.id=function id(){return o++}},5800:(t,r,o)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.circularDependencyToException=r.listMetadataForTarget=r.listRegisteredBindingsForServiceIdentifier=r.getServiceIdentifierAsString=r.getFunctionName=void 0;var i=o(6674);function getServiceIdentifierAsString(t){return"function"==typeof t?t.name:"symbol"==typeof t?t.toString():t}function alreadyDependencyChain(t,r){return null!==t.parentRequest&&(t.parentRequest.serviceIdentifier===r||alreadyDependencyChain(t.parentRequest,r))}function getFunctionName(t){if(t.name)return t.name;var r=t.toString(),o=r.match(/^function\s*([^\s(]+)/);return o?o[1]:"Anonymous function: "+r}r.getServiceIdentifierAsString=getServiceIdentifierAsString,r.listRegisteredBindingsForServiceIdentifier=function listRegisteredBindingsForServiceIdentifier(t,r,o){var i="",a=o(t,r);return 0!==a.length&&(i="\nRegistered bindings:",a.forEach((function(t){var r="Object";null!==t.implementationType&&(r=getFunctionName(t.implementationType)),i=i+"\n "+r,t.constraint.metaData&&(i=i+" - "+t.constraint.metaData)}))),i},r.circularDependencyToException=function circularDependencyToException(t){t.childRequests.forEach((function(t){if(alreadyDependencyChain(t,t.serviceIdentifier)){var r=function dependencyChainToString(t){return function _createStringArr(t,r){void 0===r&&(r=[]);var o=getServiceIdentifierAsString(t.serviceIdentifier);return r.push(o),null!==t.parentRequest?_createStringArr(t.parentRequest,r):r}(t).reverse().join(" --\x3e ")}(t);throw new Error(i.CIRCULAR_DEPENDENCY+" "+r)}circularDependencyToException(t)}))},r.listMetadataForTarget=function listMetadataForTarget(t,r){if(r.isTagged()||r.isNamed()){var o="",i=r.getNamedTag(),a=r.getCustomTags();return null!==i&&(o+=i.toString()+"\n"),null!==a&&a.forEach((function(t){o+=t.toString()+"\n"}))," "+t+"\n "+t+" - "+o}return" "+t},r.getFunctionName=getFunctionName},6961:(t,r,o)=>{var i,a=function(){var t=String.fromCharCode,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$",i={};function getBaseValue(t,r){if(!i[t]){i[t]={};for(var o=0;o<t.length;o++)i[t][t.charAt(o)]=o}return i[t][r]}var a={compressToBase64:function(t){if(null==t)return"";var o=a._compress(t,6,(function(t){return r.charAt(t)}));switch(o.length%4){default:return o;case 1:return o+"===";case 2:return o+"==";case 3:return o+"="}},decompressFromBase64:function(t){return null==t?"":""==t?null:a._decompress(t.length,32,(function(o){return getBaseValue(r,t.charAt(o))}))},compressToUTF16:function(r){return null==r?"":a._compress(r,15,(function(r){return t(r+32)}))+" "},decompressFromUTF16:function(t){return null==t?"":""==t?null:a._decompress(t.length,16384,(function(r){return t.charCodeAt(r)-32}))},compressToUint8Array:function(t){for(var r=a.compress(t),o=new Uint8Array(2*r.length),i=0,c=r.length;i<c;i++){var u=r.charCodeAt(i);o[2*i]=u>>>8,o[2*i+1]=u%256}return o},decompressFromUint8Array:function(r){if(null==r)return a.decompress(r);for(var o=new Array(r.length/2),i=0,c=o.length;i<c;i++)o[i]=256*r[2*i]+r[2*i+1];var u=[];return o.forEach((function(r){u.push(t(r))})),a.decompress(u.join(""))},compressToEncodedURIComponent:function(t){return null==t?"":a._compress(t,6,(function(t){return o.charAt(t)}))},decompressFromEncodedURIComponent:function(t){return null==t?"":""==t?null:(t=t.replace(/ /g,"+"),a._decompress(t.length,32,(function(r){return getBaseValue(o,t.charAt(r))})))},compress:function(r){return a._compress(r,16,(function(r){return t(r)}))},_compress:function(t,r,o){if(null==t)return"";var i,a,c,u={},l={},p="",d="",h="",y=2,v=3,g=2,_=[],m=0,b=0;for(c=0;c<t.length;c+=1)if(p=t.charAt(c),Object.prototype.hasOwnProperty.call(u,p)||(u[p]=v++,l[p]=!0),d=h+p,Object.prototype.hasOwnProperty.call(u,d))h=d;else{if(Object.prototype.hasOwnProperty.call(l,h)){if(h.charCodeAt(0)<256){for(i=0;i<g;i++)m<<=1,b==r-1?(b=0,_.push(o(m)),m=0):b++;for(a=h.charCodeAt(0),i=0;i<8;i++)m=m<<1|1&a,b==r-1?(b=0,_.push(o(m)),m=0):b++,a>>=1}else{for(a=1,i=0;i<g;i++)m=m<<1|a,b==r-1?(b=0,_.push(o(m)),m=0):b++,a=0;for(a=h.charCodeAt(0),i=0;i<16;i++)m=m<<1|1&a,b==r-1?(b=0,_.push(o(m)),m=0):b++,a>>=1}0==--y&&(y=Math.pow(2,g),g++),delete l[h]}else for(a=u[h],i=0;i<g;i++)m=m<<1|1&a,b==r-1?(b=0,_.push(o(m)),m=0):b++,a>>=1;0==--y&&(y=Math.pow(2,g),g++),u[d]=v++,h=String(p)}if(""!==h){if(Object.prototype.hasOwnProperty.call(l,h)){if(h.charCodeAt(0)<256){for(i=0;i<g;i++)m<<=1,b==r-1?(b=0,_.push(o(m)),m=0):b++;for(a=h.charCodeAt(0),i=0;i<8;i++)m=m<<1|1&a,b==r-1?(b=0,_.push(o(m)),m=0):b++,a>>=1}else{for(a=1,i=0;i<g;i++)m=m<<1|a,b==r-1?(b=0,_.push(o(m)),m=0):b++,a=0;for(a=h.charCodeAt(0),i=0;i<16;i++)m=m<<1|1&a,b==r-1?(b=0,_.push(o(m)),m=0):b++,a>>=1}0==--y&&(y=Math.pow(2,g),g++),delete l[h]}else for(a=u[h],i=0;i<g;i++)m=m<<1|1&a,b==r-1?(b=0,_.push(o(m)),m=0):b++,a>>=1;0==--y&&(y=Math.pow(2,g),g++)}for(a=2,i=0;i<g;i++)m=m<<1|1&a,b==r-1?(b=0,_.push(o(m)),m=0):b++,a>>=1;for(;;){if(m<<=1,b==r-1){_.push(o(m));break}b++}return _.join("")},decompress:function(t){return null==t?"":""==t?null:a._decompress(t.length,32768,(function(r){return t.charCodeAt(r)}))},_decompress:function(r,o,i){var a,c,u,l,p,d,h,y=[],v=4,g=4,_=3,m="",b=[],w={val:i(0),position:o,index:1};for(a=0;a<3;a+=1)y[a]=a;for(u=0,p=Math.pow(2,2),d=1;d!=p;)l=w.val&w.position,w.position>>=1,0==w.position&&(w.position=o,w.val=i(w.index++)),u|=(l>0?1:0)*d,d<<=1;switch(u){case 0:for(u=0,p=Math.pow(2,8),d=1;d!=p;)l=w.val&w.position,w.position>>=1,0==w.position&&(w.position=o,w.val=i(w.index++)),u|=(l>0?1:0)*d,d<<=1;h=t(u);break;case 1:for(u=0,p=Math.pow(2,16),d=1;d!=p;)l=w.val&w.position,w.position>>=1,0==w.position&&(w.position=o,w.val=i(w.index++)),u|=(l>0?1:0)*d,d<<=1;h=t(u);break;case 2:return""}for(y[3]=h,c=h,b.push(h);;){if(w.index>r)return"";for(u=0,p=Math.pow(2,_),d=1;d!=p;)l=w.val&w.position,w.position>>=1,0==w.position&&(w.position=o,w.val=i(w.index++)),u|=(l>0?1:0)*d,d<<=1;switch(h=u){case 0:for(u=0,p=Math.pow(2,8),d=1;d!=p;)l=w.val&w.position,w.position>>=1,0==w.position&&(w.position=o,w.val=i(w.index++)),u|=(l>0?1:0)*d,d<<=1;y[g++]=t(u),h=g-1,v--;break;case 1:for(u=0,p=Math.pow(2,16),d=1;d!=p;)l=w.val&w.position,w.position>>=1,0==w.position&&(w.position=o,w.val=i(w.index++)),u|=(l>0?1:0)*d,d<<=1;y[g++]=t(u),h=g-1,v--;break;case 2:return b.join("")}if(0==v&&(v=Math.pow(2,_),_++),y[h])m=y[h];else{if(h!==g)return null;m=c+c.charAt(0)}b.push(m),y[g++]=c+m.charAt(0),c=m,0==--v&&(v=Math.pow(2,_),_++)}}};return a}();void 0===(i=function(){return a}.call(r,o,r,t))||(t.exports=i)},7824:t=>{var r=1e3,o=60*r,i=60*o,a=24*i,c=7*a,u=365.25*a;function plural(t,r,o,i){var a=r>=1.5*o;return Math.round(t/o)+" "+i+(a?"s":"")}t.exports=function(t,l){l=l||{};var p=typeof t;if("string"===p&&t.length>0)return function parse(t){if((t=String(t)).length>100)return;var l=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!l)return;var p=parseFloat(l[1]);switch((l[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return p*u;case"weeks":case"week":case"w":return p*c;case"days":case"day":case"d":return p*a;case"hours":case"hour":case"hrs":case"hr":case"h":return p*i;case"minutes":case"minute":case"mins":case"min":case"m":return p*o;case"seconds":case"second":case"secs":case"sec":case"s":return p*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return p;default:return}}(t);if("number"===p&&isFinite(t))return l.long?function fmtLong(t){var c=Math.abs(t);if(c>=a)return plural(t,c,a,"day");if(c>=i)return plural(t,c,i,"hour");if(c>=o)return plural(t,c,o,"minute");if(c>=r)return plural(t,c,r,"second");return t+" ms"}(t):function fmtShort(t){var c=Math.abs(t);if(c>=a)return Math.round(t/a)+"d";if(c>=i)return Math.round(t/i)+"h";if(c>=o)return Math.round(t/o)+"m";if(c>=r)return Math.round(t/r)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},4155:t=>{var r,o,i=t.exports={};function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(t){if(r===setTimeout)return setTimeout(t,0);if((r===defaultSetTimout||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(o){try{return r.call(null,t,0)}catch(o){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(t){r=defaultSetTimout}try{o="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(t){o=defaultClearTimeout}}();var a,c=[],u=!1,l=-1;function cleanUpNextTick(){u&&a&&(u=!1,a.length?c=a.concat(c):l=-1,c.length&&drainQueue())}function drainQueue(){if(!u){var t=runTimeout(cleanUpNextTick);u=!0;for(var r=c.length;r;){for(a=c,c=[];++l<r;)a&&a[l].run();l=-1,r=c.length}a=null,u=!1,function runClearTimeout(t){if(o===clearTimeout)return clearTimeout(t);if((o===defaultClearTimeout||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(t);try{return o(t)}catch(r){try{return o.call(null,t)}catch(r){return o.call(this,t)}}}(t)}}function Item(t,r){this.fun=t,this.array=r}function noop(){}i.nextTick=function(t){var r=new Array(arguments.length-1);if(arguments.length>1)for(var o=1;o<arguments.length;o++)r[o-1]=arguments[o];c.push(new Item(t,r)),1!==c.length||u||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=noop,i.addListener=noop,i.once=noop,i.off=noop,i.removeListener=noop,i.removeAllListeners=noop,i.emit=noop,i.prependListener=noop,i.prependOnceListener=noop,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},8660:(t,r,o)=>{var i,a=o(4155);!function(t){!function(r){var i="object"==typeof o.g?o.g:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),c=makeExporter(t);function makeExporter(t,r){return function(o,i){"function"!=typeof t[o]&&Object.defineProperty(t,o,{configurable:!0,writable:!0,value:i}),r&&r(o,i)}}void 0===i.Reflect?i.Reflect=t:c=makeExporter(i.Reflect,c),function(t){var r=Object.prototype.hasOwnProperty,o="function"==typeof Symbol,i=o&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",c=o&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",u="function"==typeof Object.create,l={__proto__:[]}instanceof Array,p=!u&&!l,d={create:u?function(){return MakeDictionary(Object.create(null))}:l?function(){return MakeDictionary({__proto__:null})}:function(){return MakeDictionary({})},has:p?function(t,o){return r.call(t,o)}:function(t,r){return r in t},get:p?function(t,o){return r.call(t,o)?t[o]:void 0}:function(t,r){return t[r]}},h=Object.getPrototypeOf(Function),y="object"==typeof a&&a.env&&"true"===a.env.REFLECT_METADATA_USE_MAP_POLYFILL,v=y||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?CreateMapPolyfill():Map,g=y||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?CreateSetPolyfill():Set,_=new(y||"function"!=typeof WeakMap?CreateWeakMapPolyfill():WeakMap);function decorate(t,r,o,i){if(IsUndefined(o)){if(!IsArray(t))throw new TypeError;if(!IsConstructor(r))throw new TypeError;return DecorateConstructor(t,r)}if(!IsArray(t))throw new TypeError;if(!IsObject(r))throw new TypeError;if(!IsObject(i)&&!IsUndefined(i)&&!IsNull(i))throw new TypeError;return IsNull(i)&&(i=void 0),DecorateProperty(t,r,o=ToPropertyKey(o),i)}function metadata(t,r){function decorator(o,i){if(!IsObject(o))throw new TypeError;if(!IsUndefined(i)&&!IsPropertyKey(i))throw new TypeError;OrdinaryDefineOwnMetadata(t,r,o,i)}return decorator}function defineMetadata(t,r,o,i){if(!IsObject(o))throw new TypeError;return IsUndefined(i)||(i=ToPropertyKey(i)),OrdinaryDefineOwnMetadata(t,r,o,i)}function hasMetadata(t,r,o){if(!IsObject(r))throw new TypeError;return IsUndefined(o)||(o=ToPropertyKey(o)),OrdinaryHasMetadata(t,r,o)}function hasOwnMetadata(t,r,o){if(!IsObject(r))throw new TypeError;return IsUndefined(o)||(o=ToPropertyKey(o)),OrdinaryHasOwnMetadata(t,r,o)}function getMetadata(t,r,o){if(!IsObject(r))throw new TypeError;return IsUndefined(o)||(o=ToPropertyKey(o)),OrdinaryGetMetadata(t,r,o)}function getOwnMetadata(t,r,o){if(!IsObject(r))throw new TypeError;return IsUndefined(o)||(o=ToPropertyKey(o)),OrdinaryGetOwnMetadata(t,r,o)}function getMetadataKeys(t,r){if(!IsObject(t))throw new TypeError;return IsUndefined(r)||(r=ToPropertyKey(r)),OrdinaryMetadataKeys(t,r)}function getOwnMetadataKeys(t,r){if(!IsObject(t))throw new TypeError;return IsUndefined(r)||(r=ToPropertyKey(r)),OrdinaryOwnMetadataKeys(t,r)}function deleteMetadata(t,r,o){if(!IsObject(r))throw new TypeError;IsUndefined(o)||(o=ToPropertyKey(o));var i=GetOrCreateMetadataMap(r,o,!1);if(IsUndefined(i))return!1;if(!i.delete(t))return!1;if(i.size>0)return!0;var a=_.get(r);return a.delete(o),a.size>0||_.delete(r),!0}function DecorateConstructor(t,r){for(var o=t.length-1;o>=0;--o){var i=(0,t[o])(r);if(!IsUndefined(i)&&!IsNull(i)){if(!IsConstructor(i))throw new TypeError;r=i}}return r}function DecorateProperty(t,r,o,i){for(var a=t.length-1;a>=0;--a){var c=(0,t[a])(r,o,i);if(!IsUndefined(c)&&!IsNull(c)){if(!IsObject(c))throw new TypeError;i=c}}return i}function GetOrCreateMetadataMap(t,r,o){var i=_.get(t);if(IsUndefined(i)){if(!o)return;i=new v,_.set(t,i)}var a=i.get(r);if(IsUndefined(a)){if(!o)return;a=new v,i.set(r,a)}return a}function OrdinaryHasMetadata(t,r,o){if(OrdinaryHasOwnMetadata(t,r,o))return!0;var i=OrdinaryGetPrototypeOf(r);return!IsNull(i)&&OrdinaryHasMetadata(t,i,o)}function OrdinaryHasOwnMetadata(t,r,o){var i=GetOrCreateMetadataMap(r,o,!1);return!IsUndefined(i)&&ToBoolean(i.has(t))}function OrdinaryGetMetadata(t,r,o){if(OrdinaryHasOwnMetadata(t,r,o))return OrdinaryGetOwnMetadata(t,r,o);var i=OrdinaryGetPrototypeOf(r);return IsNull(i)?void 0:OrdinaryGetMetadata(t,i,o)}function OrdinaryGetOwnMetadata(t,r,o){var i=GetOrCreateMetadataMap(r,o,!1);if(!IsUndefined(i))return i.get(t)}function OrdinaryDefineOwnMetadata(t,r,o,i){GetOrCreateMetadataMap(o,i,!0).set(t,r)}function OrdinaryMetadataKeys(t,r){var o=OrdinaryOwnMetadataKeys(t,r),i=OrdinaryGetPrototypeOf(t);if(null===i)return o;var a=OrdinaryMetadataKeys(i,r);if(a.length<=0)return o;if(o.length<=0)return a;for(var c=new g,u=[],l=0,p=o;l<p.length;l++){var d=p[l];c.has(d)||(c.add(d),u.push(d))}for(var h=0,y=a;h<y.length;h++){d=y[h];c.has(d)||(c.add(d),u.push(d))}return u}function OrdinaryOwnMetadataKeys(t,r){var o=[],i=GetOrCreateMetadataMap(t,r,!1);if(IsUndefined(i))return o;for(var a=GetIterator(i.keys()),c=0;;){var u=IteratorStep(a);if(!u)return o.length=c,o;var l=IteratorValue(u);try{o[c]=l}catch(t){try{IteratorClose(a)}finally{throw t}}c++}}function Type(t){if(null===t)return 1;switch(typeof t){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===t?1:6;default:return 6}}function IsUndefined(t){return void 0===t}function IsNull(t){return null===t}function IsSymbol(t){return"symbol"==typeof t}function IsObject(t){return"object"==typeof t?null!==t:"function"==typeof t}function ToPrimitive(t,r){switch(Type(t)){case 0:case 1:case 2:case 3:case 4:case 5:return t}var o=3===r?"string":5===r?"number":"default",a=GetMethod(t,i);if(void 0!==a){var c=a.call(t,o);if(IsObject(c))throw new TypeError;return c}return OrdinaryToPrimitive(t,"default"===o?"number":o)}function OrdinaryToPrimitive(t,r){if("string"===r){var o=t.toString;if(IsCallable(o))if(!IsObject(a=o.call(t)))return a;if(IsCallable(i=t.valueOf))if(!IsObject(a=i.call(t)))return a}else{var i;if(IsCallable(i=t.valueOf))if(!IsObject(a=i.call(t)))return a;var a,c=t.toString;if(IsCallable(c))if(!IsObject(a=c.call(t)))return a}throw new TypeError}function ToBoolean(t){return!!t}function ToString(t){return""+t}function ToPropertyKey(t){var r=ToPrimitive(t,3);return IsSymbol(r)?r:ToString(r)}function IsArray(t){return Array.isArray?Array.isArray(t):t instanceof Object?t instanceof Array:"[object Array]"===Object.prototype.toString.call(t)}function IsCallable(t){return"function"==typeof t}function IsConstructor(t){return"function"==typeof t}function IsPropertyKey(t){switch(Type(t)){case 3:case 4:return!0;default:return!1}}function GetMethod(t,r){var o=t[r];if(null!=o){if(!IsCallable(o))throw new TypeError;return o}}function GetIterator(t){var r=GetMethod(t,c);if(!IsCallable(r))throw new TypeError;var o=r.call(t);if(!IsObject(o))throw new TypeError;return o}function IteratorValue(t){return t.value}function IteratorStep(t){var r=t.next();return!r.done&&r}function IteratorClose(t){var r=t.return;r&&r.call(t)}function OrdinaryGetPrototypeOf(t){var r=Object.getPrototypeOf(t);if("function"!=typeof t||t===h)return r;if(r!==h)return r;var o=t.prototype,i=o&&Object.getPrototypeOf(o);if(null==i||i===Object.prototype)return r;var a=i.constructor;return"function"!=typeof a||a===t?r:a}function CreateMapPolyfill(){var t={},r=[],o=function(){function MapIterator(t,r,o){this._index=0,this._keys=t,this._values=r,this._selector=o}return MapIterator.prototype["@@iterator"]=function(){return this},MapIterator.prototype[c]=function(){return this},MapIterator.prototype.next=function(){var t=this._index;if(t>=0&&t<this._keys.length){var o=this._selector(this._keys[t],this._values[t]);return t+1>=this._keys.length?(this._index=-1,this._keys=r,this._values=r):this._index++,{value:o,done:!1}}return{value:void 0,done:!0}},MapIterator.prototype.throw=function(t){throw this._index>=0&&(this._index=-1,this._keys=r,this._values=r),t},MapIterator.prototype.return=function(t){return this._index>=0&&(this._index=-1,this._keys=r,this._values=r),{value:t,done:!0}},MapIterator}();return function(){function Map(){this._keys=[],this._values=[],this._cacheKey=t,this._cacheIndex=-2}return Object.defineProperty(Map.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),Map.prototype.has=function(t){return this._find(t,!1)>=0},Map.prototype.get=function(t){var r=this._find(t,!1);return r>=0?this._values[r]:void 0},Map.prototype.set=function(t,r){var o=this._find(t,!0);return this._values[o]=r,this},Map.prototype.delete=function(r){var o=this._find(r,!1);if(o>=0){for(var i=this._keys.length,a=o+1;a<i;a++)this._keys[a-1]=this._keys[a],this._values[a-1]=this._values[a];return this._keys.length--,this._values.length--,r===this._cacheKey&&(this._cacheKey=t,this._cacheIndex=-2),!0}return!1},Map.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=t,this._cacheIndex=-2},Map.prototype.keys=function(){return new o(this._keys,this._values,getKey)},Map.prototype.values=function(){return new o(this._keys,this._values,getValue)},Map.prototype.entries=function(){return new o(this._keys,this._values,getEntry)},Map.prototype["@@iterator"]=function(){return this.entries()},Map.prototype[c]=function(){return this.entries()},Map.prototype._find=function(t,r){return this._cacheKey!==t&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=t)),this._cacheIndex<0&&r&&(this._cacheIndex=this._keys.length,this._keys.push(t),this._values.push(void 0)),this._cacheIndex},Map}();function getKey(t,r){return t}function getValue(t,r){return r}function getEntry(t,r){return[t,r]}}function CreateSetPolyfill(){return function(){function Set(){this._map=new v}return Object.defineProperty(Set.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),Set.prototype.has=function(t){return this._map.has(t)},Set.prototype.add=function(t){return this._map.set(t,t),this},Set.prototype.delete=function(t){return this._map.delete(t)},Set.prototype.clear=function(){this._map.clear()},Set.prototype.keys=function(){return this._map.keys()},Set.prototype.values=function(){return this._map.values()},Set.prototype.entries=function(){return this._map.entries()},Set.prototype["@@iterator"]=function(){return this.keys()},Set.prototype[c]=function(){return this.keys()},Set}()}function CreateWeakMapPolyfill(){var t=16,o=d.create(),i=CreateUniqueKey();return function(){function WeakMap(){this._key=CreateUniqueKey()}return WeakMap.prototype.has=function(t){var r=GetOrCreateWeakMapTable(t,!1);return void 0!==r&&d.has(r,this._key)},WeakMap.prototype.get=function(t){var r=GetOrCreateWeakMapTable(t,!1);return void 0!==r?d.get(r,this._key):void 0},WeakMap.prototype.set=function(t,r){return GetOrCreateWeakMapTable(t,!0)[this._key]=r,this},WeakMap.prototype.delete=function(t){var r=GetOrCreateWeakMapTable(t,!1);return void 0!==r&&delete r[this._key]},WeakMap.prototype.clear=function(){this._key=CreateUniqueKey()},WeakMap}();function CreateUniqueKey(){var t;do{t="@@WeakMap@@"+CreateUUID()}while(d.has(o,t));return o[t]=!0,t}function GetOrCreateWeakMapTable(t,o){if(!r.call(t,i)){if(!o)return;Object.defineProperty(t,i,{value:d.create()})}return t[i]}function FillRandomBytes(t,r){for(var o=0;o<r;++o)t[o]=255*Math.random()|0;return t}function GenRandomBytes(t){return"function"==typeof Uint8Array?"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(t)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(t)):FillRandomBytes(new Uint8Array(t),t):FillRandomBytes(new Array(t),t)}function CreateUUID(){var r=GenRandomBytes(t);r[6]=79&r[6]|64,r[8]=191&r[8]|128;for(var o="",i=0;i<t;++i){var a=r[i];4!==i&&6!==i&&8!==i||(o+="-"),a<16&&(o+="0"),o+=a.toString(16).toLowerCase()}return o}}function MakeDictionary(t){return t.__=void 0,delete t.__,t}t("decorate",decorate),t("metadata",metadata),t("defineMetadata",defineMetadata),t("hasMetadata",hasMetadata),t("hasOwnMetadata",hasOwnMetadata),t("getMetadata",getMetadata),t("getOwnMetadata",getOwnMetadata),t("getMetadataKeys",getMetadataKeys),t("getOwnMetadataKeys",getOwnMetadataKeys),t("deleteMetadata",deleteMetadata)}(c)}()}(i||(i={}))},5666:t=>{var r=function(t){var r,o=Object.prototype,i=o.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},c=a.iterator||"@@iterator",u=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function define(t,r,o){return Object.defineProperty(t,r,{value:o,enumerable:!0,configurable:!0,writable:!0}),t[r]}try{define({},"")}catch(t){define=function(t,r,o){return t[r]=o}}function wrap(t,r,o,i){var a=r&&r.prototype instanceof Generator?r:Generator,c=Object.create(a.prototype),u=new Context(i||[]);return c._invoke=function makeInvokeMethod(t,r,o){var i=p;return function invoke(a,c){if(i===h)throw new Error("Generator is already running");if(i===y){if("throw"===a)throw c;return doneResult()}for(o.method=a,o.arg=c;;){var u=o.delegate;if(u){var l=maybeInvokeDelegate(u,o);if(l){if(l===v)continue;return l}}if("next"===o.method)o.sent=o._sent=o.arg;else if("throw"===o.method){if(i===p)throw i=y,o.arg;o.dispatchException(o.arg)}else"return"===o.method&&o.abrupt("return",o.arg);i=h;var g=tryCatch(t,r,o);if("normal"===g.type){if(i=o.done?y:d,g.arg===v)continue;return{value:g.arg,done:o.done}}"throw"===g.type&&(i=y,o.method="throw",o.arg=g.arg)}}}(t,o,u),c}function tryCatch(t,r,o){try{return{type:"normal",arg:t.call(r,o)}}catch(t){return{type:"throw",arg:t}}}t.wrap=wrap;var p="suspendedStart",d="suspendedYield",h="executing",y="completed",v={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var g={};define(g,c,(function(){return this}));var _=Object.getPrototypeOf,m=_&&_(_(values([])));m&&m!==o&&i.call(m,c)&&(g=m);var b=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(g);function defineIteratorMethods(t){["next","throw","return"].forEach((function(r){define(t,r,(function(t){return this._invoke(r,t)}))}))}function AsyncIterator(t,r){function invoke(o,a,c,u){var l=tryCatch(t[o],t,a);if("throw"!==l.type){var p=l.arg,d=p.value;return d&&"object"==typeof d&&i.call(d,"__await")?r.resolve(d.__await).then((function(t){invoke("next",t,c,u)}),(function(t){invoke("throw",t,c,u)})):r.resolve(d).then((function(t){p.value=t,c(p)}),(function(t){return invoke("throw",t,c,u)}))}u(l.arg)}var o;this._invoke=function enqueue(t,i){function callInvokeWithMethodAndArg(){return new r((function(r,o){invoke(t,i,r,o)}))}return o=o?o.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}}function maybeInvokeDelegate(t,o){var i=t.iterator[o.method];if(i===r){if(o.delegate=null,"throw"===o.method){if(t.iterator.return&&(o.method="return",o.arg=r,maybeInvokeDelegate(t,o),"throw"===o.method))return v;o.method="throw",o.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var a=tryCatch(i,t.iterator,o.arg);if("throw"===a.type)return o.method="throw",o.arg=a.arg,o.delegate=null,v;var c=a.arg;return c?c.done?(o[t.resultName]=c.value,o.next=t.nextLoc,"return"!==o.method&&(o.method="next",o.arg=r),o.delegate=null,v):c:(o.method="throw",o.arg=new TypeError("iterator result is not an object"),o.delegate=null,v)}function pushTryEntry(t){var r={tryLoc:t[0]};1 in t&&(r.catchLoc=t[1]),2 in t&&(r.finallyLoc=t[2],r.afterLoc=t[3]),this.tryEntries.push(r)}function resetTryEntry(t){var r=t.completion||{};r.type="normal",delete r.arg,t.completion=r}function Context(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(t){if(t){var o=t[c];if(o)return o.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,u=function next(){for(;++a<t.length;)if(i.call(t,a))return next.value=t[a],next.done=!1,next;return next.value=r,next.done=!0,next};return u.next=u}}return{next:doneResult}}function doneResult(){return{value:r,done:!0}}return GeneratorFunction.prototype=GeneratorFunctionPrototype,define(b,"constructor",GeneratorFunctionPrototype),define(GeneratorFunctionPrototype,"constructor",GeneratorFunction),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,l,"GeneratorFunction"),t.isGeneratorFunction=function(t){var r="function"==typeof t&&t.constructor;return!!r&&(r===GeneratorFunction||"GeneratorFunction"===(r.displayName||r.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,define(t,l,"GeneratorFunction")),t.prototype=Object.create(b),t},t.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,u,(function(){return this})),t.AsyncIterator=AsyncIterator,t.async=function(r,o,i,a,c){void 0===c&&(c=Promise);var u=new AsyncIterator(wrap(r,o,i,a),c);return t.isGeneratorFunction(o)?u:u.next().then((function(t){return t.done?t.value:u.next()}))},defineIteratorMethods(b),define(b,l,"Generator"),define(b,c,(function(){return this})),define(b,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var r=[];for(var o in t)r.push(o);return r.reverse(),function next(){for(;r.length;){var o=r.pop();if(o in t)return next.value=o,next.done=!1,next}return next.done=!0,next}},t.values=values,Context.prototype={constructor:Context,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(resetTryEntry),!t)for(var o in this)"t"===o.charAt(0)&&i.call(this,o)&&!isNaN(+o.slice(1))&&(this[o]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var o=this;function handle(i,a){return u.type="throw",u.arg=t,o.next=i,a&&(o.method="next",o.arg=r),!!a}for(var a=this.tryEntries.length-1;a>=0;--a){var c=this.tryEntries[a],u=c.completion;if("root"===c.tryLoc)return handle("end");if(c.tryLoc<=this.prev){var l=i.call(c,"catchLoc"),p=i.call(c,"finallyLoc");if(l&&p){if(this.prev<c.catchLoc)return handle(c.catchLoc,!0);if(this.prev<c.finallyLoc)return handle(c.finallyLoc)}else if(l){if(this.prev<c.catchLoc)return handle(c.catchLoc,!0)}else{if(!p)throw new Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return handle(c.finallyLoc)}}}},abrupt:function(t,r){for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o];if(a.tryLoc<=this.prev&&i.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var c=a;break}}c&&("break"===t||"continue"===t)&&c.tryLoc<=r&&r<=c.finallyLoc&&(c=null);var u=c?c.completion:{};return u.type=t,u.arg=r,c?(this.method="next",this.next=c.finallyLoc,v):this.complete(u)},complete:function(t,r){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&r&&(this.next=r),v},finish:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.finallyLoc===t)return this.complete(o.completion,o.afterLoc),resetTryEntry(o),v}},catch:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc===t){var i=o.completion;if("throw"===i.type){var a=i.arg;resetTryEntry(o)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(t,o,i){return this.delegate={iterator:values(t),resultName:o,nextLoc:i},"next"===this.method&&(this.arg=r),v}},t}(t.exports);try{regeneratorRuntime=r}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},8593:t=>{t.exports=JSON.parse('{"_from":"axios@^0.21.4","_id":"axios@0.21.4","_inBundle":false,"_integrity":"sha512-ut5vewkiu8jjGBdqpM44XxjuCjq9LAKeHVmoVfHVzy8eHgxxq8SbAVQNovDA8mVi05kP0Ea/n/UzcSHcTJQfNg==","_location":"/axios","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"axios@^0.21.4","name":"axios","escapedName":"axios","rawSpec":"^0.21.4","saveSpec":null,"fetchSpec":"^0.21.4"},"_requiredBy":["/"],"_resolved":"https://registry.npmjs.org/axios/-/axios-0.21.4.tgz","_shasum":"c67b90dc0568e5c1cf2b0b858c43ba28e2eda575","_spec":"axios@^0.21.4","_where":"/home/radic/projects/streams/packages/streams/core","author":{"name":"Matt Zabriskie"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"bugs":{"url":"https://github.com/axios/axios/issues"},"bundleDependencies":false,"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}],"dependencies":{"follow-redirects":"^1.14.0"},"deprecated":false,"description":"Promise based HTTP client for the browser and node.js","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"homepage":"https://axios-http.com","jsdelivr":"dist/axios.min.js","keywords":["xhr","http","ajax","promise","node"],"license":"MIT","main":"index.js","name":"axios","repository":{"type":"git","url":"git+https://github.com/axios/axios.git"},"scripts":{"build":"NODE_ENV=production grunt build","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","examples":"node ./examples/server.js","fix":"eslint --fix lib/**/*.js","postversion":"git push && git push --tags","preversion":"npm test","start":"node ./sandbox/server.js","test":"grunt test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json"},"typings":"./index.d.ts","unpkg":"dist/axios.min.js","version":"0.21.4"}')}},r={};function __nested_webpack_require_122241__(o){var i=r[o];if(void 0!==i)return i.exports;var a=r[o]={exports:{}};return t[o].call(a.exports,a,a.exports,__nested_webpack_require_122241__),a.exports}__nested_webpack_require_122241__.n=t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return __nested_webpack_require_122241__.d(r,{a:r}),r},__nested_webpack_require_122241__.d=(t,r)=>{for(var o in r)__nested_webpack_require_122241__.o(r,o)&&!__nested_webpack_require_122241__.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:r[o]})},__nested_webpack_require_122241__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),__nested_webpack_require_122241__.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r);var o={};(()=>{__nested_webpack_require_122241__.d(o,{Mx:()=>_,FE:()=>w,SL:()=>te,VR:()=>z,Up:()=>i,kS:()=>G,rF:()=>W,gN:()=>U,ip:()=>X,eV:()=>Q,e6:()=>k,Pv:()=>L,jg:()=>q,_j:()=>J,UT:()=>h,L9:()=>B,JJ:()=>M,GX:()=>D,F6:()=>Y,VE:()=>Z,LP:()=>ee,$T:()=>j,l2:()=>m,iC:()=>V,f3:()=>b,ER:()=>H,Gn:()=>K});__nested_webpack_require_122241__(8660);function __decorate(t,r,o,i){var a,c=arguments.length,u=c<3?r:null===i?i=Object.getOwnPropertyDescriptor(r,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,r,o,i);else for(var l=t.length-1;l>=0;l--)(a=t[l])&&(u=(c<3?a(u):c>3?a(r,o,u):a(r,o))||u);return c>3&&u&&Object.defineProperty(r,o,u),u}function __awaiter(t,r,o,i){return new(o||(o=Promise))((function(a,c){function fulfilled(t){try{step(i.next(t))}catch(t){c(t)}}function rejected(t){try{step(i.throw(t))}catch(t){c(t)}}function step(t){t.done?a(t.value):function adopt(t){return t instanceof o?t:new o((function(r){r(t)}))}(t.value).then(fulfilled,rejected)}step((i=i.apply(t,r||[])).next())}))}Object.create;Object.create;var t=__nested_webpack_require_122241__(6387),r=__nested_webpack_require_122241__(6700);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _get(t,r,o){return _get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function _get(t,r,o){var i=function _superPropBase(t,r){for(;!Object.prototype.hasOwnProperty.call(t,r)&&null!==(t=_getPrototypeOf(t)););return t}(t,r);if(i){var a=Object.getOwnPropertyDescriptor(i,r);return a.get?a.get.call(o):a.value}},_get(t,r,o||t)}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var o,i=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return _possibleConstructorReturn(this,o)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}(0,r.GW)((0,r.b2)(),t.EventEmitter2);var i=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),r&&_setPrototypeOf(t,r)}(Dispatcher,t);var r=_createSuper(Dispatcher);function Dispatcher(t){var o;return function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Dispatcher),(o=r.call(this,{wildcard:!0,delimiter:":"})).anyListeners=[],o}return function _createClass(t,r,o){return r&&_defineProperties(t.prototype,r),o&&_defineProperties(t,o),t}(Dispatcher,[{key:"emit",value:function emit(t){for(var r,o=arguments.length,i=new Array(o>1?o-1:0),a=1;a<o;a++)i[a-1]=arguments[a];var c=(r=_get(_getPrototypeOf(Dispatcher.prototype),"emit",this)).call.apply(r,[this,t].concat(i));return this.anyListeners.forEach((function(r){return r.apply(void 0,[t].concat(i))})),c}},{key:"any",value:function any(t){this.anyListeners.push(t)}}]),Dispatcher}(t.EventEmitter2);i=__decorate([(0,r.b2)(),function __param(t,r){return function(o,i){r(o,i,t)}}(0,(0,r.NT)())],i);var a,c=__nested_webpack_require_122241__(7757),u=__nested_webpack_require_122241__.n(c),l=__nested_webpack_require_122241__(4879);function Repository_typeof(t){return Repository_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Repository_typeof(t)}function Repository_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function Repository_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var p,d=a=function(){function Repository(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Repository_classCallCheck(this,Repository),this.items=t,this.items=t}return function Repository_createClass(t,r,o){return r&&Repository_defineProperties(t.prototype,r),o&&Repository_defineProperties(t,o),t}(Repository,[{key:"get",value:function get(t,r){var o=getSetDescendantProp(this.items,t);return void 0===o&&(o=r),o}},{key:"set",value:function set(t,r){return"object"===Repository_typeof(t)?this.items=t:getSetDescendantProp(this.items,t,r),this}},{key:"has",value:function has(t){return void 0!==getSetDescendantProp(this.items,t)}}],[{key:"asProxy",value:function asProxy(t){return function makeProxy(t){return new Proxy(t,{get:function get(t,r,o){if(Reflect.has(t,r))return Reflect.get(t,r,o);if(r===p.IS_PROXY)return!0;if(r===p.UNPROXY)return function(){return t};var i=r.toString();return t.has(i)?t.get(i):void 0},set:function set(t,r,o,i){if([p.IS_PROXY,p.UNPROXY].includes(r.toString()))throw Error("Cannot set property: "+r.toString());return Reflect.has(t,r)?Reflect.set(t,r,o,i):(t.set(r.toString(),o),!0)},has:function has(t,r){return!!Reflect.has(t,r)||t.has(r.toString())}})}(new a(t))}}]),Repository}();function getSetDescendantProp(t,r,o){for(var i=r?r.split("."):[];i.length&&t;){var a=i.shift(),c=new RegExp("(.+)\\[([0-9]*)\\]").exec(a);if(null===c||3!=c.length)void 0!==o&&(void 0===t[a]&&(t[a]={}),0===i.length&&(t[a]=o)),t=t[a];else{var u={arrName:c[1],arrIndex:c[2]};void 0!==t[u.arrName]?(void 0!==o&&0===i.length&&(t[u.arrName][u.arrIndex]=o),t=t[u.arrName][u.arrIndex]):t=void 0}}return t}d=a=__decorate([(0,r.b2)()],d),function(t){t.IS_PROXY="__s_isProxy",t.UNPROXY="__s_unproxy"}(p||(p={}));var h=function ServiceProvider(t){!function ServiceProvider_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,ServiceProvider),this.app=t},y=function isServiceProviderClass(t){return!(t instanceof h)},v={streams:{},http:{baseURL:"/api",etag:{enabled:!0,manifestKey:"streams"},headers:{"X-Requested-With":"XMLHttpRequest"}}};function Application_typeof(t){return Application_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Application_typeof(t)}function _createForOfIteratorHelper(t,r){var o="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!o){if(Array.isArray(t)||(o=function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var o=Object.prototype.toString.call(t).slice(8,-1);"Object"===o&&t.constructor&&(o=t.constructor.name);if("Map"===o||"Set"===o)return Array.from(t);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return _arrayLikeToArray(t,r)}(t))||r&&t&&"number"==typeof t.length){o&&(t=o);var i=0,a=function F(){};return{s:a,n:function n(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function e(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,u=!0,l=!1;return{s:function s(){o=o.call(t)},n:function n(){var t=o.next();return u=t.done,t},e:function e(t){l=!0,c=t},f:function f(){try{u||null==o.return||o.return()}finally{if(l)throw c}}}}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var o=0,i=new Array(r);o<r;o++)i[o]=t[o];return i}function Application_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function Application_setPrototypeOf(t,r){return Application_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},Application_setPrototypeOf(t,r)}function Application_createSuper(t){var r=function Application_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var o,i=Application_getPrototypeOf(t);if(r){var a=Application_getPrototypeOf(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return Application_possibleConstructorReturn(this,o)}}function Application_possibleConstructorReturn(t,r){if(r&&("object"===Application_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function Application_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Application_getPrototypeOf(t){return Application_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},Application_getPrototypeOf(t)}var g=function makeLog(t){return __nested_webpack_require_122241__(1227)(t)}("Application"),_=function(t){!function Application_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),r&&Application_setPrototypeOf(t,r)}(Application,t);var o=Application_createSuper(Application);function Application(){var t;return function Application_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Application),(t=o.call(this,{defaultScope:"Transient",autoBindInjectable:!0,skipBaseClassChecks:!0})).providers=[],t.loaded={},t.booted=!1,t.started=!1,t.singleton("events",i).addBindingGetter("events"),t.events.any((function(t){for(var r=arguments.length,o=new Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return g(t," arguments: ",o)})),t}return function Application_createClass(t,r,o){return r&&Application_defineProperties(t.prototype,r),o&&Application_defineProperties(t,o),t}(Application,[{key:"isBooted",value:function isBooted(){return this.booted}},{key:"isStarted",value:function isStarted(){return this.started}},{key:"initialize",value:function initialize(){var t,r,o,i,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return __awaiter(this,void 0,void 0,u().mark((function _callee(){return u().wrap((function _callee$(c){for(;;)switch(c.prev=c.next){case 0:return a=Object.assign(Object.assign({providers:[]},a),{config:Object.assign(Object.assign(Object.assign({},v),a.config),{http:Object.assign(Object.assign(Object.assign({},v.http),(null===(t=a.config)||void 0===t?void 0:t.http)||{}),{etag:Object.assign(Object.assign({},v.http.etag),(null===(o=null===(r=a.config)||void 0===r?void 0:r.http)||void 0===o?void 0:o.etag)||{})}),streams:Object.assign(Object.assign({},v.streams),(null===(i=a.config)||void 0===i?void 0:i.streams)||{})})}),this.events.emit("Application:initialize",a),this.instance("config",d.asProxy(a.config)).addBindingGetter("config"),c.next=5,this.loadProviders(a.providers);case 5:return c.next=7,this.registerProviders(this.providers);case 7:return this.events.emit("Application:initialized",this),c.abrupt("return",this);case 9:case"end":return c.stop()}}),_callee,this)})))}},{key:"boot",value:function boot(){return __awaiter(this,void 0,void 0,u().mark((function _callee2(){var t,o,i,a=this;return u().wrap((function _callee2$(c){for(;;)switch(c.prev=c.next){case 0:if(!this.booted){c.next=2;break}return c.abrupt("return",this);case 2:this.events.emit("Application:boot",this),t=_createForOfIteratorHelper(this.providers),c.prev=4,i=u().mark((function _loop(){var t;return u().wrap((function _loop$(i){for(;;)switch(i.prev=i.next){case 0:if(t=o.value,a.events.emit("Application:bootProvider",t),!("boot"in t)||!0===Reflect.getMetadata("boot",t)){i.next=6;break}return Reflect.defineMetadata("boot",!0,t),i.next=6,a.loadAsync(new r.Ls((function(){return t.boot()})));case 6:a.events.emit("Application:bootedProvider",t);case 7:case"end":return i.stop()}}),_loop)})),t.s();case 7:if((o=t.n()).done){c.next=11;break}return c.delegateYield(i(),"t0",9);case 9:c.next=7;break;case 11:c.next=16;break;case 13:c.prev=13,c.t1=c.catch(4),t.e(c.t1);case 16:return c.prev=16,t.f(),c.finish(16);case 19:return this.booted=!0,this.events.emit("Application:booted",this),c.abrupt("return",this);case 22:case"end":return c.stop()}}),_callee2,this,[[4,13,16,19]])})))}},{key:"start",value:function start(){return __awaiter(this,void 0,void 0,u().mark((function _callee3(){return u().wrap((function _callee3$(t){for(;;)switch(t.prev=t.next){case 0:return this.events.emit("Application:start",this),this.events.emit("Application:started",this),t.abrupt("return",this);case 3:case"end":return t.stop()}}),_callee3,this)})))}},{key:"loadProviders",value:function loadProviders(t){return __awaiter(this,void 0,void 0,u().mark((function _callee5(){var r=this;return u().wrap((function _callee5$(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,Promise.all(t.map((function(t){return __awaiter(r,void 0,void 0,u().mark((function _callee4(){return u().wrap((function _callee4$(r){for(;;)switch(r.prev=r.next){case 0:return r.abrupt("return",this.loadProvider(t));case 1:case"end":return r.stop()}}),_callee4,this)})))})));case 2:return o.abrupt("return",this);case 3:case"end":return o.stop()}}),_callee5,this)})))}},{key:"loadProvider",value:function loadProvider(t){var r;return __awaiter(this,void 0,void 0,u().mark((function _callee6(){var o,i;return u().wrap((function _callee6$(a){for(;;)switch(a.prev=a.next){case 0:if(!((o=null!==(r=t.name)&&void 0!==r?r:t.constructor.name)in this.loaded)){a.next=3;break}return a.abrupt("return",this.loaded[o]);case 3:if(!("providers"in(i=new t(this)))||!0===Reflect.getMetadata("providers",i)){a.next=8;break}return Reflect.defineMetadata("providers",!0,i),a.next=8,this.loadProviders(i.providers);case 8:return this.events.emit("Application:loadProvider",t),this.loaded[o]=i,this.providers.push(i),this.events.emit("Application:loadedProvider",i),a.abrupt("return",i);case 13:case"end":return a.stop()}}),_callee6,this)})))}},{key:"registerProviders",value:function registerProviders(t){return __awaiter(this,void 0,void 0,u().mark((function _callee8(){var r=this;return u().wrap((function _callee8$(o){for(;;)switch(o.prev=o.next){case 0:return this.events.emit("Application:registerProviders",t),o.next=3,Promise.all(t.map((function(t){return __awaiter(r,void 0,void 0,u().mark((function _callee7(){return u().wrap((function _callee7$(r){for(;;)switch(r.prev=r.next){case 0:return r.abrupt("return",this.register(t));case 1:case"end":return r.stop()}}),_callee7,this)})))})));case 3:return this.events.emit("Application:registeredProviders",t),o.abrupt("return",this);case 5:case"end":return o.stop()}}),_callee8,this)})))}},{key:"register",value:function register(t){return __awaiter(this,void 0,void 0,u().mark((function _callee9(){var o;return u().wrap((function _callee9$(i){for(;;)switch(i.prev=i.next){case 0:if(!y(t)){i.next=6;break}return i.next=3,this.loadProvider(t);case 3:o=i.sent,i.next=7;break;case 6:o=t;case 7:if(this.events.emit("Application:registerProvider",t),!("register"in o)||!0===Reflect.getMetadata("register",o)){i.next=12;break}return Reflect.defineMetadata("register",!0,o),i.next=12,this.loadAsync(new r.Ls((function(){return o.register()})));case 12:return this.events.emit("Application:registeredProviders",o),i.abrupt("return",this);case 14:case"end":return i.stop()}}),_callee9,this)})))}},{key:"singleton",value:function singleton(t,r){return this.bind(t).to(r).inSingletonScope(),this}},{key:"binding",value:function binding(t,r){var o=this,i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],binding=this.bind(t).toDynamicValue((function(t){return r(o)}));return i?binding.inSingletonScope():binding.inTransientScope(),this}},{key:"instance",value:function instance(t,r){return this.bind(t).toConstantValue(r),this}},{key:"addBindingGetter",value:function addBindingGetter(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;r=r||t;var o=this;return Object.defineProperty(o,r,{get:function get(){return o.get(t)},configurable:!0,enumerable:!0}),this}}],[{key:"instance",get:function get(){return this._instance||(this._instance=new this),this._instance}},{key:"getInstance",value:function getInstance(){return this.instance}}]),Application}(r.W2),m=_.instance,b=(0,l.Z)(m).lazyInject;function Collection_typeof(t){return Collection_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Collection_typeof(t)}function Collection_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function Collection_possibleConstructorReturn(t,r){if(r&&("object"===Collection_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return Collection_assertThisInitialized(t)}function Collection_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _wrapNativeSuper(t){var r="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=function _wrapNativeSuper(t){if(null===t||!function _isNativeFunction(t){return-1!==Function.toString.call(t).indexOf("[native code]")}(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,Wrapper)}function Wrapper(){return _construct(t,arguments,Collection_getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(t.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),Collection_setPrototypeOf(Wrapper,t)},_wrapNativeSuper(t)}function _construct(t,r,o){return _construct=Collection_isNativeReflectConstruct()?Reflect.construct:function _construct(t,r,o){var i=[null];i.push.apply(i,r);var a=new(Function.bind.apply(t,i));return o&&Collection_setPrototypeOf(a,o.prototype),a},_construct.apply(null,arguments)}function Collection_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function Collection_setPrototypeOf(t,r){return Collection_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},Collection_setPrototypeOf(t,r)}function Collection_getPrototypeOf(t){return Collection_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},Collection_getPrototypeOf(t)}var w=function(t){!function Collection_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),r&&Collection_setPrototypeOf(t,r)}(Collection,t);var r=function Collection_createSuper(t){var r=Collection_isNativeReflectConstruct();return function _createSuperInternal(){var o,i=Collection_getPrototypeOf(t);if(r){var a=Collection_getPrototypeOf(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return Collection_possibleConstructorReturn(this,o)}}(Collection);function Collection(){var t;Collection_classCallCheck(this,Collection);for(var o=arguments.length,i=new Array(o),a=0;a<o;a++)i[a]=arguments[a];return t=r.call.apply(r,[this].concat(i)),Object.setPrototypeOf(Collection_assertThisInitialized(t),Array.prototype),t}return Collection}(_wrapNativeSuper(Array)),S=__nested_webpack_require_122241__(9669),C=__nested_webpack_require_122241__.n(S);function ETagCache_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var O=function(){function ETagCache(){!function ETagCache_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,ETagCache)}return function ETagCache_createClass(t,r,o){return r&&ETagCache_defineProperties(t.prototype,r),o&&ETagCache_defineProperties(t,o),t}(ETagCache,[{key:"manifestKey",get:function get(){return this.config.http.etag.manifestKey}},{key:"get",value:function get(t){return this.storage.get(t)}},{key:"set",value:function set(t,r,o){return this.addToUuidManifest(t),this.storage.set(t,{etag:r,value:o})}},{key:"reset",value:function reset(){var t=this;this.getUuidManifest().forEach((function(r){return t.storage.unset(r)}))}},{key:"getUuidManifest",value:function getUuidManifest(){return this.storage.has(this.manifestKey)||this.storage.set(this.manifestKey,[]),this.storage.get(this.manifestKey,[])}},{key:"addToUuidManifest",value:function addToUuidManifest(t){var r=this.getUuidManifest();r.push(t),this.storage.set(this.manifestKey,r)}}]),ETagCache}();function ETag_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}__decorate([b("storage")],O.prototype,"storage",void 0),__decorate([b("config")],O.prototype,"config",void 0),O=__decorate([(0,r.b2)()],O);var T=function byLowerCase(t){return function(r){return E(r)===t}},E=function toLowerCase(t){return t.toLowerCase()},P=function getKeys(t){return Object.keys(t)},A=function isCacheableMethod(t){return~["GET","HEAD"].indexOf(t.method.toUpperCase())},x=function getBase64UrlFromConfig(t){return btoa(t.url)},I=function(){function ETag(t){var r=this;!function ETag_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,ETag),this.axios=t,this.request=null,this.response=null,this.enabled=!1,Object.defineProperty(t,"etag",{get:function get(){return r},configurable:!0,enumerable:!0})}return function ETag_createClass(t,r,o){return r&&ETag_defineProperties(t.prototype,r),o&&ETag_defineProperties(t,o),t}(ETag,[{key:"enableEtag",value:function enableEtag(){this.enabled||(this.request=this.axios.interceptors.request.use(this.getRequestInterceptor()),this.response=this.axios.interceptors.response.use(this.getResponseInterceptor(),this.getResponseErrorInterceptor()),this.enabled=!0)}},{key:"disableEtag",value:function disableEtag(){this.enabled&&(this.axios.interceptors.request.eject(this.request),this.axios.interceptors.response.eject(this.response),this.enabled=!1)}},{key:"isEnabled",value:function isEnabled(){return this.enabled}},{key:"getCacheByAxiosConfig",value:function getCacheByAxiosConfig(t){return this.cache.get(x(t))}},{key:"getRequestInterceptor",value:function getRequestInterceptor(){var t=this;return function(r){if(A(r)){var o=x(r),i=t.cache.get(o);i&&(r.headers=Object.assign(Object.assign({},r.headers),{"If-None-Match":i.etag}))}return r}}},{key:"getResponseInterceptor",value:function getResponseInterceptor(){var t=this;return function(r){if(A(r.config)){var o=function getHeaderCaseInsensitive(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return r[P(r).find(T(t))]}("etag",r.headers);o&&t.cache.set(x(r.config),o,r.data)}return r}}},{key:"getResponseErrorInterceptor",value:function getResponseErrorInterceptor(){var t=this;return function(r){if(r.response&&304===r.response.status){var o=t.getCacheByAxiosConfig(r.response.config);if(!o)return Promise.reject(r);var i=r.response;return i.status=200,i.data=o.value,Promise.resolve(i)}return Promise.reject(r)}}}]),ETag}();function HttpServiceProvider_typeof(t){return HttpServiceProvider_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},HttpServiceProvider_typeof(t)}function HttpServiceProvider_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function HttpServiceProvider_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function HttpServiceProvider_setPrototypeOf(t,r){return HttpServiceProvider_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},HttpServiceProvider_setPrototypeOf(t,r)}function HttpServiceProvider_createSuper(t){var r=function HttpServiceProvider_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var o,i=HttpServiceProvider_getPrototypeOf(t);if(r){var a=HttpServiceProvider_getPrototypeOf(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return HttpServiceProvider_possibleConstructorReturn(this,o)}}function HttpServiceProvider_possibleConstructorReturn(t,r){if(r&&("object"===HttpServiceProvider_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function HttpServiceProvider_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function HttpServiceProvider_getPrototypeOf(t){return HttpServiceProvider_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},HttpServiceProvider_getPrototypeOf(t)}__decorate([b("http.etag.cache")],I.prototype,"cache",void 0),I=__decorate([(0,r.b2)()],I);var k=function(t){!function HttpServiceProvider_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),r&&HttpServiceProvider_setPrototypeOf(t,r)}(HttpServiceProvider,t);var r=HttpServiceProvider_createSuper(HttpServiceProvider);function HttpServiceProvider(){return HttpServiceProvider_classCallCheck(this,HttpServiceProvider),r.apply(this,arguments)}return function HttpServiceProvider_createClass(t,r,o){return r&&HttpServiceProvider_defineProperties(t.prototype,r),o&&HttpServiceProvider_defineProperties(t,o),t}(HttpServiceProvider,[{key:"register",value:function register(){this.registerAxios()}},{key:"boot",value:function boot(){this.bootETag()}},{key:"registerAxios",value:function registerAxios(){var t,r,o,i=Object.assign(Object.assign({},this.app.config.http),{params:Object.assign({},(null===(t=this.app.config.http)||void 0===t?void 0:t.params)||{}),headers:Object.assign({"X-Requested-With":"XMLHttpRequest"},(null===(r=this.app.config.http)||void 0===r?void 0:r.headers)||{})}),a=this.app.config.streams;if(null===(o=null==a?void 0:a.cache)||void 0===o||o.enabled,(null==a?void 0:a.xdebug)&&(i.headers.Cookie="XDEBUG_SESSION=start",i.params.XDEBUG_SESSION="PHPSTORM"),null==a?void 0:a.authentication){var c=a.authentication,u=c.type,l=c.basic,p=c.token;"basic"===u?i.auth={username:l.username,password:l.password}:"token"===u&&(i.headers.Authorization="Bearer "+p)}var d=C().create(i);this.app.instance("axios",C()),this.app.instance("http",d).addBindingGetter("http")}},{key:"bootETag",value:function bootETag(){if(this.app.config.http.etag.enabled){var t=this.app.http;this.app.singleton("http.etag.cache",O),this.app.instance("http.etag",new I(t)),t.etag.enableEtag()}}}]),HttpServiceProvider}(h),N=__nested_webpack_require_122241__(6961),R=__nested_webpack_require_122241__.n(N);function Transformer_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var j=function(){function Transformer(){!function Transformer_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Transformer)}return function Transformer_createClass(t,r,o){return r&&Transformer_defineProperties(t.prototype,r),o&&Transformer_defineProperties(t,o),t}(Transformer,null,[{key:"prefixesLength",get:function get(){return this.typePrefix.length+5}},{key:"compress",value:function compress(t){return this.typePrefix+"lz-s|"+R().compressToUTF16(t)}},{key:"decompress",value:function decompress(t){var r,o;return t.length<this.prefixesLength||(r=t.substr(0,this.prefixesLength-1),o=t.substring(this.prefixesLength),r===this.typePrefix+"lz-s"&&(t=R().decompressFromUTF16(o))),t}},{key:"encode",value:function encode(t){return"[object Date]"===Object.prototype.toString.call(t)?this.typePrefix+"date|"+t.getTime().toString():"[object RegExp]"===Object.prototype.toString.call(t)?this.typePrefix+"expr|"+t.source:"number"==typeof t?this.typePrefix+"numb|"+t:"boolean"==typeof t?this.typePrefix+"bool|"+(t?"1":"0"):"string"==typeof t?this.typePrefix+"strn|"+t:t===Object(t)?this.typePrefix+"objt|"+JSON.stringify(t):t}},{key:"decode",value:function decode(t){var r,o;if(t.length<this.prefixesLength)return t;switch(r=t.substr(0,this.prefixesLength-1),o=t.substring(this.prefixesLength),r){case this.typePrefix+"date":return new Date(parseInt(o));case this.typePrefix+"expr":return new RegExp(o);case this.typePrefix+"numb":return Number(o);case this.typePrefix+"bool":return Boolean("1"===o);case this.typePrefix+"strn":return""+o;case this.typePrefix+"objt":return JSON.parse(o);default:return t}}}]),Transformer}();function StorageAdapter_typeof(t){return StorageAdapter_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},StorageAdapter_typeof(t)}function StorageAdapter_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function StorageAdapter_setPrototypeOf(t,r){return StorageAdapter_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},StorageAdapter_setPrototypeOf(t,r)}function StorageAdapter_createSuper(t){var r=function StorageAdapter_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var o,i=StorageAdapter_getPrototypeOf(t);if(r){var a=StorageAdapter_getPrototypeOf(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return StorageAdapter_possibleConstructorReturn(this,o)}}function StorageAdapter_possibleConstructorReturn(t,r){if(r&&("object"===StorageAdapter_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function StorageAdapter_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function StorageAdapter_getPrototypeOf(t){return StorageAdapter_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},StorageAdapter_getPrototypeOf(t)}j.typePrefix="__ls_";var M=function(t){!function StorageAdapter_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),r&&StorageAdapter_setPrototypeOf(t,r)}(StorageAdapter,t);var r=StorageAdapter_createSuper(StorageAdapter);function StorageAdapter(t){var o;return function StorageAdapter_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,StorageAdapter),(o=r.call(this,{delimiter:":",wildcard:!0})).storage=t,o}return function StorageAdapter_createClass(t,r,o){return r&&StorageAdapter_defineProperties(t.prototype,r),o&&StorageAdapter_defineProperties(t,o),t}(StorageAdapter,[{key:"get",value:function get(t,r){if(!this.has(t))return r;var o=this.storage.getItem(t);return o=j.decompress(o),j.decode(o)}},{key:"has",value:function has(t){return!!this.storage.getItem(t)}},{key:"set",value:function set(t,r){var o=j.encode(r);return o=j.compress(o),this.storage.setItem(t,o),this.emit("set:"+t,r,t),this}},{key:"unset",value:function unset(t){return this.storage.removeItem(t),this.emit("unset:"+t),this}},{key:"clear",value:function clear(){return this.storage.clear(),this.emit("clear"),this}}]),StorageAdapter}(t.EventEmitter2);function LocalStorageAdapter_typeof(t){return LocalStorageAdapter_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},LocalStorageAdapter_typeof(t)}function LocalStorageAdapter_setPrototypeOf(t,r){return LocalStorageAdapter_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},LocalStorageAdapter_setPrototypeOf(t,r)}function LocalStorageAdapter_createSuper(t){var r=function LocalStorageAdapter_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var o,i=LocalStorageAdapter_getPrototypeOf(t);if(r){var a=LocalStorageAdapter_getPrototypeOf(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return LocalStorageAdapter_possibleConstructorReturn(this,o)}}function LocalStorageAdapter_possibleConstructorReturn(t,r){if(r&&("object"===LocalStorageAdapter_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function LocalStorageAdapter_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function LocalStorageAdapter_getPrototypeOf(t){return LocalStorageAdapter_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},LocalStorageAdapter_getPrototypeOf(t)}var L=function(t){!function LocalStorageAdapter_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),r&&LocalStorageAdapter_setPrototypeOf(t,r)}(LocalStorageAdapter,t);var r=LocalStorageAdapter_createSuper(LocalStorageAdapter);function LocalStorageAdapter(){return function LocalStorageAdapter_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,LocalStorageAdapter),r.call(this,window.localStorage)}return LocalStorageAdapter}(M=__decorate([(0,r.b2)()],M));function SessionStorageAdapter_typeof(t){return SessionStorageAdapter_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},SessionStorageAdapter_typeof(t)}function SessionStorageAdapter_setPrototypeOf(t,r){return SessionStorageAdapter_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},SessionStorageAdapter_setPrototypeOf(t,r)}function SessionStorageAdapter_createSuper(t){var r=function SessionStorageAdapter_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var o,i=SessionStorageAdapter_getPrototypeOf(t);if(r){var a=SessionStorageAdapter_getPrototypeOf(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return SessionStorageAdapter_possibleConstructorReturn(this,o)}}function SessionStorageAdapter_possibleConstructorReturn(t,r){if(r&&("object"===SessionStorageAdapter_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function SessionStorageAdapter_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function SessionStorageAdapter_getPrototypeOf(t){return SessionStorageAdapter_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},SessionStorageAdapter_getPrototypeOf(t)}var B=function(t){!function SessionStorageAdapter_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),r&&SessionStorageAdapter_setPrototypeOf(t,r)}(SessionStorageAdapter,t);var r=SessionStorageAdapter_createSuper(SessionStorageAdapter);function SessionStorageAdapter(){return function SessionStorageAdapter_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,SessionStorageAdapter),r.call(this,window.sessionStorage)}return SessionStorageAdapter}(M);function StorageServiceProvider_typeof(t){return StorageServiceProvider_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},StorageServiceProvider_typeof(t)}function StorageServiceProvider_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function StorageServiceProvider_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function StorageServiceProvider_setPrototypeOf(t,r){return StorageServiceProvider_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},StorageServiceProvider_setPrototypeOf(t,r)}function StorageServiceProvider_createSuper(t){var r=function StorageServiceProvider_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var o,i=StorageServiceProvider_getPrototypeOf(t);if(r){var a=StorageServiceProvider_getPrototypeOf(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return StorageServiceProvider_possibleConstructorReturn(this,o)}}function StorageServiceProvider_possibleConstructorReturn(t,r){if(r&&("object"===StorageServiceProvider_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function StorageServiceProvider_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function StorageServiceProvider_getPrototypeOf(t){return StorageServiceProvider_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},StorageServiceProvider_getPrototypeOf(t)}var D=function(t){!function StorageServiceProvider_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),r&&StorageServiceProvider_setPrototypeOf(t,r)}(StorageServiceProvider,t);var r=StorageServiceProvider_createSuper(StorageServiceProvider);function StorageServiceProvider(){return StorageServiceProvider_classCallCheck(this,StorageServiceProvider),r.apply(this,arguments)}return function StorageServiceProvider_createClass(t,r,o){return r&&StorageServiceProvider_defineProperties(t.prototype,r),o&&StorageServiceProvider_defineProperties(t,o),t}(StorageServiceProvider,[{key:"register",value:function register(){this.app.singleton("storage.local",L),this.app.singleton("storage.session",B),this.app.bind("storage").toDynamicValue((function(t){return t.container.get("storage.local")})),this.app.addBindingGetter("storage")}}]),StorageServiceProvider}(h);var U=function Field(t){!function Field_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Field),Object.assign(this,t)};function Entry_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function Entry_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var G=function(){function Entry(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Entry_classCallCheck(this,Entry),this._stream=t,this._data=r,this._fresh=o;var i=new Proxy(this,{get:function get(t,r,o){return Reflect.has(t,r)?Reflect.get(t,r,o):Reflect.has(t._data,r)?Reflect.get(t._data,r):void 0},set:function set(t,r,o,i){return Reflect.has(t,r)?Reflect.set(t,r,o,i):Reflect.set(t._data,r,o)}});return i}return function Entry_createClass(t,r,o){return r&&Entry_defineProperties(t.prototype,r),o&&Entry_defineProperties(t,o),t}(Entry,[{key:"stream",get:function get(){return this._stream}},{key:"save",value:function save(){return __awaiter(this,void 0,void 0,u().mark((function _callee(){return u().wrap((function _callee$(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,!this._fresh){t.next=5;break}return t.next=4,this.http.postEntry(this._stream.id,this._data);case 4:case 7:return t.abrupt("return",!0);case 5:return t.next=7,this.http.patchEntry(this._stream.id,this._data.id,this._data);case 10:return t.prev=10,t.t0=t.catch(0),t.abrupt("return",!1);case 13:case"end":return t.stop()}}),_callee,this,[[0,10]])})))}},{key:"validator",value:function validator(){}}]),Entry}();function EntryCollection_typeof(t){return EntryCollection_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},EntryCollection_typeof(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t))return EntryCollection_arrayLikeToArray(t)}(t)||function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function EntryCollection_unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return EntryCollection_arrayLikeToArray(t,r);var o=Object.prototype.toString.call(t).slice(8,-1);"Object"===o&&t.constructor&&(o=t.constructor.name);if("Map"===o||"Set"===o)return Array.from(t);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return EntryCollection_arrayLikeToArray(t,r)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function EntryCollection_arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var o=0,i=new Array(r);o<r;o++)i[o]=t[o];return i}function EntryCollection_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function EntryCollection_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function EntryCollection_createClass(t,r,o){return r&&EntryCollection_defineProperties(t.prototype,r),o&&EntryCollection_defineProperties(t,o),t}function EntryCollection_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),r&&EntryCollection_setPrototypeOf(t,r)}function EntryCollection_setPrototypeOf(t,r){return EntryCollection_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},EntryCollection_setPrototypeOf(t,r)}function EntryCollection_createSuper(t){var r=function EntryCollection_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var o,i=EntryCollection_getPrototypeOf(t);if(r){var a=EntryCollection_getPrototypeOf(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return EntryCollection_possibleConstructorReturn(this,o)}}function EntryCollection_possibleConstructorReturn(t,r){if(r&&("object"===EntryCollection_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function EntryCollection_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function EntryCollection_getPrototypeOf(t){return EntryCollection_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},EntryCollection_getPrototypeOf(t)}__decorate([b("streams.http")],G.prototype,"http",void 0);var W=function(t){EntryCollection_inherits(EntryCollection,t);var r=EntryCollection_createSuper(EntryCollection);function EntryCollection(t,o,i){var a;return EntryCollection_classCallCheck(this,EntryCollection),(a=r.call.apply(r,[this].concat(_toConsumableArray(t)))).meta=o,a.links=i,a}return EntryCollection_createClass(EntryCollection,null,[{key:"fromResponse",value:function fromResponse(t,r){return new EntryCollection(Object.values(t.data).map((function(t){return new G(r,t,!1)})),t.meta,t.links)}}]),EntryCollection}(w),q=function(t){EntryCollection_inherits(PaginatedEntryCollection,t);var r=EntryCollection_createSuper(PaginatedEntryCollection);function PaginatedEntryCollection(t,o,i){var a;return EntryCollection_classCallCheck(this,PaginatedEntryCollection),(a=r.call.apply(r,[this].concat(_toConsumableArray(t)))).meta=o,a.links=i,a}return EntryCollection_createClass(PaginatedEntryCollection,null,[{key:"fromResponse",value:function fromResponse(t,r){return new PaginatedEntryCollection(Object.values(t.data).map((function(t){return new G(r,t,!1)})),t.meta,t.links)}}]),PaginatedEntryCollection}(w);function Criteria_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var V=[">","<","==","!=",">=","<=","!<","!>","<>"],H=["BETWEEN","EXISTS","OR","AND","NOT","IN","ALL","ANY","LIKE","IS NULL","UNIQUE"],K=[].concat(V).concat(H),$=function isOperator(t){return K.includes(t)},z=function(){function Criteria(t){!function Criteria_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Criteria),this.stream=t,this.parameters=[]}return function Criteria_createClass(t,r,o){return r&&Criteria_defineProperties(t.prototype,r),o&&Criteria_defineProperties(t,o),t}(Criteria,[{key:"find",value:function find(t){return __awaiter(this,void 0,void 0,u().mark((function _callee(){return u().wrap((function _callee$(r){for(;;)switch(r.prev=r.next){case 0:return r.abrupt("return",this.where("id",t).first());case 1:case"end":return r.stop()}}),_callee,this)})))}},{key:"first",value:function first(){return __awaiter(this,void 0,void 0,u().mark((function _callee2(){var t;return u().wrap((function _callee2$(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,this.limit(1).get();case 2:return t=r.sent,r.abrupt("return",t[0]);case 4:case"end":return r.stop()}}),_callee2,this)})))}},{key:"cache",value:function cache(){return this}},{key:"orderBy",value:function orderBy(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"desc";return this.addParameter("orderBy",[t,r]),this}},{key:"limit",value:function limit(t){return this.addParameter("limit",t),this}},{key:"where",value:function where(){var t,r,o,i;if(2===arguments.length?(t=arguments.length<=0?void 0:arguments[0],r="==",o=arguments.length<=1?void 0:arguments[1]):3===arguments.length?(t=arguments.length<=0?void 0:arguments[0],r=arguments.length<=1?void 0:arguments[1],o=arguments.length<=2?void 0:arguments[2]):4===arguments.length&&(t=arguments.length<=0?void 0:arguments[0],r=arguments.length<=1?void 0:arguments[1],o=arguments.length<=2?void 0:arguments[2],i=arguments.length<=3?void 0:arguments[3]),!$(r))throw new Error('Criteria where() operator "'.concat(r,'" not valid '));return this.addParameter("where",[t,r,o,i]),this}},{key:"orWhere",value:function orWhere(){var t,r,o;if(2===arguments.length?(t=arguments.length<=0?void 0:arguments[0],r="==",o=arguments.length<=1?void 0:arguments[1]):(t=arguments.length<=0?void 0:arguments[0],r=arguments.length<=1?void 0:arguments[1],o=arguments.length<=2?void 0:arguments[2]),!$(r))throw new Error('Criteria orWhere() operator "'.concat(r,'" not valid '));return this.addParameter("where",[t,r,o,"or"]),this}},{key:"get",value:function get(){return __awaiter(this,void 0,void 0,u().mark((function _callee3(){var t,r;return u().wrap((function _callee3$(o){for(;;)switch(o.prev=o.next){case 0:return t=this.compileStatements(),o.next=3,this.http.getEntries(this.stream.id,{query:t},{});case 3:return r=o.sent,o.abrupt("return",W.fromResponse(r,this.stream));case 5:case"end":return o.stop()}}),_callee3,this)})))}},{key:"create",value:function create(t){return __awaiter(this,void 0,void 0,u().mark((function _callee4(){var r;return u().wrap((function _callee4$(o){for(;;)switch(o.prev=o.next){case 0:return r=this.newInstance(t),o.next=3,r.save();case 3:return o.abrupt("return",r);case 4:case"end":return o.stop()}}),_callee4,this)})))}},{key:"save",value:function save(t){return __awaiter(this,void 0,void 0,u().mark((function _callee5(){var r;return u().wrap((function _callee5$(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,t.save();case 2:return r=o.sent,o.abrupt("return",r);case 4:case"end":return o.stop()}}),_callee5)})))}},{key:"delete",value:function _delete(){return this}},{key:"paginate",value:function paginate(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:100,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return __awaiter(this,void 0,void 0,u().mark((function _callee6(){var o,i;return u().wrap((function _callee6$(a){for(;;)switch(a.prev=a.next){case 0:return o=this.compileStatements(),a.next=3,this.http.getEntries(this.stream.id,{query:o},{paginate:!0,per_page:t,page:r});case 3:return i=a.sent,a.abrupt("return",q.fromResponse(i,this.stream));case 5:case"end":return a.stop()}}),_callee6,this)})))}},{key:"newInstance",value:function newInstance(t){return new G(this.stream,t,!0)}},{key:"getParameters",value:function getParameters(){return this.parameters}},{key:"setParameters",value:function setParameters(t){return this.parameters=t,this}},{key:"addParameter",value:function addParameter(t,r){return this.parameters.push({name:t,value:r}),this}},{key:"compileStatements",value:function compileStatements(){return this.parameters.map((function(t){return function _defineProperty(t,r,o){return r in t?Object.defineProperty(t,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[r]=o,t}({},t.name,function ensureArray(t){return Array.isArray(t)?t:[t]}(t.value))}))}}]),Criteria}();function Streams_Repository_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}__decorate([b("streams.http")],z.prototype,"http",void 0),z=__decorate([(0,r.b2)()],z);var J=function(){function Repository(t){!function Streams_Repository_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Repository),this.stream=t}return function Streams_Repository_createClass(t,r,o){return r&&Streams_Repository_defineProperties(t.prototype,r),o&&Streams_Repository_defineProperties(t,o),t}(Repository,[{key:"all",value:function all(){return __awaiter(this,void 0,void 0,u().mark((function _callee(){var t,r,o=this;return u().wrap((function _callee$(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,this.http.getEntries(this.stream.id);case 2:return t=i.sent,r=t.data.map((function(t){return new G(o.stream,t,!1)})),i.abrupt("return",new W(r,t.meta,t.links));case 5:case"end":return i.stop()}}),_callee,this)})))}},{key:"find",value:function find(t){return __awaiter(this,void 0,void 0,u().mark((function _callee2(){var r;return u().wrap((function _callee2$(o){for(;;)switch(o.prev=o.next){case 0:return r=this.stream.entries(),o.abrupt("return",r.where("id",t).first());case 2:case"end":return o.stop()}}),_callee2,this)})))}},{key:"findAll",value:function findAll(t){return __awaiter(this,void 0,void 0,u().mark((function _callee3(){var r;return u().wrap((function _callee3$(o){for(;;)switch(o.prev=o.next){case 0:return r=this.stream.entries(),o.abrupt("return",r.where("id","IN",t).get());case 2:case"end":return o.stop()}}),_callee3,this)})))}},{key:"findBy",value:function findBy(t,r){return __awaiter(this,void 0,void 0,u().mark((function _callee4(){var o;return u().wrap((function _callee4$(i){for(;;)switch(i.prev=i.next){case 0:return o=this.stream.entries(),i.abrupt("return",o.where(t,r).first());case 2:case"end":return i.stop()}}),_callee4,this)})))}},{key:"findAllWhere",value:function findAllWhere(t,r){return __awaiter(this,void 0,void 0,u().mark((function _callee5(){var o;return u().wrap((function _callee5$(i){for(;;)switch(i.prev=i.next){case 0:return o=this.stream.entries(),i.abrupt("return",o.where(t,r).get());case 2:case"end":return i.stop()}}),_callee5,this)})))}},{key:"create",value:function create(t){return __awaiter(this,void 0,void 0,u().mark((function _callee6(){var r;return u().wrap((function _callee6$(o){for(;;)switch(o.prev=o.next){case 0:return r=this.newCriteria().newInstance(t),o.next=3,r.save();case 3:return o.abrupt("return",r);case 4:case"end":return o.stop()}}),_callee6,this)})))}},{key:"save",value:function save(t){return __awaiter(this,void 0,void 0,u().mark((function _callee7(){var r;return u().wrap((function _callee7$(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,t.save();case 2:return r=o.sent,o.abrupt("return",r);case 4:case"end":return o.stop()}}),_callee7)})))}},{key:"delete",value:function _delete(t){return __awaiter(this,void 0,void 0,u().mark((function _callee8(){return u().wrap((function _callee8$(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,this.http.deleteEntry(this.stream.id,t.id);case 2:return r.abrupt("return",!0);case 3:case"end":return r.stop()}}),_callee8,this)})))}},{key:"truncate",value:function truncate(){return this}},{key:"newInstance",value:function newInstance(t){return this.newCriteria().newInstance(t)}},{key:"newCriteria",value:function newCriteria(){return new z(this.stream)}}]),Repository}();function _slicedToArray(t,r){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,r){var o=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==o)return;var i,a,c=[],u=!0,l=!1;try{for(o=o.call(t);!(u=(i=o.next()).done)&&(c.push(i.value),!r||c.length!==r);u=!0);}catch(t){l=!0,a=t}finally{try{u||null==o.return||o.return()}finally{if(l)throw a}}return c}(t,r)||function Stream_unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return Stream_arrayLikeToArray(t,r);var o=Object.prototype.toString.call(t).slice(8,-1);"Object"===o&&t.constructor&&(o=t.constructor.name);if("Map"===o||"Set"===o)return Array.from(t);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return Stream_arrayLikeToArray(t,r)}(t,r)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Stream_arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var o=0,i=new Array(r);o<r;o++)i[o]=t[o];return i}function Stream_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}__decorate([b("streams.http")],J.prototype,"http",void 0);var Y=function(){function Stream(t,r,o){!function Stream_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Stream),this.meta=r,this.links=o,t.fields&&(this.fields=new Map(Object.entries(t.fields).map((function(t){var r=_slicedToArray(t,2),o=r[0],i=r[1];return[o,new U(i)]}))),delete t.fields),Object.assign(this,t)}return function Stream_createClass(t,r,o){return r&&Stream_defineProperties(t.prototype,r),o&&Stream_defineProperties(t,o),t}(Stream,[{key:"repository",get:function get(){return this._repository||(this._repository=new J(this)),this._repository}},{key:"entries",value:function entries(){return this.repository.newCriteria()}}]),Stream}();function FieldCollection_typeof(t){return FieldCollection_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},FieldCollection_typeof(t)}function FieldCollection_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function FieldCollection_setPrototypeOf(t,r){return FieldCollection_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},FieldCollection_setPrototypeOf(t,r)}function FieldCollection_createSuper(t){var r=function FieldCollection_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var o,i=FieldCollection_getPrototypeOf(t);if(r){var a=FieldCollection_getPrototypeOf(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return FieldCollection_possibleConstructorReturn(this,o)}}function FieldCollection_possibleConstructorReturn(t,r){if(r&&("object"===FieldCollection_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function FieldCollection_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function FieldCollection_getPrototypeOf(t){return FieldCollection_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},FieldCollection_getPrototypeOf(t)}var X=function(t){!function FieldCollection_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),r&&FieldCollection_setPrototypeOf(t,r)}(FieldCollection,t);var r=FieldCollection_createSuper(FieldCollection);function FieldCollection(){return FieldCollection_classCallCheck(this,FieldCollection),r.apply(this,arguments)}return FieldCollection}(w);function Http_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var Q=function(){function Http(){!function Http_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Http)}return function Http_createClass(t,r,o){return r&&Http_defineProperties(t.prototype,r),o&&Http_defineProperties(t,o),t}(Http,[{key:"getStreams",value:function getStreams(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return __awaiter(this,void 0,void 0,u().mark((function _callee(){return u().wrap((function _callee$(o){for(;;)switch(o.prev=o.next){case 0:return r.params=t,o.abrupt("return",this.get("/streams",r));case 2:case"end":return o.stop()}}),_callee,this)})))}},{key:"postStream",value:function postStream(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return __awaiter(this,void 0,void 0,u().mark((function _callee2(){return u().wrap((function _callee2$(o){for(;;)switch(o.prev=o.next){case 0:return r.data=t,o.abrupt("return",this.post("/streams",t,r));case 2:case"end":return o.stop()}}),_callee2,this)})))}},{key:"getStream",value:function getStream(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return __awaiter(this,void 0,void 0,u().mark((function _callee3(){return u().wrap((function _callee3$(i){for(;;)switch(i.prev=i.next){case 0:return o.params=r,i.abrupt("return",this.get("/streams/".concat(t),o));case 2:case"end":return i.stop()}}),_callee3,this)})))}},{key:"patchStream",value:function patchStream(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return __awaiter(this,void 0,void 0,u().mark((function _callee4(){return u().wrap((function _callee4$(i){for(;;)switch(i.prev=i.next){case 0:return o.params=r,i.abrupt("return",this.patch("/streams/".concat(t),o));case 2:case"end":return i.stop()}}),_callee4,this)})))}},{key:"putStream",value:function putStream(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return __awaiter(this,void 0,void 0,u().mark((function _callee5(){return u().wrap((function _callee5$(i){for(;;)switch(i.prev=i.next){case 0:return o.params=r,i.abrupt("return",this.put("/streams/".concat(t),o));case 2:case"end":return i.stop()}}),_callee5,this)})))}},{key:"deleteStream",value:function deleteStream(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return __awaiter(this,void 0,void 0,u().mark((function _callee6(){return u().wrap((function _callee6$(o){for(;;)switch(o.prev=o.next){case 0:return o.abrupt("return",this.delete("/streams/".concat(t),r));case 1:case"end":return o.stop()}}),_callee6,this)})))}},{key:"getEntries",value:function getEntries(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return __awaiter(this,void 0,void 0,u().mark((function _callee7(){return u().wrap((function _callee7$(a){for(;;)switch(a.prev=a.next){case 0:return i.data=r,i.params=o,a.abrupt("return",this.get("/streams/".concat(t,"/entries"),Object.assign(Object.assign({},i),{responseType:"json",headers:{"Content-Type":"application/json"}})));case 3:case"end":return a.stop()}}),_callee7,this)})))}},{key:"postEntry",value:function postEntry(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return __awaiter(this,void 0,void 0,u().mark((function _callee8(){return u().wrap((function _callee8$(i){for(;;)switch(i.prev=i.next){case 0:return o.data=r,i.abrupt("return",this.post("/streams/".concat(t,"/entries"),r,o));case 2:case"end":return i.stop()}}),_callee8,this)})))}},{key:"getEntry",value:function getEntry(t,r){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return __awaiter(this,void 0,void 0,u().mark((function _callee9(){return u().wrap((function _callee9$(i){for(;;)switch(i.prev=i.next){case 0:return i.abrupt("return",this.get("/streams/".concat(t,"/entries/").concat(r),o));case 1:case"end":return i.stop()}}),_callee9,this)})))}},{key:"patchEntry",value:function patchEntry(t,r){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return __awaiter(this,void 0,void 0,u().mark((function _callee10(){return u().wrap((function _callee10$(a){for(;;)switch(a.prev=a.next){case 0:return i.data=o,a.abrupt("return",this.patch("/streams/".concat(t,"/entries/").concat(r),i));case 2:case"end":return a.stop()}}),_callee10,this)})))}},{key:"putEntry",value:function putEntry(t,r){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return __awaiter(this,void 0,void 0,u().mark((function _callee11(){return u().wrap((function _callee11$(a){for(;;)switch(a.prev=a.next){case 0:return i.data=o,a.abrupt("return",this.put("/streams/".concat(t,"/entries/").concat(r),i));case 2:case"end":return a.stop()}}),_callee11,this)})))}},{key:"deleteEntry",value:function deleteEntry(t,r){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return __awaiter(this,void 0,void 0,u().mark((function _callee12(){return u().wrap((function _callee12$(i){for(;;)switch(i.prev=i.next){case 0:return i.abrupt("return",this.patch("/streams/".concat(t,"/entries/").concat(r),o));case 1:case"end":return i.stop()}}),_callee12,this)})))}},{key:"getUri",value:function getUri(t){return this.axios.getUri(t)}},{key:"get",value:function get(t,r){return __awaiter(this,void 0,void 0,u().mark((function _callee13(){return u().wrap((function _callee13$(o){for(;;)switch(o.prev=o.next){case 0:return o.abrupt("return",this.request(Object.assign({url:t,method:"GET"},r||{})));case 1:case"end":return o.stop()}}),_callee13,this)})))}},{key:"delete",value:function _delete(t,r){return __awaiter(this,void 0,void 0,u().mark((function _callee14(){return u().wrap((function _callee14$(o){for(;;)switch(o.prev=o.next){case 0:return o.abrupt("return",this.request(Object.assign({url:t,method:"DELETE"},r||{})));case 1:case"end":return o.stop()}}),_callee14,this)})))}},{key:"head",value:function head(t,r){return __awaiter(this,void 0,void 0,u().mark((function _callee15(){return u().wrap((function _callee15$(o){for(;;)switch(o.prev=o.next){case 0:return o.abrupt("return",this.request(Object.assign({url:t,method:"HEAD"},r||{})));case 1:case"end":return o.stop()}}),_callee15,this)})))}},{key:"options",value:function options(t,r){return __awaiter(this,void 0,void 0,u().mark((function _callee16(){return u().wrap((function _callee16$(o){for(;;)switch(o.prev=o.next){case 0:return o.abrupt("return",this.request(Object.assign({url:t,method:"OPTIONS"},r||{})));case 1:case"end":return o.stop()}}),_callee16,this)})))}},{key:"post",value:function post(t,r,o){return __awaiter(this,void 0,void 0,u().mark((function _callee17(){return u().wrap((function _callee17$(i){for(;;)switch(i.prev=i.next){case 0:return i.abrupt("return",this.request(Object.assign({url:t,method:"POST",data:r},o||{})));case 1:case"end":return i.stop()}}),_callee17,this)})))}},{key:"put",value:function put(t,r,o){return __awaiter(this,void 0,void 0,u().mark((function _callee18(){return u().wrap((function _callee18$(i){for(;;)switch(i.prev=i.next){case 0:return i.abrupt("return",this.request(Object.assign({url:t,method:"PUT",data:r},o||{})));case 1:case"end":return i.stop()}}),_callee18,this)})))}},{key:"patch",value:function patch(t,r,o){return __awaiter(this,void 0,void 0,u().mark((function _callee19(){return u().wrap((function _callee19$(i){for(;;)switch(i.prev=i.next){case 0:return i.abrupt("return",this.request(Object.assign({url:t,method:"PATCH",data:r},o||{})));case 1:case"end":return i.stop()}}),_callee19,this)})))}},{key:"constructed",value:function constructed(){this.cancelTokenSource=this.Axios.CancelToken.source()}},{key:"request",value:function request(t){return __awaiter(this,void 0,void 0,u().mark((function _callee20(){var r;return u().wrap((function _callee20$(o){for(;;)switch(o.prev=o.next){case 0:return t.cancelToken=this.cancelTokenSource.token,o.prev=1,o.next=4,this.axios.request(t);case 4:return r=o.sent,r.data,r.headers,r.status,r.statusText,o.abrupt("return",r.data);case 9:throw o.prev=9,o.t0=o.catch(1),C().isCancel(o.t0),o.t0;case 13:case"end":return o.stop()}}),_callee20,this,[[1,9]])})))}}]),Http}();function Streams_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}__decorate([b("axios")],Q.prototype,"Axios",void 0),__decorate([b("http")],Q.prototype,"axios",void 0),__decorate([(0,r.zY)()],Q.prototype,"constructed",null),Q=__decorate([(0,r.b2)()],Q);var Z=function(){function Streams(){!function Streams_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Streams)}return function Streams_createClass(t,r,o){return r&&Streams_defineProperties(t.prototype,r),o&&Streams_defineProperties(t,o),t}(Streams,[{key:"all",value:function all(){return __awaiter(this,void 0,void 0,u().mark((function _callee(){var t;return u().wrap((function _callee$(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,this.http.getStreams();case 2:return t=r.sent,r.abrupt("return",t.data.map((function(t){return new Y(t)})));case 4:case"end":return r.stop()}}),_callee,this)})))}},{key:"make",value:function make(t){return __awaiter(this,void 0,void 0,u().mark((function _callee2(){var r;return u().wrap((function _callee2$(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,this.http.getStream(t);case 2:return r=o.sent,o.abrupt("return",new Y(r.data,r.meta,r.links));case 4:case"end":return o.stop()}}),_callee2,this)})))}},{key:"entries",value:function entries(t){return __awaiter(this,void 0,void 0,u().mark((function _callee3(){var r;return u().wrap((function _callee3$(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,this.make(t);case 2:return r=o.sent,o.abrupt("return",new z(r));case 4:case"end":return o.stop()}}),_callee3,this)})))}},{key:"repository",value:function repository(t){return __awaiter(this,void 0,void 0,u().mark((function _callee4(){var r;return u().wrap((function _callee4$(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,this.make(t);case 2:return r=o.sent,o.abrupt("return",new J(r));case 4:case"end":return o.stop()}}),_callee4,this)})))}},{key:"collection",value:function collection(){}}]),Streams}();function StreamsServiceProvider_typeof(t){return StreamsServiceProvider_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},StreamsServiceProvider_typeof(t)}function StreamsServiceProvider_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function StreamsServiceProvider_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function StreamsServiceProvider_setPrototypeOf(t,r){return StreamsServiceProvider_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},StreamsServiceProvider_setPrototypeOf(t,r)}function StreamsServiceProvider_createSuper(t){var r=function StreamsServiceProvider_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var o,i=StreamsServiceProvider_getPrototypeOf(t);if(r){var a=StreamsServiceProvider_getPrototypeOf(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return StreamsServiceProvider_possibleConstructorReturn(this,o)}}function StreamsServiceProvider_possibleConstructorReturn(t,r){if(r&&("object"===StreamsServiceProvider_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function StreamsServiceProvider_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function StreamsServiceProvider_getPrototypeOf(t){return StreamsServiceProvider_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},StreamsServiceProvider_getPrototypeOf(t)}__decorate([b("config")],Z.prototype,"config",void 0),__decorate([b("streams.http")],Z.prototype,"http",void 0),Z=__decorate([(0,r.b2)()],Z);var ee=function(t){!function StreamsServiceProvider_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),r&&StreamsServiceProvider_setPrototypeOf(t,r)}(StreamsServiceProvider,t);var r=StreamsServiceProvider_createSuper(StreamsServiceProvider);function StreamsServiceProvider(){return StreamsServiceProvider_classCallCheck(this,StreamsServiceProvider),r.apply(this,arguments)}return function StreamsServiceProvider_createClass(t,r,o){return r&&StreamsServiceProvider_defineProperties(t.prototype,r),o&&StreamsServiceProvider_defineProperties(t,o),t}(StreamsServiceProvider,[{key:"register",value:function register(){this.app.singleton("streams",Z).addBindingGetter("streams"),this.app.singleton("streams.http",Q)}}]),StreamsServiceProvider}(h);function CoreServiceProvider_typeof(t){return CoreServiceProvider_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},CoreServiceProvider_typeof(t)}function CoreServiceProvider_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function CoreServiceProvider_setPrototypeOf(t,r){return CoreServiceProvider_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},CoreServiceProvider_setPrototypeOf(t,r)}function CoreServiceProvider_createSuper(t){var r=function CoreServiceProvider_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var o,i=CoreServiceProvider_getPrototypeOf(t);if(r){var a=CoreServiceProvider_getPrototypeOf(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return CoreServiceProvider_possibleConstructorReturn(this,o)}}function CoreServiceProvider_possibleConstructorReturn(t,r){if(r&&("object"===CoreServiceProvider_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function CoreServiceProvider_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function CoreServiceProvider_getPrototypeOf(t){return CoreServiceProvider_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},CoreServiceProvider_getPrototypeOf(t)}var te=function(t){!function CoreServiceProvider_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),r&&CoreServiceProvider_setPrototypeOf(t,r)}(CoreServiceProvider,t);var r=CoreServiceProvider_createSuper(CoreServiceProvider);function CoreServiceProvider(){var t;return CoreServiceProvider_classCallCheck(this,CoreServiceProvider),(t=r.apply(this,arguments)).providers=[D,k,ee],t}return CoreServiceProvider}(h)})();var i=o.Mx,a=o.FE,c=o.SL,u=o.VR,l=o.Up,p=o.kS,d=o.rF,h=o.gN,y=o.ip,v=o.eV,g=o.e6,_=o.Pv,m=o.jg,b=o._j,w=o.UT,S=o.L9,C=o.JJ,O=o.GX,T=o.F6,E=o.VE,P=o.LP,A=o.$T,x=o.l2,I=o.iC,k=o.f3,N=o.ER,R=o.Gn;

/***/ }),

/***/ "./node_modules/alpinejs/dist/alpine.js":
/*!**********************************************!*\
  !*** ./node_modules/alpinejs/dist/alpine.js ***!
  \**********************************************/
/***/ (function(module) {

(function (global, factory) {
   true ? module.exports = factory() :
  0;
}(this, (function () { 'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  // Thanks @stimulus:
  // https://github.com/stimulusjs/stimulus/blob/master/packages/%40stimulus/core/src/application.ts
  function domReady() {
    return new Promise(resolve => {
      if (document.readyState == "loading") {
        document.addEventListener("DOMContentLoaded", resolve);
      } else {
        resolve();
      }
    });
  }
  function arrayUnique(array) {
    return Array.from(new Set(array));
  }
  function isTesting() {
    return navigator.userAgent.includes("Node.js") || navigator.userAgent.includes("jsdom");
  }
  function checkedAttrLooseCompare(valueA, valueB) {
    return valueA == valueB;
  }
  function warnIfMalformedTemplate(el, directive) {
    if (el.tagName.toLowerCase() !== 'template') {
      console.warn(`Alpine: [${directive}] directive should only be added to <template> tags. See https://github.com/alpinejs/alpine#${directive}`);
    } else if (el.content.childElementCount !== 1) {
      console.warn(`Alpine: <template> tag with [${directive}] encountered with an unexpected number of root elements. Make sure <template> has a single root element. `);
    }
  }
  function kebabCase(subject) {
    return subject.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[_\s]/, '-').toLowerCase();
  }
  function camelCase(subject) {
    return subject.toLowerCase().replace(/-(\w)/g, (match, char) => char.toUpperCase());
  }
  function walk(el, callback) {
    if (callback(el) === false) return;
    let node = el.firstElementChild;

    while (node) {
      walk(node, callback);
      node = node.nextElementSibling;
    }
  }
  function debounce(func, wait) {
    var timeout;
    return function () {
      var context = this,
          args = arguments;

      var later = function later() {
        timeout = null;
        func.apply(context, args);
      };

      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  const handleError = (el, expression, error) => {
    console.warn(`Alpine Error: "${error}"\n\nExpression: "${expression}"\nElement:`, el);

    if (!isTesting()) {
      Object.assign(error, {
        el,
        expression
      });
      throw error;
    }
  };

  function tryCatch(cb, {
    el,
    expression
  }) {
    try {
      const value = cb();
      return value instanceof Promise ? value.catch(e => handleError(el, expression, e)) : value;
    } catch (e) {
      handleError(el, expression, e);
    }
  }

  function saferEval(el, expression, dataContext, additionalHelperVariables = {}) {
    return tryCatch(() => {
      if (typeof expression === 'function') {
        return expression.call(dataContext);
      }

      return new Function(['$data', ...Object.keys(additionalHelperVariables)], `var __alpine_result; with($data) { __alpine_result = ${expression} }; return __alpine_result`)(dataContext, ...Object.values(additionalHelperVariables));
    }, {
      el,
      expression
    });
  }
  function saferEvalNoReturn(el, expression, dataContext, additionalHelperVariables = {}) {
    return tryCatch(() => {
      if (typeof expression === 'function') {
        return Promise.resolve(expression.call(dataContext, additionalHelperVariables['$event']));
      }

      let AsyncFunction = Function;
      /* MODERN-ONLY:START */

      AsyncFunction = Object.getPrototypeOf(async function () {}).constructor;
      /* MODERN-ONLY:END */
      // For the cases when users pass only a function reference to the caller: `x-on:click="foo"`
      // Where "foo" is a function. Also, we'll pass the function the event instance when we call it.

      if (Object.keys(dataContext).includes(expression)) {
        let methodReference = new Function(['dataContext', ...Object.keys(additionalHelperVariables)], `with(dataContext) { return ${expression} }`)(dataContext, ...Object.values(additionalHelperVariables));

        if (typeof methodReference === 'function') {
          return Promise.resolve(methodReference.call(dataContext, additionalHelperVariables['$event']));
        } else {
          return Promise.resolve();
        }
      }

      return Promise.resolve(new AsyncFunction(['dataContext', ...Object.keys(additionalHelperVariables)], `with(dataContext) { ${expression} }`)(dataContext, ...Object.values(additionalHelperVariables)));
    }, {
      el,
      expression
    });
  }
  const xAttrRE = /^x-(on|bind|data|text|html|model|if|for|show|cloak|transition|ref|spread)\b/;
  function isXAttr(attr) {
    const name = replaceAtAndColonWithStandardSyntax(attr.name);
    return xAttrRE.test(name);
  }
  function getXAttrs(el, component, type) {
    let directives = Array.from(el.attributes).filter(isXAttr).map(parseHtmlAttribute); // Get an object of directives from x-spread.

    let spreadDirective = directives.filter(directive => directive.type === 'spread')[0];

    if (spreadDirective) {
      let spreadObject = saferEval(el, spreadDirective.expression, component.$data); // Add x-spread directives to the pile of existing directives.

      directives = directives.concat(Object.entries(spreadObject).map(([name, value]) => parseHtmlAttribute({
        name,
        value
      })));
    }

    if (type) return directives.filter(i => i.type === type);
    return sortDirectives(directives);
  }

  function sortDirectives(directives) {
    let directiveOrder = ['bind', 'model', 'show', 'catch-all'];
    return directives.sort((a, b) => {
      let typeA = directiveOrder.indexOf(a.type) === -1 ? 'catch-all' : a.type;
      let typeB = directiveOrder.indexOf(b.type) === -1 ? 'catch-all' : b.type;
      return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);
    });
  }

  function parseHtmlAttribute({
    name,
    value
  }) {
    const normalizedName = replaceAtAndColonWithStandardSyntax(name);
    const typeMatch = normalizedName.match(xAttrRE);
    const valueMatch = normalizedName.match(/:([a-zA-Z0-9\-:]+)/);
    const modifiers = normalizedName.match(/\.[^.\]]+(?=[^\]]*$)/g) || [];
    return {
      type: typeMatch ? typeMatch[1] : null,
      value: valueMatch ? valueMatch[1] : null,
      modifiers: modifiers.map(i => i.replace('.', '')),
      expression: value
    };
  }
  function isBooleanAttr(attrName) {
    // As per HTML spec table https://html.spec.whatwg.org/multipage/indices.html#attributes-3:boolean-attribute
    // Array roughly ordered by estimated usage
    const booleanAttributes = ['disabled', 'checked', 'required', 'readonly', 'hidden', 'open', 'selected', 'autofocus', 'itemscope', 'multiple', 'novalidate', 'allowfullscreen', 'allowpaymentrequest', 'formnovalidate', 'autoplay', 'controls', 'loop', 'muted', 'playsinline', 'default', 'ismap', 'reversed', 'async', 'defer', 'nomodule'];
    return booleanAttributes.includes(attrName);
  }
  function replaceAtAndColonWithStandardSyntax(name) {
    if (name.startsWith('@')) {
      return name.replace('@', 'x-on:');
    } else if (name.startsWith(':')) {
      return name.replace(':', 'x-bind:');
    }

    return name;
  }
  function convertClassStringToArray(classList, filterFn = Boolean) {
    return classList.split(' ').filter(filterFn);
  }
  const TRANSITION_TYPE_IN = 'in';
  const TRANSITION_TYPE_OUT = 'out';
  const TRANSITION_CANCELLED = 'cancelled';
  function transitionIn(el, show, reject, component, forceSkip = false) {
    // We don't want to transition on the initial page load.
    if (forceSkip) return show();

    if (el.__x_transition && el.__x_transition.type === TRANSITION_TYPE_IN) {
      // there is already a similar transition going on, this was probably triggered by
      // a change in a different property, let's just leave the previous one doing its job
      return;
    }

    const attrs = getXAttrs(el, component, 'transition');
    const showAttr = getXAttrs(el, component, 'show')[0]; // If this is triggered by a x-show.transition.

    if (showAttr && showAttr.modifiers.includes('transition')) {
      let modifiers = showAttr.modifiers; // If x-show.transition.out, we'll skip the "in" transition.

      if (modifiers.includes('out') && !modifiers.includes('in')) return show();
      const settingBothSidesOfTransition = modifiers.includes('in') && modifiers.includes('out'); // If x-show.transition.in...out... only use "in" related modifiers for this transition.

      modifiers = settingBothSidesOfTransition ? modifiers.filter((i, index) => index < modifiers.indexOf('out')) : modifiers;
      transitionHelperIn(el, modifiers, show, reject); // Otherwise, we can assume x-transition:enter.
    } else if (attrs.some(attr => ['enter', 'enter-start', 'enter-end'].includes(attr.value))) {
      transitionClassesIn(el, component, attrs, show, reject);
    } else {
      // If neither, just show that damn thing.
      show();
    }
  }
  function transitionOut(el, hide, reject, component, forceSkip = false) {
    // We don't want to transition on the initial page load.
    if (forceSkip) return hide();

    if (el.__x_transition && el.__x_transition.type === TRANSITION_TYPE_OUT) {
      // there is already a similar transition going on, this was probably triggered by
      // a change in a different property, let's just leave the previous one doing its job
      return;
    }

    const attrs = getXAttrs(el, component, 'transition');
    const showAttr = getXAttrs(el, component, 'show')[0];

    if (showAttr && showAttr.modifiers.includes('transition')) {
      let modifiers = showAttr.modifiers;
      if (modifiers.includes('in') && !modifiers.includes('out')) return hide();
      const settingBothSidesOfTransition = modifiers.includes('in') && modifiers.includes('out');
      modifiers = settingBothSidesOfTransition ? modifiers.filter((i, index) => index > modifiers.indexOf('out')) : modifiers;
      transitionHelperOut(el, modifiers, settingBothSidesOfTransition, hide, reject);
    } else if (attrs.some(attr => ['leave', 'leave-start', 'leave-end'].includes(attr.value))) {
      transitionClassesOut(el, component, attrs, hide, reject);
    } else {
      hide();
    }
  }
  function transitionHelperIn(el, modifiers, showCallback, reject) {
    // Default values inspired by: https://material.io/design/motion/speed.html#duration
    const styleValues = {
      duration: modifierValue(modifiers, 'duration', 150),
      origin: modifierValue(modifiers, 'origin', 'center'),
      first: {
        opacity: 0,
        scale: modifierValue(modifiers, 'scale', 95)
      },
      second: {
        opacity: 1,
        scale: 100
      }
    };
    transitionHelper(el, modifiers, showCallback, () => {}, reject, styleValues, TRANSITION_TYPE_IN);
  }
  function transitionHelperOut(el, modifiers, settingBothSidesOfTransition, hideCallback, reject) {
    // Make the "out" transition .5x slower than the "in". (Visually better)
    // HOWEVER, if they explicitly set a duration for the "out" transition,
    // use that.
    const duration = settingBothSidesOfTransition ? modifierValue(modifiers, 'duration', 150) : modifierValue(modifiers, 'duration', 150) / 2;
    const styleValues = {
      duration: duration,
      origin: modifierValue(modifiers, 'origin', 'center'),
      first: {
        opacity: 1,
        scale: 100
      },
      second: {
        opacity: 0,
        scale: modifierValue(modifiers, 'scale', 95)
      }
    };
    transitionHelper(el, modifiers, () => {}, hideCallback, reject, styleValues, TRANSITION_TYPE_OUT);
  }

  function modifierValue(modifiers, key, fallback) {
    // If the modifier isn't present, use the default.
    if (modifiers.indexOf(key) === -1) return fallback; // If it IS present, grab the value after it: x-show.transition.duration.500ms

    const rawValue = modifiers[modifiers.indexOf(key) + 1];
    if (!rawValue) return fallback;

    if (key === 'scale') {
      // Check if the very next value is NOT a number and return the fallback.
      // If x-show.transition.scale, we'll use the default scale value.
      // That is how a user opts out of the opacity transition.
      if (!isNumeric(rawValue)) return fallback;
    }

    if (key === 'duration') {
      // Support x-show.transition.duration.500ms && duration.500
      let match = rawValue.match(/([0-9]+)ms/);
      if (match) return match[1];
    }

    if (key === 'origin') {
      // Support chaining origin directions: x-show.transition.top.right
      if (['top', 'right', 'left', 'center', 'bottom'].includes(modifiers[modifiers.indexOf(key) + 2])) {
        return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(' ');
      }
    }

    return rawValue;
  }

  function transitionHelper(el, modifiers, hook1, hook2, reject, styleValues, type) {
    // clear the previous transition if exists to avoid caching the wrong styles
    if (el.__x_transition) {
      el.__x_transition.cancel && el.__x_transition.cancel();
    } // If the user set these style values, we'll put them back when we're done with them.


    const opacityCache = el.style.opacity;
    const transformCache = el.style.transform;
    const transformOriginCache = el.style.transformOrigin; // If no modifiers are present: x-show.transition, we'll default to both opacity and scale.

    const noModifiers = !modifiers.includes('opacity') && !modifiers.includes('scale');
    const transitionOpacity = noModifiers || modifiers.includes('opacity');
    const transitionScale = noModifiers || modifiers.includes('scale'); // These are the explicit stages of a transition (same stages for in and for out).
    // This way you can get a birds eye view of the hooks, and the differences
    // between them.

    const stages = {
      start() {
        if (transitionOpacity) el.style.opacity = styleValues.first.opacity;
        if (transitionScale) el.style.transform = `scale(${styleValues.first.scale / 100})`;
      },

      during() {
        if (transitionScale) el.style.transformOrigin = styleValues.origin;
        el.style.transitionProperty = [transitionOpacity ? `opacity` : ``, transitionScale ? `transform` : ``].join(' ').trim();
        el.style.transitionDuration = `${styleValues.duration / 1000}s`;
        el.style.transitionTimingFunction = `cubic-bezier(0.4, 0.0, 0.2, 1)`;
      },

      show() {
        hook1();
      },

      end() {
        if (transitionOpacity) el.style.opacity = styleValues.second.opacity;
        if (transitionScale) el.style.transform = `scale(${styleValues.second.scale / 100})`;
      },

      hide() {
        hook2();
      },

      cleanup() {
        if (transitionOpacity) el.style.opacity = opacityCache;
        if (transitionScale) el.style.transform = transformCache;
        if (transitionScale) el.style.transformOrigin = transformOriginCache;
        el.style.transitionProperty = null;
        el.style.transitionDuration = null;
        el.style.transitionTimingFunction = null;
      }

    };
    transition(el, stages, type, reject);
  }

  const ensureStringExpression = (expression, el, component) => {
    return typeof expression === 'function' ? component.evaluateReturnExpression(el, expression) : expression;
  };

  function transitionClassesIn(el, component, directives, showCallback, reject) {
    const enter = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter') || {
      expression: ''
    }).expression, el, component));
    const enterStart = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter-start') || {
      expression: ''
    }).expression, el, component));
    const enterEnd = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter-end') || {
      expression: ''
    }).expression, el, component));
    transitionClasses(el, enter, enterStart, enterEnd, showCallback, () => {}, TRANSITION_TYPE_IN, reject);
  }
  function transitionClassesOut(el, component, directives, hideCallback, reject) {
    const leave = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave') || {
      expression: ''
    }).expression, el, component));
    const leaveStart = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave-start') || {
      expression: ''
    }).expression, el, component));
    const leaveEnd = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave-end') || {
      expression: ''
    }).expression, el, component));
    transitionClasses(el, leave, leaveStart, leaveEnd, () => {}, hideCallback, TRANSITION_TYPE_OUT, reject);
  }
  function transitionClasses(el, classesDuring, classesStart, classesEnd, hook1, hook2, type, reject) {
    // clear the previous transition if exists to avoid caching the wrong classes
    if (el.__x_transition) {
      el.__x_transition.cancel && el.__x_transition.cancel();
    }

    const originalClasses = el.__x_original_classes || [];
    const stages = {
      start() {
        el.classList.add(...classesStart);
      },

      during() {
        el.classList.add(...classesDuring);
      },

      show() {
        hook1();
      },

      end() {
        // Don't remove classes that were in the original class attribute.
        el.classList.remove(...classesStart.filter(i => !originalClasses.includes(i)));
        el.classList.add(...classesEnd);
      },

      hide() {
        hook2();
      },

      cleanup() {
        el.classList.remove(...classesDuring.filter(i => !originalClasses.includes(i)));
        el.classList.remove(...classesEnd.filter(i => !originalClasses.includes(i)));
      }

    };
    transition(el, stages, type, reject);
  }
  function transition(el, stages, type, reject) {
    const finish = once(() => {
      stages.hide(); // Adding an "isConnected" check, in case the callback
      // removed the element from the DOM.

      if (el.isConnected) {
        stages.cleanup();
      }

      delete el.__x_transition;
    });
    el.__x_transition = {
      // Set transition type so we can avoid clearing transition if the direction is the same
      type: type,
      // create a callback for the last stages of the transition so we can call it
      // from different point and early terminate it. Once will ensure that function
      // is only called one time.
      cancel: once(() => {
        reject(TRANSITION_CANCELLED);
        finish();
      }),
      finish,
      // This store the next animation frame so we can cancel it
      nextFrame: null
    };
    stages.start();
    stages.during();
    el.__x_transition.nextFrame = requestAnimationFrame(() => {
      // Note: Safari's transitionDuration property will list out comma separated transition durations
      // for every single transition property. Let's grab the first one and call it a day.
      let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, '').replace('s', '')) * 1000;

      if (duration === 0) {
        duration = Number(getComputedStyle(el).animationDuration.replace('s', '')) * 1000;
      }

      stages.show();
      el.__x_transition.nextFrame = requestAnimationFrame(() => {
        stages.end();
        setTimeout(el.__x_transition.finish, duration);
      });
    });
  }
  function isNumeric(subject) {
    return !Array.isArray(subject) && !isNaN(subject);
  } // Thanks @vuejs
  // https://github.com/vuejs/vue/blob/4de4649d9637262a9b007720b59f80ac72a5620c/src/shared/util.js

  function once(callback) {
    let called = false;
    return function () {
      if (!called) {
        called = true;
        callback.apply(this, arguments);
      }
    };
  }

  function handleForDirective(component, templateEl, expression, initialUpdate, extraVars) {
    warnIfMalformedTemplate(templateEl, 'x-for');
    let iteratorNames = typeof expression === 'function' ? parseForExpression(component.evaluateReturnExpression(templateEl, expression)) : parseForExpression(expression);
    let items = evaluateItemsAndReturnEmptyIfXIfIsPresentAndFalseOnElement(component, templateEl, iteratorNames, extraVars); // As we walk the array, we'll also walk the DOM (updating/creating as we go).

    let currentEl = templateEl;
    items.forEach((item, index) => {
      let iterationScopeVariables = getIterationScopeVariables(iteratorNames, item, index, items, extraVars());
      let currentKey = generateKeyForIteration(component, templateEl, index, iterationScopeVariables);
      let nextEl = lookAheadForMatchingKeyedElementAndMoveItIfFound(currentEl.nextElementSibling, currentKey); // If we haven't found a matching key, insert the element at the current position.

      if (!nextEl) {
        nextEl = addElementInLoopAfterCurrentEl(templateEl, currentEl); // And transition it in if it's not the first page load.

        transitionIn(nextEl, () => {}, () => {}, component, initialUpdate);
        nextEl.__x_for = iterationScopeVariables;
        component.initializeElements(nextEl, () => nextEl.__x_for); // Otherwise update the element we found.
      } else {
        // Temporarily remove the key indicator to allow the normal "updateElements" to work.
        delete nextEl.__x_for_key;
        nextEl.__x_for = iterationScopeVariables;
        component.updateElements(nextEl, () => nextEl.__x_for);
      }

      currentEl = nextEl;
      currentEl.__x_for_key = currentKey;
    });
    removeAnyLeftOverElementsFromPreviousUpdate(currentEl, component);
  } // This was taken from VueJS 2.* core. Thanks Vue!

  function parseForExpression(expression) {
    let forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
    let stripParensRE = /^\(|\)$/g;
    let forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
    let inMatch = String(expression).match(forAliasRE);
    if (!inMatch) return;
    let res = {};
    res.items = inMatch[2].trim();
    let item = inMatch[1].trim().replace(stripParensRE, '');
    let iteratorMatch = item.match(forIteratorRE);

    if (iteratorMatch) {
      res.item = item.replace(forIteratorRE, '').trim();
      res.index = iteratorMatch[1].trim();

      if (iteratorMatch[2]) {
        res.collection = iteratorMatch[2].trim();
      }
    } else {
      res.item = item;
    }

    return res;
  }

  function getIterationScopeVariables(iteratorNames, item, index, items, extraVars) {
    // We must create a new object, so each iteration has a new scope
    let scopeVariables = extraVars ? _objectSpread2({}, extraVars) : {};
    scopeVariables[iteratorNames.item] = item;
    if (iteratorNames.index) scopeVariables[iteratorNames.index] = index;
    if (iteratorNames.collection) scopeVariables[iteratorNames.collection] = items;
    return scopeVariables;
  }

  function generateKeyForIteration(component, el, index, iterationScopeVariables) {
    let bindKeyAttribute = getXAttrs(el, component, 'bind').filter(attr => attr.value === 'key')[0]; // If the dev hasn't specified a key, just return the index of the iteration.

    if (!bindKeyAttribute) return index;
    return component.evaluateReturnExpression(el, bindKeyAttribute.expression, () => iterationScopeVariables);
  }

  function evaluateItemsAndReturnEmptyIfXIfIsPresentAndFalseOnElement(component, el, iteratorNames, extraVars) {
    let ifAttribute = getXAttrs(el, component, 'if')[0];

    if (ifAttribute && !component.evaluateReturnExpression(el, ifAttribute.expression)) {
      return [];
    }

    let items = component.evaluateReturnExpression(el, iteratorNames.items, extraVars); // This adds support for the `i in n` syntax.

    if (isNumeric(items) && items >= 0) {
      items = Array.from(Array(items).keys(), i => i + 1);
    }

    return items;
  }

  function addElementInLoopAfterCurrentEl(templateEl, currentEl) {
    let clone = document.importNode(templateEl.content, true);
    currentEl.parentElement.insertBefore(clone, currentEl.nextElementSibling);
    return currentEl.nextElementSibling;
  }

  function lookAheadForMatchingKeyedElementAndMoveItIfFound(nextEl, currentKey) {
    if (!nextEl) return; // If we are already past the x-for generated elements, we don't need to look ahead.

    if (nextEl.__x_for_key === undefined) return; // If the the key's DO match, no need to look ahead.

    if (nextEl.__x_for_key === currentKey) return nextEl; // If they don't, we'll look ahead for a match.
    // If we find it, we'll move it to the current position in the loop.

    let tmpNextEl = nextEl;

    while (tmpNextEl) {
      if (tmpNextEl.__x_for_key === currentKey) {
        return tmpNextEl.parentElement.insertBefore(tmpNextEl, nextEl);
      }

      tmpNextEl = tmpNextEl.nextElementSibling && tmpNextEl.nextElementSibling.__x_for_key !== undefined ? tmpNextEl.nextElementSibling : false;
    }
  }

  function removeAnyLeftOverElementsFromPreviousUpdate(currentEl, component) {
    var nextElementFromOldLoop = currentEl.nextElementSibling && currentEl.nextElementSibling.__x_for_key !== undefined ? currentEl.nextElementSibling : false;

    while (nextElementFromOldLoop) {
      let nextElementFromOldLoopImmutable = nextElementFromOldLoop;
      let nextSibling = nextElementFromOldLoop.nextElementSibling;
      transitionOut(nextElementFromOldLoop, () => {
        nextElementFromOldLoopImmutable.remove();
      }, () => {}, component);
      nextElementFromOldLoop = nextSibling && nextSibling.__x_for_key !== undefined ? nextSibling : false;
    }
  }

  function handleAttributeBindingDirective(component, el, attrName, expression, extraVars, attrType, modifiers) {
    var value = component.evaluateReturnExpression(el, expression, extraVars);

    if (attrName === 'value') {
      if (Alpine.ignoreFocusedForValueBinding && document.activeElement.isSameNode(el)) return; // If nested model key is undefined, set the default value to empty string.

      if (value === undefined && String(expression).match(/\./)) {
        value = '';
      }

      if (el.type === 'radio') {
        // Set radio value from x-bind:value, if no "value" attribute exists.
        // If there are any initial state values, radio will have a correct
        // "checked" value since x-bind:value is processed before x-model.
        if (el.attributes.value === undefined && attrType === 'bind') {
          el.value = value;
        } else if (attrType !== 'bind') {
          el.checked = checkedAttrLooseCompare(el.value, value);
        }
      } else if (el.type === 'checkbox') {
        // If we are explicitly binding a string to the :value, set the string,
        // If the value is a boolean, leave it alone, it will be set to "on"
        // automatically.
        if (typeof value !== 'boolean' && ![null, undefined].includes(value) && attrType === 'bind') {
          el.value = String(value);
        } else if (attrType !== 'bind') {
          if (Array.isArray(value)) {
            // I'm purposely not using Array.includes here because it's
            // strict, and because of Numeric/String mis-casting, I
            // want the "includes" to be "fuzzy".
            el.checked = value.some(val => checkedAttrLooseCompare(val, el.value));
          } else {
            el.checked = !!value;
          }
        }
      } else if (el.tagName === 'SELECT') {
        updateSelect(el, value);
      } else {
        if (el.value === value) return;
        el.value = value;
      }
    } else if (attrName === 'class') {
      if (Array.isArray(value)) {
        const originalClasses = el.__x_original_classes || [];
        el.setAttribute('class', arrayUnique(originalClasses.concat(value)).join(' '));
      } else if (typeof value === 'object') {
        // Sorting the keys / class names by their boolean value will ensure that
        // anything that evaluates to `false` and needs to remove classes is run first.
        const keysSortedByBooleanValue = Object.keys(value).sort((a, b) => value[a] - value[b]);
        keysSortedByBooleanValue.forEach(classNames => {
          if (value[classNames]) {
            convertClassStringToArray(classNames).forEach(className => el.classList.add(className));
          } else {
            convertClassStringToArray(classNames).forEach(className => el.classList.remove(className));
          }
        });
      } else {
        const originalClasses = el.__x_original_classes || [];
        const newClasses = value ? convertClassStringToArray(value) : [];
        el.setAttribute('class', arrayUnique(originalClasses.concat(newClasses)).join(' '));
      }
    } else {
      attrName = modifiers.includes('camel') ? camelCase(attrName) : attrName; // If an attribute's bound value is null, undefined or false, remove the attribute

      if ([null, undefined, false].includes(value)) {
        el.removeAttribute(attrName);
      } else {
        isBooleanAttr(attrName) ? setIfChanged(el, attrName, attrName) : setIfChanged(el, attrName, value);
      }
    }
  }

  function setIfChanged(el, attrName, value) {
    if (el.getAttribute(attrName) != value) {
      el.setAttribute(attrName, value);
    }
  }

  function updateSelect(el, value) {
    const arrayWrappedValue = [].concat(value).map(value => {
      return value + '';
    });
    Array.from(el.options).forEach(option => {
      option.selected = arrayWrappedValue.includes(option.value || option.text);
    });
  }

  function handleTextDirective(el, output, expression) {
    // If nested model key is undefined, set the default value to empty string.
    if (output === undefined && String(expression).match(/\./)) {
      output = '';
    }

    el.textContent = output;
  }

  function handleHtmlDirective(component, el, expression, extraVars) {
    el.innerHTML = component.evaluateReturnExpression(el, expression, extraVars);
  }

  function handleShowDirective(component, el, value, modifiers, initialUpdate = false) {
    const hide = () => {
      el.style.display = 'none';
      el.__x_is_shown = false;
    };

    const show = () => {
      if (el.style.length === 1 && el.style.display === 'none') {
        el.removeAttribute('style');
      } else {
        el.style.removeProperty('display');
      }

      el.__x_is_shown = true;
    };

    if (initialUpdate === true) {
      if (value) {
        show();
      } else {
        hide();
      }

      return;
    }

    const handle = (resolve, reject) => {
      if (value) {
        if (el.style.display === 'none' || el.__x_transition) {
          transitionIn(el, () => {
            show();
          }, reject, component);
        }

        resolve(() => {});
      } else {
        if (el.style.display !== 'none') {
          transitionOut(el, () => {
            resolve(() => {
              hide();
            });
          }, reject, component);
        } else {
          resolve(() => {});
        }
      }
    }; // The working of x-show is a bit complex because we need to
    // wait for any child transitions to finish before hiding
    // some element. Also, this has to be done recursively.
    // If x-show.immediate, foregoe the waiting.


    if (modifiers.includes('immediate')) {
      handle(finish => finish(), () => {});
      return;
    } // x-show is encountered during a DOM tree walk. If an element
    // we encounter is NOT a child of another x-show element we
    // can execute the previous x-show stack (if one exists).


    if (component.showDirectiveLastElement && !component.showDirectiveLastElement.contains(el)) {
      component.executeAndClearRemainingShowDirectiveStack();
    }

    component.showDirectiveStack.push(handle);
    component.showDirectiveLastElement = el;
  }

  function handleIfDirective(component, el, expressionResult, initialUpdate, extraVars) {
    warnIfMalformedTemplate(el, 'x-if');
    const elementHasAlreadyBeenAdded = el.nextElementSibling && el.nextElementSibling.__x_inserted_me === true;

    if (expressionResult && (!elementHasAlreadyBeenAdded || el.__x_transition)) {
      const clone = document.importNode(el.content, true);
      el.parentElement.insertBefore(clone, el.nextElementSibling);
      transitionIn(el.nextElementSibling, () => {}, () => {}, component, initialUpdate);
      component.initializeElements(el.nextElementSibling, extraVars);
      el.nextElementSibling.__x_inserted_me = true;
    } else if (!expressionResult && elementHasAlreadyBeenAdded) {
      transitionOut(el.nextElementSibling, () => {
        el.nextElementSibling.remove();
      }, () => {}, component, initialUpdate);
    }
  }

  function registerListener(component, el, event, modifiers, expression, extraVars = {}) {
    const options = {
      passive: modifiers.includes('passive')
    };

    if (modifiers.includes('camel')) {
      event = camelCase(event);
    }

    let handler, listenerTarget;

    if (modifiers.includes('away')) {
      listenerTarget = document;

      handler = e => {
        // Don't do anything if the click came from the element or within it.
        if (el.contains(e.target)) return; // Don't do anything if this element isn't currently visible.

        if (el.offsetWidth < 1 && el.offsetHeight < 1) return; // Now that we are sure the element is visible, AND the click
        // is from outside it, let's run the expression.

        runListenerHandler(component, expression, e, extraVars);

        if (modifiers.includes('once')) {
          document.removeEventListener(event, handler, options);
        }
      };
    } else {
      listenerTarget = modifiers.includes('window') ? window : modifiers.includes('document') ? document : el;

      handler = e => {
        // Remove this global event handler if the element that declared it
        // has been removed. It's now stale.
        if (listenerTarget === window || listenerTarget === document) {
          if (!document.body.contains(el)) {
            listenerTarget.removeEventListener(event, handler, options);
            return;
          }
        }

        if (isKeyEvent(event)) {
          if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {
            return;
          }
        }

        if (modifiers.includes('prevent')) e.preventDefault();
        if (modifiers.includes('stop')) e.stopPropagation(); // If the .self modifier isn't present, or if it is present and
        // the target element matches the element we are registering the
        // event on, run the handler

        if (!modifiers.includes('self') || e.target === el) {
          const returnValue = runListenerHandler(component, expression, e, extraVars);
          returnValue.then(value => {
            if (value === false) {
              e.preventDefault();
            } else {
              if (modifiers.includes('once')) {
                listenerTarget.removeEventListener(event, handler, options);
              }
            }
          });
        }
      };
    }

    if (modifiers.includes('debounce')) {
      let nextModifier = modifiers[modifiers.indexOf('debounce') + 1] || 'invalid-wait';
      let wait = isNumeric(nextModifier.split('ms')[0]) ? Number(nextModifier.split('ms')[0]) : 250;
      handler = debounce(handler, wait);
    }

    listenerTarget.addEventListener(event, handler, options);
  }

  function runListenerHandler(component, expression, e, extraVars) {
    return component.evaluateCommandExpression(e.target, expression, () => {
      return _objectSpread2(_objectSpread2({}, extraVars()), {}, {
        '$event': e
      });
    });
  }

  function isKeyEvent(event) {
    return ['keydown', 'keyup'].includes(event);
  }

  function isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {
    let keyModifiers = modifiers.filter(i => {
      return !['window', 'document', 'prevent', 'stop'].includes(i);
    });

    if (keyModifiers.includes('debounce')) {
      let debounceIndex = keyModifiers.indexOf('debounce');
      keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || 'invalid-wait').split('ms')[0]) ? 2 : 1);
    } // If no modifier is specified, we'll call it a press.


    if (keyModifiers.length === 0) return false; // If one is passed, AND it matches the key pressed, we'll call it a press.

    if (keyModifiers.length === 1 && keyModifiers[0] === keyToModifier(e.key)) return false; // The user is listening for key combinations.

    const systemKeyModifiers = ['ctrl', 'shift', 'alt', 'meta', 'cmd', 'super'];
    const selectedSystemKeyModifiers = systemKeyModifiers.filter(modifier => keyModifiers.includes(modifier));
    keyModifiers = keyModifiers.filter(i => !selectedSystemKeyModifiers.includes(i));

    if (selectedSystemKeyModifiers.length > 0) {
      const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter(modifier => {
        // Alias "cmd" and "super" to "meta"
        if (modifier === 'cmd' || modifier === 'super') modifier = 'meta';
        return e[`${modifier}Key`];
      }); // If all the modifiers selected are pressed, ...

      if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {
        // AND the remaining key is pressed as well. It's a press.
        if (keyModifiers[0] === keyToModifier(e.key)) return false;
      }
    } // We'll call it NOT a valid keypress.


    return true;
  }

  function keyToModifier(key) {
    switch (key) {
      case '/':
        return 'slash';

      case ' ':
      case 'Spacebar':
        return 'space';

      default:
        return key && kebabCase(key);
    }
  }

  function registerModelListener(component, el, modifiers, expression, extraVars) {
    // If the element we are binding to is a select, a radio, or checkbox
    // we'll listen for the change event instead of the "input" event.
    var event = el.tagName.toLowerCase() === 'select' || ['checkbox', 'radio'].includes(el.type) || modifiers.includes('lazy') ? 'change' : 'input';
    const listenerExpression = `${expression} = rightSideOfExpression($event, ${expression})`;
    registerListener(component, el, event, modifiers, listenerExpression, () => {
      return _objectSpread2(_objectSpread2({}, extraVars()), {}, {
        rightSideOfExpression: generateModelAssignmentFunction(el, modifiers, expression)
      });
    });
  }

  function generateModelAssignmentFunction(el, modifiers, expression) {
    if (el.type === 'radio') {
      // Radio buttons only work properly when they share a name attribute.
      // People might assume we take care of that for them, because
      // they already set a shared "x-model" attribute.
      if (!el.hasAttribute('name')) el.setAttribute('name', expression);
    }

    return (event, currentValue) => {
      // Check for event.detail due to an issue where IE11 handles other events as a CustomEvent.
      if (event instanceof CustomEvent && event.detail) {
        return event.detail;
      } else if (el.type === 'checkbox') {
        // If the data we are binding to is an array, toggle its value inside the array.
        if (Array.isArray(currentValue)) {
          const newValue = modifiers.includes('number') ? safeParseNumber(event.target.value) : event.target.value;
          return event.target.checked ? currentValue.concat([newValue]) : currentValue.filter(el => !checkedAttrLooseCompare(el, newValue));
        } else {
          return event.target.checked;
        }
      } else if (el.tagName.toLowerCase() === 'select' && el.multiple) {
        return modifiers.includes('number') ? Array.from(event.target.selectedOptions).map(option => {
          const rawValue = option.value || option.text;
          return safeParseNumber(rawValue);
        }) : Array.from(event.target.selectedOptions).map(option => {
          return option.value || option.text;
        });
      } else {
        const rawValue = event.target.value;
        return modifiers.includes('number') ? safeParseNumber(rawValue) : modifiers.includes('trim') ? rawValue.trim() : rawValue;
      }
    };
  }

  function safeParseNumber(rawValue) {
    const number = rawValue ? parseFloat(rawValue) : null;
    return isNumeric(number) ? number : rawValue;
  }

  /**
   * Copyright (C) 2017 salesforce.com, inc.
   */
  const { isArray } = Array;
  const { getPrototypeOf, create: ObjectCreate, defineProperty: ObjectDefineProperty, defineProperties: ObjectDefineProperties, isExtensible, getOwnPropertyDescriptor, getOwnPropertyNames, getOwnPropertySymbols, preventExtensions, hasOwnProperty, } = Object;
  const { push: ArrayPush, concat: ArrayConcat, map: ArrayMap, } = Array.prototype;
  function isUndefined(obj) {
      return obj === undefined;
  }
  function isFunction(obj) {
      return typeof obj === 'function';
  }
  function isObject(obj) {
      return typeof obj === 'object';
  }
  const proxyToValueMap = new WeakMap();
  function registerProxy(proxy, value) {
      proxyToValueMap.set(proxy, value);
  }
  const unwrap = (replicaOrAny) => proxyToValueMap.get(replicaOrAny) || replicaOrAny;

  function wrapValue(membrane, value) {
      return membrane.valueIsObservable(value) ? membrane.getProxy(value) : value;
  }
  /**
   * Unwrap property descriptors will set value on original descriptor
   * We only need to unwrap if value is specified
   * @param descriptor external descrpitor provided to define new property on original value
   */
  function unwrapDescriptor(descriptor) {
      if (hasOwnProperty.call(descriptor, 'value')) {
          descriptor.value = unwrap(descriptor.value);
      }
      return descriptor;
  }
  function lockShadowTarget(membrane, shadowTarget, originalTarget) {
      const targetKeys = ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));
      targetKeys.forEach((key) => {
          let descriptor = getOwnPropertyDescriptor(originalTarget, key);
          // We do not need to wrap the descriptor if configurable
          // Because we can deal with wrapping it when user goes through
          // Get own property descriptor. There is also a chance that this descriptor
          // could change sometime in the future, so we can defer wrapping
          // until we need to
          if (!descriptor.configurable) {
              descriptor = wrapDescriptor(membrane, descriptor, wrapValue);
          }
          ObjectDefineProperty(shadowTarget, key, descriptor);
      });
      preventExtensions(shadowTarget);
  }
  class ReactiveProxyHandler {
      constructor(membrane, value) {
          this.originalTarget = value;
          this.membrane = membrane;
      }
      get(shadowTarget, key) {
          const { originalTarget, membrane } = this;
          const value = originalTarget[key];
          const { valueObserved } = membrane;
          valueObserved(originalTarget, key);
          return membrane.getProxy(value);
      }
      set(shadowTarget, key, value) {
          const { originalTarget, membrane: { valueMutated } } = this;
          const oldValue = originalTarget[key];
          if (oldValue !== value) {
              originalTarget[key] = value;
              valueMutated(originalTarget, key);
          }
          else if (key === 'length' && isArray(originalTarget)) {
              // fix for issue #236: push will add the new index, and by the time length
              // is updated, the internal length is already equal to the new length value
              // therefore, the oldValue is equal to the value. This is the forking logic
              // to support this use case.
              valueMutated(originalTarget, key);
          }
          return true;
      }
      deleteProperty(shadowTarget, key) {
          const { originalTarget, membrane: { valueMutated } } = this;
          delete originalTarget[key];
          valueMutated(originalTarget, key);
          return true;
      }
      apply(shadowTarget, thisArg, argArray) {
          /* No op */
      }
      construct(target, argArray, newTarget) {
          /* No op */
      }
      has(shadowTarget, key) {
          const { originalTarget, membrane: { valueObserved } } = this;
          valueObserved(originalTarget, key);
          return key in originalTarget;
      }
      ownKeys(shadowTarget) {
          const { originalTarget } = this;
          return ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));
      }
      isExtensible(shadowTarget) {
          const shadowIsExtensible = isExtensible(shadowTarget);
          if (!shadowIsExtensible) {
              return shadowIsExtensible;
          }
          const { originalTarget, membrane } = this;
          const targetIsExtensible = isExtensible(originalTarget);
          if (!targetIsExtensible) {
              lockShadowTarget(membrane, shadowTarget, originalTarget);
          }
          return targetIsExtensible;
      }
      setPrototypeOf(shadowTarget, prototype) {
      }
      getPrototypeOf(shadowTarget) {
          const { originalTarget } = this;
          return getPrototypeOf(originalTarget);
      }
      getOwnPropertyDescriptor(shadowTarget, key) {
          const { originalTarget, membrane } = this;
          const { valueObserved } = this.membrane;
          // keys looked up via hasOwnProperty need to be reactive
          valueObserved(originalTarget, key);
          let desc = getOwnPropertyDescriptor(originalTarget, key);
          if (isUndefined(desc)) {
              return desc;
          }
          const shadowDescriptor = getOwnPropertyDescriptor(shadowTarget, key);
          if (!isUndefined(shadowDescriptor)) {
              return shadowDescriptor;
          }
          // Note: by accessing the descriptor, the key is marked as observed
          // but access to the value, setter or getter (if available) cannot observe
          // mutations, just like regular methods, in which case we just do nothing.
          desc = wrapDescriptor(membrane, desc, wrapValue);
          if (!desc.configurable) {
              // If descriptor from original target is not configurable,
              // We must copy the wrapped descriptor over to the shadow target.
              // Otherwise, proxy will throw an invariant error.
              // This is our last chance to lock the value.
              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor#Invariants
              ObjectDefineProperty(shadowTarget, key, desc);
          }
          return desc;
      }
      preventExtensions(shadowTarget) {
          const { originalTarget, membrane } = this;
          lockShadowTarget(membrane, shadowTarget, originalTarget);
          preventExtensions(originalTarget);
          return true;
      }
      defineProperty(shadowTarget, key, descriptor) {
          const { originalTarget, membrane } = this;
          const { valueMutated } = membrane;
          const { configurable } = descriptor;
          // We have to check for value in descriptor
          // because Object.freeze(proxy) calls this method
          // with only { configurable: false, writeable: false }
          // Additionally, method will only be called with writeable:false
          // if the descriptor has a value, as opposed to getter/setter
          // So we can just check if writable is present and then see if
          // value is present. This eliminates getter and setter descriptors
          if (hasOwnProperty.call(descriptor, 'writable') && !hasOwnProperty.call(descriptor, 'value')) {
              const originalDescriptor = getOwnPropertyDescriptor(originalTarget, key);
              descriptor.value = originalDescriptor.value;
          }
          ObjectDefineProperty(originalTarget, key, unwrapDescriptor(descriptor));
          if (configurable === false) {
              ObjectDefineProperty(shadowTarget, key, wrapDescriptor(membrane, descriptor, wrapValue));
          }
          valueMutated(originalTarget, key);
          return true;
      }
  }

  function wrapReadOnlyValue(membrane, value) {
      return membrane.valueIsObservable(value) ? membrane.getReadOnlyProxy(value) : value;
  }
  class ReadOnlyHandler {
      constructor(membrane, value) {
          this.originalTarget = value;
          this.membrane = membrane;
      }
      get(shadowTarget, key) {
          const { membrane, originalTarget } = this;
          const value = originalTarget[key];
          const { valueObserved } = membrane;
          valueObserved(originalTarget, key);
          return membrane.getReadOnlyProxy(value);
      }
      set(shadowTarget, key, value) {
          return false;
      }
      deleteProperty(shadowTarget, key) {
          return false;
      }
      apply(shadowTarget, thisArg, argArray) {
          /* No op */
      }
      construct(target, argArray, newTarget) {
          /* No op */
      }
      has(shadowTarget, key) {
          const { originalTarget, membrane: { valueObserved } } = this;
          valueObserved(originalTarget, key);
          return key in originalTarget;
      }
      ownKeys(shadowTarget) {
          const { originalTarget } = this;
          return ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));
      }
      setPrototypeOf(shadowTarget, prototype) {
      }
      getOwnPropertyDescriptor(shadowTarget, key) {
          const { originalTarget, membrane } = this;
          const { valueObserved } = membrane;
          // keys looked up via hasOwnProperty need to be reactive
          valueObserved(originalTarget, key);
          let desc = getOwnPropertyDescriptor(originalTarget, key);
          if (isUndefined(desc)) {
              return desc;
          }
          const shadowDescriptor = getOwnPropertyDescriptor(shadowTarget, key);
          if (!isUndefined(shadowDescriptor)) {
              return shadowDescriptor;
          }
          // Note: by accessing the descriptor, the key is marked as observed
          // but access to the value or getter (if available) cannot be observed,
          // just like regular methods, in which case we just do nothing.
          desc = wrapDescriptor(membrane, desc, wrapReadOnlyValue);
          if (hasOwnProperty.call(desc, 'set')) {
              desc.set = undefined; // readOnly membrane does not allow setters
          }
          if (!desc.configurable) {
              // If descriptor from original target is not configurable,
              // We must copy the wrapped descriptor over to the shadow target.
              // Otherwise, proxy will throw an invariant error.
              // This is our last chance to lock the value.
              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor#Invariants
              ObjectDefineProperty(shadowTarget, key, desc);
          }
          return desc;
      }
      preventExtensions(shadowTarget) {
          return false;
      }
      defineProperty(shadowTarget, key, descriptor) {
          return false;
      }
  }
  function createShadowTarget(value) {
      let shadowTarget = undefined;
      if (isArray(value)) {
          shadowTarget = [];
      }
      else if (isObject(value)) {
          shadowTarget = {};
      }
      return shadowTarget;
  }
  const ObjectDotPrototype = Object.prototype;
  function defaultValueIsObservable(value) {
      // intentionally checking for null
      if (value === null) {
          return false;
      }
      // treat all non-object types, including undefined, as non-observable values
      if (typeof value !== 'object') {
          return false;
      }
      if (isArray(value)) {
          return true;
      }
      const proto = getPrototypeOf(value);
      return (proto === ObjectDotPrototype || proto === null || getPrototypeOf(proto) === null);
  }
  const defaultValueObserved = (obj, key) => {
      /* do nothing */
  };
  const defaultValueMutated = (obj, key) => {
      /* do nothing */
  };
  const defaultValueDistortion = (value) => value;
  function wrapDescriptor(membrane, descriptor, getValue) {
      const { set, get } = descriptor;
      if (hasOwnProperty.call(descriptor, 'value')) {
          descriptor.value = getValue(membrane, descriptor.value);
      }
      else {
          if (!isUndefined(get)) {
              descriptor.get = function () {
                  // invoking the original getter with the original target
                  return getValue(membrane, get.call(unwrap(this)));
              };
          }
          if (!isUndefined(set)) {
              descriptor.set = function (value) {
                  // At this point we don't have a clear indication of whether
                  // or not a valid mutation will occur, we don't have the key,
                  // and we are not sure why and how they are invoking this setter.
                  // Nevertheless we preserve the original semantics by invoking the
                  // original setter with the original target and the unwrapped value
                  set.call(unwrap(this), membrane.unwrapProxy(value));
              };
          }
      }
      return descriptor;
  }
  class ReactiveMembrane {
      constructor(options) {
          this.valueDistortion = defaultValueDistortion;
          this.valueMutated = defaultValueMutated;
          this.valueObserved = defaultValueObserved;
          this.valueIsObservable = defaultValueIsObservable;
          this.objectGraph = new WeakMap();
          if (!isUndefined(options)) {
              const { valueDistortion, valueMutated, valueObserved, valueIsObservable } = options;
              this.valueDistortion = isFunction(valueDistortion) ? valueDistortion : defaultValueDistortion;
              this.valueMutated = isFunction(valueMutated) ? valueMutated : defaultValueMutated;
              this.valueObserved = isFunction(valueObserved) ? valueObserved : defaultValueObserved;
              this.valueIsObservable = isFunction(valueIsObservable) ? valueIsObservable : defaultValueIsObservable;
          }
      }
      getProxy(value) {
          const unwrappedValue = unwrap(value);
          const distorted = this.valueDistortion(unwrappedValue);
          if (this.valueIsObservable(distorted)) {
              const o = this.getReactiveState(unwrappedValue, distorted);
              // when trying to extract the writable version of a readonly
              // we return the readonly.
              return o.readOnly === value ? value : o.reactive;
          }
          return distorted;
      }
      getReadOnlyProxy(value) {
          value = unwrap(value);
          const distorted = this.valueDistortion(value);
          if (this.valueIsObservable(distorted)) {
              return this.getReactiveState(value, distorted).readOnly;
          }
          return distorted;
      }
      unwrapProxy(p) {
          return unwrap(p);
      }
      getReactiveState(value, distortedValue) {
          const { objectGraph, } = this;
          let reactiveState = objectGraph.get(distortedValue);
          if (reactiveState) {
              return reactiveState;
          }
          const membrane = this;
          reactiveState = {
              get reactive() {
                  const reactiveHandler = new ReactiveProxyHandler(membrane, distortedValue);
                  // caching the reactive proxy after the first time it is accessed
                  const proxy = new Proxy(createShadowTarget(distortedValue), reactiveHandler);
                  registerProxy(proxy, value);
                  ObjectDefineProperty(this, 'reactive', { value: proxy });
                  return proxy;
              },
              get readOnly() {
                  const readOnlyHandler = new ReadOnlyHandler(membrane, distortedValue);
                  // caching the readOnly proxy after the first time it is accessed
                  const proxy = new Proxy(createShadowTarget(distortedValue), readOnlyHandler);
                  registerProxy(proxy, value);
                  ObjectDefineProperty(this, 'readOnly', { value: proxy });
                  return proxy;
              }
          };
          objectGraph.set(distortedValue, reactiveState);
          return reactiveState;
      }
  }
  /** version: 0.26.0 */

  function wrap(data, mutationCallback) {

    let membrane = new ReactiveMembrane({
      valueMutated(target, key) {
        mutationCallback(target, key);
      }

    });
    return {
      data: membrane.getProxy(data),
      membrane: membrane
    };
  }
  function unwrap$1(membrane, observable) {
    let unwrappedData = membrane.unwrapProxy(observable);
    let copy = {};
    Object.keys(unwrappedData).forEach(key => {
      if (['$el', '$refs', '$nextTick', '$watch'].includes(key)) return;
      copy[key] = unwrappedData[key];
    });
    return copy;
  }

  class Component {
    constructor(el, componentForClone = null) {
      this.$el = el;
      const dataAttr = this.$el.getAttribute('x-data');
      const dataExpression = dataAttr === '' ? '{}' : dataAttr;
      const initExpression = this.$el.getAttribute('x-init');
      let dataExtras = {
        $el: this.$el
      };
      let canonicalComponentElementReference = componentForClone ? componentForClone.$el : this.$el;
      Object.entries(Alpine.magicProperties).forEach(([name, callback]) => {
        Object.defineProperty(dataExtras, `$${name}`, {
          get: function get() {
            return callback(canonicalComponentElementReference);
          }
        });
      });
      this.unobservedData = componentForClone ? componentForClone.getUnobservedData() : saferEval(el, dataExpression, dataExtras);
      // Construct a Proxy-based observable. This will be used to handle reactivity.

      let {
        membrane,
        data
      } = this.wrapDataInObservable(this.unobservedData);
      this.$data = data;
      this.membrane = membrane; // After making user-supplied data methods reactive, we can now add
      // our magic properties to the original data for access.

      this.unobservedData.$el = this.$el;
      this.unobservedData.$refs = this.getRefsProxy();
      this.nextTickStack = [];

      this.unobservedData.$nextTick = callback => {
        this.nextTickStack.push(callback);
      };

      this.watchers = {};

      this.unobservedData.$watch = (property, callback) => {
        if (!this.watchers[property]) this.watchers[property] = [];
        this.watchers[property].push(callback);
      };
      /* MODERN-ONLY:START */
      // We remove this piece of code from the legacy build.
      // In IE11, we have already defined our helpers at this point.
      // Register custom magic properties.


      Object.entries(Alpine.magicProperties).forEach(([name, callback]) => {
        Object.defineProperty(this.unobservedData, `$${name}`, {
          get: function get() {
            return callback(canonicalComponentElementReference, this.$el);
          }
        });
      });
      /* MODERN-ONLY:END */

      this.showDirectiveStack = [];
      this.showDirectiveLastElement;
      componentForClone || Alpine.onBeforeComponentInitializeds.forEach(callback => callback(this));
      var initReturnedCallback; // If x-init is present AND we aren't cloning (skip x-init on clone)

      if (initExpression && !componentForClone) {
        // We want to allow data manipulation, but not trigger DOM updates just yet.
        // We haven't even initialized the elements with their Alpine bindings. I mean c'mon.
        this.pauseReactivity = true;
        initReturnedCallback = this.evaluateReturnExpression(this.$el, initExpression);
        this.pauseReactivity = false;
      } // Register all our listeners and set all our attribute bindings.
      // If we're cloning a component, the third parameter ensures no duplicate
      // event listeners are registered (the mutation observer will take care of them)


      this.initializeElements(this.$el, () => {}, componentForClone); // Use mutation observer to detect new elements being added within this component at run-time.
      // Alpine's just so darn flexible amirite?

      this.listenForNewElementsToInitialize();

      if (typeof initReturnedCallback === 'function') {
        // Run the callback returned from the "x-init" hook to allow the user to do stuff after
        // Alpine's got it's grubby little paws all over everything.
        initReturnedCallback.call(this.$data);
      }

      componentForClone || setTimeout(() => {
        Alpine.onComponentInitializeds.forEach(callback => callback(this));
      }, 0);
    }

    getUnobservedData() {
      return unwrap$1(this.membrane, this.$data);
    }

    wrapDataInObservable(data) {
      var self = this;
      let updateDom = debounce(function () {
        self.updateElements(self.$el);
      }, 0);
      return wrap(data, (target, key) => {
        if (self.watchers[key]) {
          // If there's a watcher for this specific key, run it.
          self.watchers[key].forEach(callback => callback(target[key]));
        } else if (Array.isArray(target)) {
          // Arrays are special cases, if any of the items change, we consider the array as mutated.
          Object.keys(self.watchers).forEach(fullDotNotationKey => {
            let dotNotationParts = fullDotNotationKey.split('.'); // Ignore length mutations since they would result in duplicate calls.
            // For example, when calling push, we would get a mutation for the item's key
            // and a second mutation for the length property.

            if (key === 'length') return;
            dotNotationParts.reduce((comparisonData, part) => {
              if (Object.is(target, comparisonData[part])) {
                self.watchers[fullDotNotationKey].forEach(callback => callback(target));
              }

              return comparisonData[part];
            }, self.unobservedData);
          });
        } else {
          // Let's walk through the watchers with "dot-notation" (foo.bar) and see
          // if this mutation fits any of them.
          Object.keys(self.watchers).filter(i => i.includes('.')).forEach(fullDotNotationKey => {
            let dotNotationParts = fullDotNotationKey.split('.'); // If this dot-notation watcher's last "part" doesn't match the current
            // key, then skip it early for performance reasons.

            if (key !== dotNotationParts[dotNotationParts.length - 1]) return; // Now, walk through the dot-notation "parts" recursively to find
            // a match, and call the watcher if one's found.

            dotNotationParts.reduce((comparisonData, part) => {
              if (Object.is(target, comparisonData)) {
                // Run the watchers.
                self.watchers[fullDotNotationKey].forEach(callback => callback(target[key]));
              }

              return comparisonData[part];
            }, self.unobservedData);
          });
        } // Don't react to data changes for cases like the `x-created` hook.


        if (self.pauseReactivity) return;
        updateDom();
      });
    }

    walkAndSkipNestedComponents(el, callback, initializeComponentCallback = () => {}) {
      walk(el, el => {
        // We've hit a component.
        if (el.hasAttribute('x-data')) {
          // If it's not the current one.
          if (!el.isSameNode(this.$el)) {
            // Initialize it if it's not.
            if (!el.__x) initializeComponentCallback(el); // Now we'll let that sub-component deal with itself.

            return false;
          }
        }

        return callback(el);
      });
    }

    initializeElements(rootEl, extraVars = () => {}, componentForClone = false) {
      this.walkAndSkipNestedComponents(rootEl, el => {
        // Don't touch spawns from for loop
        if (el.__x_for_key !== undefined) return false; // Don't touch spawns from if directives

        if (el.__x_inserted_me !== undefined) return false;
        this.initializeElement(el, extraVars, componentForClone ? false : true);
      }, el => {
        if (!componentForClone) el.__x = new Component(el);
      });
      this.executeAndClearRemainingShowDirectiveStack();
      this.executeAndClearNextTickStack(rootEl);
    }

    initializeElement(el, extraVars, shouldRegisterListeners = true) {
      // To support class attribute merging, we have to know what the element's
      // original class attribute looked like for reference.
      if (el.hasAttribute('class') && getXAttrs(el, this).length > 0) {
        el.__x_original_classes = convertClassStringToArray(el.getAttribute('class'));
      }

      shouldRegisterListeners && this.registerListeners(el, extraVars);
      this.resolveBoundAttributes(el, true, extraVars);
    }

    updateElements(rootEl, extraVars = () => {}) {
      this.walkAndSkipNestedComponents(rootEl, el => {
        // Don't touch spawns from for loop (and check if the root is actually a for loop in a parent, don't skip it.)
        if (el.__x_for_key !== undefined && !el.isSameNode(this.$el)) return false;
        this.updateElement(el, extraVars);
      }, el => {
        el.__x = new Component(el);
      });
      this.executeAndClearRemainingShowDirectiveStack();
      this.executeAndClearNextTickStack(rootEl);
    }

    executeAndClearNextTickStack(el) {
      // Skip spawns from alpine directives
      if (el === this.$el && this.nextTickStack.length > 0) {
        // We run the tick stack after the next frame to allow any
        // running transitions to pass the initial show stage.
        requestAnimationFrame(() => {
          while (this.nextTickStack.length > 0) {
            this.nextTickStack.shift()();
          }
        });
      }
    }

    executeAndClearRemainingShowDirectiveStack() {
      // The goal here is to start all the x-show transitions
      // and build a nested promise chain so that elements
      // only hide when the children are finished hiding.
      this.showDirectiveStack.reverse().map(handler => {
        return new Promise((resolve, reject) => {
          handler(resolve, reject);
        });
      }).reduce((promiseChain, promise) => {
        return promiseChain.then(() => {
          return promise.then(finishElement => {
            finishElement();
          });
        });
      }, Promise.resolve(() => {})).catch(e => {
        if (e !== TRANSITION_CANCELLED) throw e;
      }); // We've processed the handler stack. let's clear it.

      this.showDirectiveStack = [];
      this.showDirectiveLastElement = undefined;
    }

    updateElement(el, extraVars) {
      this.resolveBoundAttributes(el, false, extraVars);
    }

    registerListeners(el, extraVars) {
      getXAttrs(el, this).forEach(({
        type,
        value,
        modifiers,
        expression
      }) => {
        switch (type) {
          case 'on':
            registerListener(this, el, value, modifiers, expression, extraVars);
            break;

          case 'model':
            registerModelListener(this, el, modifiers, expression, extraVars);
            break;
        }
      });
    }

    resolveBoundAttributes(el, initialUpdate = false, extraVars) {
      let attrs = getXAttrs(el, this);
      attrs.forEach(({
        type,
        value,
        modifiers,
        expression
      }) => {
        switch (type) {
          case 'model':
            handleAttributeBindingDirective(this, el, 'value', expression, extraVars, type, modifiers);
            break;

          case 'bind':
            // The :key binding on an x-for is special, ignore it.
            if (el.tagName.toLowerCase() === 'template' && value === 'key') return;
            handleAttributeBindingDirective(this, el, value, expression, extraVars, type, modifiers);
            break;

          case 'text':
            var output = this.evaluateReturnExpression(el, expression, extraVars);
            handleTextDirective(el, output, expression);
            break;

          case 'html':
            handleHtmlDirective(this, el, expression, extraVars);
            break;

          case 'show':
            var output = this.evaluateReturnExpression(el, expression, extraVars);
            handleShowDirective(this, el, output, modifiers, initialUpdate);
            break;

          case 'if':
            // If this element also has x-for on it, don't process x-if.
            // We will let the "x-for" directive handle the "if"ing.
            if (attrs.some(i => i.type === 'for')) return;
            var output = this.evaluateReturnExpression(el, expression, extraVars);
            handleIfDirective(this, el, output, initialUpdate, extraVars);
            break;

          case 'for':
            handleForDirective(this, el, expression, initialUpdate, extraVars);
            break;

          case 'cloak':
            el.removeAttribute('x-cloak');
            break;
        }
      });
    }

    evaluateReturnExpression(el, expression, extraVars = () => {}) {
      return saferEval(el, expression, this.$data, _objectSpread2(_objectSpread2({}, extraVars()), {}, {
        $dispatch: this.getDispatchFunction(el)
      }));
    }

    evaluateCommandExpression(el, expression, extraVars = () => {}) {
      return saferEvalNoReturn(el, expression, this.$data, _objectSpread2(_objectSpread2({}, extraVars()), {}, {
        $dispatch: this.getDispatchFunction(el)
      }));
    }

    getDispatchFunction(el) {
      return (event, detail = {}) => {
        el.dispatchEvent(new CustomEvent(event, {
          detail,
          bubbles: true
        }));
      };
    }

    listenForNewElementsToInitialize() {
      const targetNode = this.$el;
      const observerOptions = {
        childList: true,
        attributes: true,
        subtree: true
      };
      const observer = new MutationObserver(mutations => {
        for (let i = 0; i < mutations.length; i++) {
          // Filter out mutations triggered from child components.
          const closestParentComponent = mutations[i].target.closest('[x-data]');
          if (!(closestParentComponent && closestParentComponent.isSameNode(this.$el))) continue;

          if (mutations[i].type === 'attributes' && mutations[i].attributeName === 'x-data') {
            const xAttr = mutations[i].target.getAttribute('x-data') || '{}';
            const rawData = saferEval(this.$el, xAttr, {
              $el: this.$el
            });
            Object.keys(rawData).forEach(key => {
              if (this.$data[key] !== rawData[key]) {
                this.$data[key] = rawData[key];
              }
            });
          }

          if (mutations[i].addedNodes.length > 0) {
            mutations[i].addedNodes.forEach(node => {
              if (node.nodeType !== 1 || node.__x_inserted_me) return;

              if (node.matches('[x-data]') && !node.__x) {
                node.__x = new Component(node);
                return;
              }

              this.initializeElements(node);
            });
          }
        }
      });
      observer.observe(targetNode, observerOptions);
    }

    getRefsProxy() {
      var self = this;
      var refObj = {};
      // One of the goals of this is to not hold elements in memory, but rather re-evaluate
      // the DOM when the system needs something from it. This way, the framework is flexible and
      // friendly to outside DOM changes from libraries like Vue/Livewire.
      // For this reason, I'm using an "on-demand" proxy to fake a "$refs" object.

      return new Proxy(refObj, {
        get(object, property) {
          if (property === '$isAlpineProxy') return true;
          var ref; // We can't just query the DOM because it's hard to filter out refs in
          // nested components.

          self.walkAndSkipNestedComponents(self.$el, el => {
            if (el.hasAttribute('x-ref') && el.getAttribute('x-ref') === property) {
              ref = el;
            }
          });
          return ref;
        }

      });
    }

  }

  const Alpine = {
    version: "2.8.2",
    pauseMutationObserver: false,
    magicProperties: {},
    onComponentInitializeds: [],
    onBeforeComponentInitializeds: [],
    ignoreFocusedForValueBinding: false,
    start: async function start() {
      if (!isTesting()) {
        await domReady();
      }

      this.discoverComponents(el => {
        this.initializeComponent(el);
      }); // It's easier and more performant to just support Turbolinks than listen
      // to MutationObserver mutations at the document level.

      document.addEventListener("turbolinks:load", () => {
        this.discoverUninitializedComponents(el => {
          this.initializeComponent(el);
        });
      });
      this.listenForNewUninitializedComponentsAtRunTime();
    },
    discoverComponents: function discoverComponents(callback) {
      const rootEls = document.querySelectorAll('[x-data]');
      rootEls.forEach(rootEl => {
        callback(rootEl);
      });
    },
    discoverUninitializedComponents: function discoverUninitializedComponents(callback, el = null) {
      const rootEls = (el || document).querySelectorAll('[x-data]');
      Array.from(rootEls).filter(el => el.__x === undefined).forEach(rootEl => {
        callback(rootEl);
      });
    },
    listenForNewUninitializedComponentsAtRunTime: function listenForNewUninitializedComponentsAtRunTime() {
      const targetNode = document.querySelector('body');
      const observerOptions = {
        childList: true,
        attributes: true,
        subtree: true
      };
      const observer = new MutationObserver(mutations => {
        if (this.pauseMutationObserver) return;

        for (let i = 0; i < mutations.length; i++) {
          if (mutations[i].addedNodes.length > 0) {
            mutations[i].addedNodes.forEach(node => {
              // Discard non-element nodes (like line-breaks)
              if (node.nodeType !== 1) return; // Discard any changes happening within an existing component.
              // They will take care of themselves.

              if (node.parentElement && node.parentElement.closest('[x-data]')) return;
              this.discoverUninitializedComponents(el => {
                this.initializeComponent(el);
              }, node.parentElement);
            });
          }
        }
      });
      observer.observe(targetNode, observerOptions);
    },
    initializeComponent: function initializeComponent(el) {
      if (!el.__x) {
        // Wrap in a try/catch so that we don't prevent other components
        // from initializing when one component contains an error.
        try {
          el.__x = new Component(el);
        } catch (error) {
          setTimeout(() => {
            throw error;
          }, 0);
        }
      }
    },
    clone: function clone(component, newEl) {
      if (!newEl.__x) {
        newEl.__x = new Component(newEl, component);
      }
    },
    addMagicProperty: function addMagicProperty(name, callback) {
      this.magicProperties[name] = callback;
    },
    onComponentInitialized: function onComponentInitialized(callback) {
      this.onComponentInitializeds.push(callback);
    },
    onBeforeComponentInitialized: function onBeforeComponentInitialized(callback) {
      this.onBeforeComponentInitializeds.push(callback);
    }
  };

  if (!isTesting()) {
    window.Alpine = Alpine;

    if (window.deferLoadingAlpine) {
      window.deferLoadingAlpine(function () {
        window.Alpine.start();
      });
    } else {
      window.Alpine.start();
    }
  }

  return Alpine;

})));


/***/ }),

/***/ "./resources/js/src/AppServiceProvider.js":
/*!************************************************!*\
  !*** ./resources/js/src/AppServiceProvider.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppServiceProvider": () => (/* binding */ AppServiceProvider)
/* harmony export */ });
/* harmony import */ var _laravel_streams_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @laravel-streams/core */ "./node_modules/@laravel-streams/core/resources/public/js/index.esm.js");


class AppServiceProvider extends _laravel_streams_core__WEBPACK_IMPORTED_MODULE_0__.ServiceProvider {

    register() {
        //
    }

    boot() {
        //
    }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppServiceProvider": () => (/* reexport safe */ _src_AppServiceProvider__WEBPACK_IMPORTED_MODULE_0__.AppServiceProvider),
/* harmony export */   "test": () => (/* binding */ test)
/* harmony export */ });
/* harmony import */ var _src_AppServiceProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/AppServiceProvider */ "./resources/js/src/AppServiceProvider.js");
/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! alpinejs */ "./node_modules/alpinejs/dist/alpine.js");
/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(alpinejs__WEBPACK_IMPORTED_MODULE_1__);




const test = true;



})();

window.app = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,